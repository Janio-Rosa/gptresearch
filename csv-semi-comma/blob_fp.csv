24; {   "message": "YES I found bad smells",   "bad smells are": "3. Blob, 4. Data Class" };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class Ipam {   private String driver;   private List config;   private Map options;    public String getDriver() {     return driver;   }    public void setDriver(String driver) {     this.driver = driver;   }    public Ipam withDriver(String driver) {     this.driver = driver;     return this;   }    public List getConfig() {     return config;   }    public void setConfig(List config) {     this.config = config;   }    public Ipam withConfig(List config) {     this.config = config;     return this;   }    public Map getOptions() {     return options;   }    public void setOptions(Map options) {     this.options = options;   }    public Ipam withOptions(Map options) {     this.options = options;     return this;   }    @Override   public boolean equals(Object obj) {     if (this == obj) {       return true;     }     if (!(obj instanceof Ipam)) {       return false;     }     final Ipam that = (Ipam) obj;     return Objects.equals(driver, that.driver)         && getConfig().equals(that.getConfig())         && getOptions().equals(that.getOptions());   }    @Override   public int hashCode() {     int hash = 7;     hash = 31 * hash + Objects.hashCode(driver);     hash = 31 * hash + getConfig().hashCode();     hash = 31 * hash + getOptions().hashCode();     return hash;   }    @Override   public String toString() {     return "Ipam{"         + "driver='"         + driver         + '\''         + ", config="         + config         + ", options="         + options         + '}';   } };data class;3. blob, 4. data class;t;t;t;3. blob;;0;691;https://github.com/eclipse/che/blob/c5498c2ac562cd8a2fc79a6bb0446d291f05a201/infrastructures/docker/docker-client/src/main/java/org/eclipse/che/infrastructure/docker/client/json/network/Ipam.java/#L19-L98;2;24;691
46;{"response": "YES, I found bad smells", "detected_bad_smells": ["Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
	public UDATA add(UDATA parameter) { 		return new UDATA(this).add(parameter); 	};feature envy;blob;t;t;f;blob;feature envy;0;835;https://github.com/eclipse/openj9/blob/4911084853eb75b20e037c434ad4521b7317ebfb/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/types/U32.java/#L70-L72;2;46;835
58;      {   "message": "YES I found bad smells",   "bad smells are": [     "Long Method",     "Blob"   ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@AutoValue abstract class UOfKind extends UExpression {   public static UOfKind create(UExpression expression, Set allowed) {     return new AutoValue_UOfKind(expression, allowed);   }    abstract UExpression expression();    abstract Set allowed();    @Override   public JCExpression inline(Inliner inliner) throws CouldNotResolveImportException {     return expression().inline(inliner);   }    @Override   public  R accept(TreeVisitor visitor, D data) {     return expression().accept(visitor, data);   }    @Override   public Kind getKind() {     return expression().getKind();   }    @Override   @Nullable   protected Choice defaultAction(Tree tree, @Nullable Unifier unifier) {     return Choice.condition(allowed().contains(tree.getKind()), unifier)         .thenChoose(unifications(expression(), tree));   } };data class;long method, blob;t;t;f;long method,  blob;data class;0;988;https://github.com/google/error-prone/blob/61cb540c08ec63faa56dccce00049cff1f8b41ea/core/src/main/java/com/google/errorprone/refaster/UOfKind.java/#L33-L64;2;58;988
59;{"response": "YES I found bad smells", "detected_bad_smells": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class SysInfo implements Serializable {      static final long serialVersionUID = -3096346807579L;      public int numCores;     public long maxMemory;      public SysInfo(int nc, long mm) {         numCores = nc;         maxMemory = mm;     } };data class;blob, data class;t;t;t;blob;;0;1004;https://github.com/google/error-prone-javac/blob/a53d069bbdb2c60232ed3811c19b65e41c3e60e0/src/jdk.compiler/share/classes/com/sun/tools/sjavac/server/SysInfo.java/#L45-L56;2;59;1004
62;     {         "message": "YES I found bad smells",         "bad smells are": [             "Long Method",             "Blob"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  @AutoValue.Builder   public abstract static class Builder {     public abstract Builder setCompileTimeConstant(boolean compileTimeConstant);      public abstract Builder setStatic(boolean isStatic);      public abstract Builder setFinal(boolean isFinal);      public abstract Builder setVariableCapture(boolean isVariableCapture);      public abstract Builder setEnclosingInstanceCapture(boolean isEnclosingInstanceCapture);      public abstract Builder setEnclosingTypeDescriptor(         DeclaredTypeDescriptor enclosingTypeDescriptor);      public abstract Builder setName(String name);      public abstract Builder setEnumConstant(boolean isEnumConstant);      public abstract Builder setSynthetic(boolean isSynthetic);      public abstract Builder setTypeDescriptor(TypeDescriptor typeDescriptor);      public abstract Builder setVisibility(Visibility visibility);      public abstract Builder setJsInfo(JsInfo jsInfo);      public abstract Builder setUnusableByJsSuppressed(boolean isUnusableByJsSuppressed);      public abstract Builder setDeprecated(boolean isDeprecated);      public abstract Builder setOrigin(FieldOrigin fieldOrigin);      public Builder setDeclarationFieldDescriptor(FieldDescriptor declarationFieldDescriptor) {       return setDeclarationFieldDescriptorOrNullIfSelf(declarationFieldDescriptor);     }      // Accessors to support validation, default construction and custom setters.     abstract Builder setDeclarationFieldDescriptorOrNullIfSelf(         FieldDescriptor declarationFieldDescriptor);      abstract Optional getName();      abstract FieldDescriptor autoBuild();      public FieldDescriptor build() {       checkState(getName().isPresent());       FieldDescriptor fieldDescriptor = autoBuild();        checkState(           !fieldDescriptor.isVariableCapture() || !fieldDescriptor.isEnclosingInstanceCapture());        return interner.intern(fieldDescriptor);     }      public static Builder from(FieldDescriptor fieldDescriptor) {       return fieldDescriptor.toBuilder();     }      private static final ThreadLocalInterner interner =         new ThreadLocalInterner<>();   };data class;long method, blob;t;t;f;long method,  blob;data class;0;1048;https://github.com/google/j2cl/blob/f233ebf547cce390cf87ce346ed82e0512f4fbe1/transpiler/java/com/google/j2cl/ast/FieldDescriptor.java/#L194-L255;2;62;1048
80;{"message": "YES I found bad smells", "bad smells": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  abstract static class RequestParamsBuilder {     T body;      public RequestParamsBuilder(T body) {       this.body = body;     }      abstract RequestParams buildRequestParams();      void setBody(T body) {       this.body = body;     }   };data class;blob, data class;t;t;t;blob;;0;1185;https://github.com/oracle/weblogic-kubernetes-operator/blob/1fb059d7e32b9b3514617d54e4dda41ab68e71ea/operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java/#L179-L191;2;80;1185
88; {"message": "YES I found bad smells", "bad_smells_found": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  static class DynamicPackageEntry {      // public:     //     // DynamicPackageEntry() =default;      DynamicPackageEntry(String package_name, int package_id) {       this.package_name = package_name;       this.package_id = package_id;     }      String package_name;     int package_id = 0;   };data class;blob, data class;t;t;t;blob;;0;1229;https://github.com/robolectric/robolectric/blob/525bfcfc0e0ed1653ad57341b564c6857e11dc50/resources/src/main/java/org/robolectric/res/android/LoadedArsc.java/#L62-L75;2;88;1229
90;{"response": "YES, I found bad smells the bad smells are: 1. Blob"};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public abstract class TestConfiguration {  	private String downloadUrl;  	private final String description;  	private TestSuite suite;  	public TestConfiguration(String description) { 		this.description = description; 	}  	public String getDownloadUrl() { 		return downloadUrl; 	}  	public void setDownloadUrl(String downloadUrl) { 		this.downloadUrl = downloadUrl; 	}  	public String getDescription() { 		return description; 	}  	@Override 	public String toString() { 		return getClass().getSimpleName() + " [" + description + "]"; 	}  	public TestSuite createSuite(TestSuite parentSuite) { 		suite = new TestSuite("Testing on " + getDescription()); 		parentSuite.addTest(suite); 		suite.addTest(new Activation("TestSuite: " + getDescription(), true)); 		return suite; 	}  	public void add(Class clazz) { 		Assert.isNotNull(suite, "Invoke createSuite() first"); 		suite.addTestSuite(clazz); 	}  	public void done() { 		Assert.isNotNull(suite, "Invoke createSuite() first"); 		suite.addTest(new Activation("done", false)); 		suite = null; 	}  	private final class Activation extends TestCase {  		private final boolean activate;  		private Activation(String name, boolean activate) { 			super(name); 			this.activate = activate; 		}  		@Override 		protected void runTest() throws Throwable { 			if (activate) { 				activate(); 			} 			else { 				getDefault().activate(); 			} 		}  	}  	protected abstract TestConfiguration getDefault();  	public abstract void activate();  	public abstract TestHarness createHarness();  };data class;1. blob;t;t;f;1. blob;data class;0;1240;https://github.com/spring-projects/eclipse-integration-tcserver/blob/5b381256cb35cfe2aa21f5093558f7ca927c289f/com.vmware.vfabric.ide.eclipse.tcserver.tests/src/com/vmware/vfabric/ide/eclipse/tcserver/tests/support/TestConfiguration.java/#L21-L95;2;90;1240
93;{"response": "YES I found bad smells the bad smells are: 1. Blob"};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class DefaultResourceService implements ResourceService {  	private String servletPath = ""; 	 	/** 	 * @param servletPath the servletPath to set 	 */ 	public void setServletPath(String servletPath) { 		this.servletPath = servletPath; 	}  	public String getServletPath() { 		return servletPath; 	}  };data class;1. blob;t;t;f;1. blob;data class;0;1252;https://github.com/spring-projects/spring-batch-admin/blob/9e3ad8bff99b8fad8da62426aa7d2959eb841bcf/spring-batch-admin-resources/src/main/java/org/springframework/batch/admin/web/resources/DefaultResourceService.java/#L23-L38;2;93;1252
94; {"message": "YES I found bad smells",  "bad_smells": ["Blob", "Data Class", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public interface ServletConstants {     String PAGE_HEADER           = "\n" +             "\n" +             "\n" +             "    \n" +             "    Weblogic Monitoring Exporter\n" +             "\n" +             "";      // The locations of the servlets relative to the web app     String MAIN_PAGE = "";     String METRICS_PAGE = "metrics";     String CONFIGURATION_PAGE = "configure";      /** The header used by a web client to send its authentication credentials. **/     String AUTHENTICATION_HEADER = "Authorization";      /** The header used by a web client to send cookies as part of a request. */     String COOKIE_HEADER = "Cookie";      // The field which defines the configuration update action     String EFFECT_OPTION = "effect";      // The possible values for the effect     String DEFAULT_ACTION = ServletConstants.REPLACE_ACTION;     String REPLACE_ACTION = "replace";     String APPEND_ACTION = "append"; };data class;blob, data class, long method;t;t;t;blob,  long method;;0;1261;https://github.com/oracle/weblogic-monitoring-exporter/blob/05f1d3c4cc797577801df0ceceb9d92fc31718e8/src/main/java/io/prometheus/wls/rest/ServletConstants.java/#L13-L41;2;94;1261
97; {"message": "YES I found bad smells", "detected_bad_smells": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
	public static class Undertow {  		/** 		 * Maximum size of the HTTP post content. When the value is -1, the default, the 		 * size is unlimited. 		 */ 		private DataSize maxHttpPostSize = DataSize.ofBytes(-1);  		/** 		 * Size of each buffer. The default is derived from the maximum amount of memory 		 * that is available to the JVM. 		 */ 		private DataSize bufferSize;  		/** 		 * Number of I/O threads to create for the worker. The default is derived from the 		 * number of available processors. 		 */ 		private Integer ioThreads;  		/** 		 * Number of worker threads. The default is 8 times the number of I/O threads. 		 */ 		private Integer workerThreads;  		/** 		 * Whether to allocate buffers outside the Java heap. The default is derived from 		 * the maximum amount of memory that is available to the JVM. 		 */ 		private Boolean directBuffers;  		/** 		 * Whether servlet filters should be initialized on startup. 		 */ 		private boolean eagerFilterInit = true;  		private final Accesslog accesslog = new Accesslog();  		public DataSize getMaxHttpPostSize() { 			return this.maxHttpPostSize; 		}  		public void setMaxHttpPostSize(DataSize maxHttpPostSize) { 			this.maxHttpPostSize = maxHttpPostSize; 		}  		public DataSize getBufferSize() { 			return this.bufferSize; 		}  		public void setBufferSize(DataSize bufferSize) { 			this.bufferSize = bufferSize; 		}  		public Integer getIoThreads() { 			return this.ioThreads; 		}  		public void setIoThreads(Integer ioThreads) { 			this.ioThreads = ioThreads; 		}  		public Integer getWorkerThreads() { 			return this.workerThreads; 		}  		public void setWorkerThreads(Integer workerThreads) { 			this.workerThreads = workerThreads; 		}  		public Boolean getDirectBuffers() { 			return this.directBuffers; 		}  		public void setDirectBuffers(Boolean directBuffers) { 			this.directBuffers = directBuffers; 		}  		public boolean isEagerFilterInit() { 			return this.eagerFilterInit; 		}  		public void setEagerFilterInit(boolean eagerFilterInit) { 			this.eagerFilterInit = eagerFilterInit; 		}  		public Accesslog getAccesslog() { 			return this.accesslog; 		}  		/** 		 * Undertow access log properties. 		 */ 		public static class Accesslog {  			/** 			 * Whether to enable the access log. 			 */ 			private boolean enabled = false;  			/** 			 * Format pattern for access logs. 			 */ 			private String pattern = "common";  			/** 			 * Log file name prefix. 			 */ 			protected String prefix = "access_log.";  			/** 			 * Log file name suffix. 			 */ 			private String suffix = "log";  			/** 			 * Undertow access log directory. 			 */ 			private File dir = new File("logs");  			/** 			 * Whether to enable access log rotation. 			 */ 			private boolean rotate = true;  			public boolean isEnabled() { 				return this.enabled; 			}  			public void setEnabled(boolean enabled) { 				this.enabled = enabled; 			}  			public String getPattern() { 				return this.pattern; 			}  			public void setPattern(String pattern) { 				this.pattern = pattern; 			}  			public String getPrefix() { 				return this.prefix; 			}  			public void setPrefix(String prefix) { 				this.prefix = prefix; 			}  			public String getSuffix() { 				return this.suffix; 			}  			public void setSuffix(String suffix) { 				this.suffix = suffix; 			}  			public File getDir() { 				return this.dir; 			}  			public void setDir(File dir) { 				this.dir = dir; 			}  			public boolean isRotate() { 				return this.rotate; 			}  			public void setRotate(boolean rotate) { 				this.rotate = rotate; 			}  		}  	};data class;blob, data class;t;t;t;blob;;0;1279;https://github.com/spring-projects/spring-boot/blob/2225b362991f225e3a93f00e160526d2b8abdfb2/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java/#L949-L1124;2;97;1279
107;   {     "response": "YES I found bad smells",     "detected_bad_smells": [       "1. Blob",       "2. Long Method"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public interface Customer583Repository extends CrudRepository {  	List findByLastName(String lastName); };data class;1. blob, 2. long method;t;t;f;1. blob,  2. long method;data class;0;1412;https://github.com/spring-projects/spring-data-examples/blob/ccae97890f85a3eaf8f4e05a1a07696e2b1e78a4/jpa/deferred/src/main/java/example/repo/Customer583Repository.java/#L9-L12;2;107;1412
117; {"response": "YES I found bad smells", "bad smells are": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class ThymeleafAnnotationValues extends AbstractAnnotationValues {    @AutoPopulate   private String[] excludeMethods;    @AutoPopulate   private String[] excludeViews;    /**    * Constructor    *    * @param governorPhysicalTypeMetadata    */   public ThymeleafAnnotationValues(final PhysicalTypeMetadata governorPhysicalTypeMetadata) {     super(governorPhysicalTypeMetadata, ROO_THYMELEAF);     AutoPopulationUtils.populate(this, annotationMetadata);   }     public String[] getExcludeMethods() {     return excludeMethods;   }    public String[] getExcludeViews() {     return excludeViews;   }  };data class;blob, data class;t;t;t;blob;;0;1507;https://github.com/spring-projects/spring-roo/blob/4a2e9f1eb17d4e49ad947503a63afef7d5a37842/addon-web-mvc-thymeleaf/addon/src/main/java/org/springframework/roo/addon/web/mvc/thymeleaf/addon/ThymeleafAnnotationValues.java/#L17-L44;2;117;1507
121;{"response": "YES I found bad smells", "detected_bad_smells": ["1. Blob", "2. Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
	private void formatElement(IProgressMonitor monitor) { 		FormatProcessorXML formatProcessor = new FormatProcessorXML(); 		formatProcessor.setProgressMonitor(monitor); 		formatProcessor.getFormatPreferences().setClearAllBlankLines(true); 		formatProcessor.formatModel(model);  		CleanupProcessorXML bla = new CleanupProcessorXML(); 		bla.getCleanupPreferences().setCompressEmptyElementTags(true); 		bla.cleanupModel(model); 	};feature envy;1. blob, 2. long method;t;t;f;1. blob,  2. long method;feature envy;0;1534;https://github.com/spring-projects/spring-ide/blob/915fe9bffd50db45ee0b8fb993416e45dee68179/plugins/org.springframework.ide.eclipse.webflow.ui.graph/src/org/springframework/ide/eclipse/webflow/ui/graph/WebflowEditor.java/#L578-L587;2;121;1534
133; {"message": "YES I found bad smells", "bad_smells": ["Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class AnnotPage extends ContactsDisplayPage { 	@SpringBean 	private ContactDao dao;  	@Override 	protected ContactDataProvider getDataProvider() 	{ 		return new ProxyDataProvider(dao); 	} };data class;blob;t;t;f;blob;data class;0;1634;https://github.com/apache/wicket/blob/c2d344219ef8046508ca40653c9de485b3cbd4c4/wicket-examples/src/main/java/org/apache/wicket/examples/spring/annot/web/AnnotPage.java/#L27-L37;2;133;1634
137; {   "message": "YES, I found bad smells",   "detected_bad_smells": [     "1. Blob",     "2. Data Class",     "3. Long Method"   ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class LoopedModelImpl extends MinimalEObjectImpl.Container implements LoopedModel {   /**    * The cached value of the '{@link #getVisibility() Visibility}' attribute list.    *     *     * @see #getVisibility()    * @generated    * @ordered    */   protected EList visibility;    /**    * The cached value of the '{@link #getStatic() Static}' attribute list.    *     *     * @see #getStatic()    * @generated    * @ordered    */   protected EList static_;    /**    * The cached value of the '{@link #getSynchronized() Synchronized}' attribute list.    *     *     * @see #getSynchronized()    * @generated    * @ordered    */   protected EList synchronized_;    /**    * The cached value of the '{@link #getAbstract() Abstract}' attribute list.    *     *     * @see #getAbstract()    * @generated    * @ordered    */   protected EList abstract_;    /**    * The cached value of the '{@link #getFinal() Final}' attribute list.    *     *     * @see #getFinal()    * @generated    * @ordered    */   protected EList final_;    /**    * The default value of the '{@link #getName() Name}' attribute.    *     *     * @see #getName()    * @generated    * @ordered    */   protected static final String NAME_EDEFAULT = null;    /**    * The cached value of the '{@link #getName() Name}' attribute.    *     *     * @see #getName()    * @generated    * @ordered    */   protected String name = NAME_EDEFAULT;    /**    *     *     * @generated    */   protected LoopedModelImpl()   {     super();   }    /**    *     *     * @generated    */   @Override   protected EClass eStaticClass()   {     return UnorderedGroupsTestPackage.Literals.LOOPED_MODEL;   }    /**    *     *     * @generated    */   public EList getVisibility()   {     if (visibility == null)     {       visibility = new EDataTypeEList(String.class, this, UnorderedGroupsTestPackage.LOOPED_MODEL__VISIBILITY);     }     return visibility;   }    /**    *     *     * @generated    */   public EList getStatic()   {     if (static_ == null)     {       static_ = new EDataTypeEList(String.class, this, UnorderedGroupsTestPackage.LOOPED_MODEL__STATIC);     }     return static_;   }    /**    *     *     * @generated    */   public EList getSynchronized()   {     if (synchronized_ == null)     {       synchronized_ = new EDataTypeEList(String.class, this, UnorderedGroupsTestPackage.LOOPED_MODEL__SYNCHRONIZED);     }     return synchronized_;   }    /**    *     *     * @generated    */   public EList getAbstract()   {     if (abstract_ == null)     {       abstract_ = new EDataTypeEList(String.class, this, UnorderedGroupsTestPackage.LOOPED_MODEL__ABSTRACT);     }     return abstract_;   }    /**    *     *     * @generated    */   public EList getFinal()   {     if (final_ == null)     {       final_ = new EDataTypeEList(String.class, this, UnorderedGroupsTestPackage.LOOPED_MODEL__FINAL);     }     return final_;   }    /**    *     *     * @generated    */   public String getName()   {     return name;   }    /**    *     *     * @generated    */   public void setName(String newName)   {     String oldName = name;     name = newName;     if (eNotificationRequired())       eNotify(new ENotificationImpl(this, Notification.SET, UnorderedGroupsTestPackage.LOOPED_MODEL__NAME, oldName, name));   }    /**    *     *     * @generated    */   @Override   public Object eGet(int featureID, boolean resolve, boolean coreType)   {     switch (featureID)     {       case UnorderedGroupsTestPackage.LOOPED_MODEL__VISIBILITY:         return getVisibility();       case UnorderedGroupsTestPackage.LOOPED_MODEL__STATIC:         return getStatic();       case UnorderedGroupsTestPackage.LOOPED_MODEL__SYNCHRONIZED:         return getSynchronized();       case UnorderedGroupsTestPackage.LOOPED_MODEL__ABSTRACT:         return getAbstract();       case UnorderedGroupsTestPackage.LOOPED_MODEL__FINAL:         return getFinal();       case UnorderedGroupsTestPackage.LOOPED_MODEL__NAME:         return getName();     }     return super.eGet(featureID, resolve, coreType);   }    /**    *     *     * @generated    */   @SuppressWarnings("unchecked")   @Override   public void eSet(int featureID, Object newValue)   {     switch (featureID)     {       case UnorderedGroupsTestPackage.LOOPED_MODEL__VISIBILITY:         getVisibility().clear();         getVisibility().addAll((Collection)newValue);         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__STATIC:         getStatic().clear();         getStatic().addAll((Collection)newValue);         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__SYNCHRONIZED:         getSynchronized().clear();         getSynchronized().addAll((Collection)newValue);         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__ABSTRACT:         getAbstract().clear();         getAbstract().addAll((Collection)newValue);         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__FINAL:         getFinal().clear();         getFinal().addAll((Collection)newValue);         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__NAME:         setName((String)newValue);         return;     }     super.eSet(featureID, newValue);   }    /**    *     *     * @generated    */   @Override   public void eUnset(int featureID)   {     switch (featureID)     {       case UnorderedGroupsTestPackage.LOOPED_MODEL__VISIBILITY:         getVisibility().clear();         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__STATIC:         getStatic().clear();         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__SYNCHRONIZED:         getSynchronized().clear();         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__ABSTRACT:         getAbstract().clear();         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__FINAL:         getFinal().clear();         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__NAME:         setName(NAME_EDEFAULT);         return;     }     super.eUnset(featureID);   }    /**    *     *     * @generated    */   @Override   public boolean eIsSet(int featureID)   {     switch (featureID)     {       case UnorderedGroupsTestPackage.LOOPED_MODEL__VISIBILITY:         return visibility != null && !visibility.isEmpty();       case UnorderedGroupsTestPackage.LOOPED_MODEL__STATIC:         return static_ != null && !static_.isEmpty();       case UnorderedGroupsTestPackage.LOOPED_MODEL__SYNCHRONIZED:         return synchronized_ != null && !synchronized_.isEmpty();       case UnorderedGroupsTestPackage.LOOPED_MODEL__ABSTRACT:         return abstract_ != null && !abstract_.isEmpty();       case UnorderedGroupsTestPackage.LOOPED_MODEL__FINAL:         return final_ != null && !final_.isEmpty();       case UnorderedGroupsTestPackage.LOOPED_MODEL__NAME:         return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);     }     return super.eIsSet(featureID);   }    /**    *     *     * @generated    */   @Override   public String toString()   {     if (eIsProxy()) return super.toString();      StringBuffer result = new StringBuffer(super.toString());     result.append(" (visibility: ");     result.append(visibility);     result.append(", static: ");     result.append(static_);     result.append(", synchronized: ");     result.append(synchronized_);     result.append(", abstract: ");     result.append(abstract_);     result.append(", final: ");     result.append(final_);     result.append(", name: ");     result.append(name);     result.append(')');     return result.toString();   }  } //LoopedModelImpl;data class;1. blob, 2. data class, 3. long method;t;t;t;1. blob,  3. long method;;0;1730;https://github.com/eclipse/xtext-eclipse/blob/0c7546b6aaf3644a77fc68eef9f3da368cbbeabd/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/unorderedGroupsTest/impl/LoopedModelImpl.java/#L40-L375;2;137;1730
151;   {     "message": "YES I found bad smells",     "bad smells are": [       "Blob",       "Long Method"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class MultiDexConfig {      private String name;      public MultiDexConfig(String name) {         this.name = name;     }      @Config(title = "Whether to enable fast", message = "Enable atlas , true/false", order = 0, group = "atlas")     private boolean fastMultiDex = false;      @Config(title = "The extra first dex class list", message = "The custom needs to be placed in the entry class in the first dex", order = 3, group = "atlas")     private Set firstDexClasses = Sets.newHashSet();     /**      * dex The number of subcontracting, 0 No restrictions, no two merges      */     @Config(title = "dexThe number of", message = "0unlimited", order = 1, group = "atlas")     private int dexCount;      public int getMainDexListCount() {         return mainDexListCount;     }      public void setMainDexListCount(int mainDexListCount) {         this.mainDexListCount = mainDexListCount;     }      private int mainDexListCount;      @Config(title = "dexSeparated rules", message = "a,b;c,d", order = 2, group = "atlas")     private String dexSplitRules;      @Config(title = "Does not enter the list of the first dex's blacklist", message = "a", order = 2, group = "atlas")     private Set mainDexBlackList = Sets.newHashSet();      public String getName() {         return name;     }      public void setName(String name) {         this.name = name;     }      public boolean isFastMultiDex() {         return fastMultiDex;     }      public void setFastMultiDex(boolean fastMultiDex) {         this.fastMultiDex = fastMultiDex;     }      public Set getMainDexBlackList() {         return mainDexBlackList;     }      public void setMainDexBlackList(Set mainDexBlackList) {         this.mainDexBlackList = mainDexBlackList;     }      public Set getFirstDexClasses() {         return firstDexClasses;     }      public void setFirstDexClasses(Set firstDexClasses) {         this.firstDexClasses = firstDexClasses;     }      public int getDexCount() {         return dexCount;     }      public void setDexCount(int dexCount) {         this.dexCount = dexCount;     }      public String getDexSplitRules() {         return dexSplitRules;     }      public void setDexSplitRules(String dexSplitRules) {         this.dexSplitRules = dexSplitRules;     } };data class;blob, long method;t;t;f;blob,  long method;data class;0;1911;https://github.com/alibaba/atlas/blob/e8c7b3f1ff14b2a1df64321c6992b796cae7d732/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/extension/MultiDexConfig.java/#L220-L302;2;151;1911
167;{       "output": "YES I found bad smells",     "bad smells are": "1. Blob",     "code smells": [           "Blob"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public final class AtlasPerfTracer {     protected final Logger logger;     protected final String tag;     private   final long   startTimeMs;      private static long reportingThresholdMs = 0L;      public static Logger getPerfLogger(String name) {         return LoggerFactory.getLogger("org.apache.atlas.perf." + name);     }      public static Logger getPerfLogger(Class cls) {         return AtlasPerfTracer.getPerfLogger(cls.getName());     }      public static boolean isPerfTraceEnabled(Logger logger) {         return logger.isDebugEnabled();     }      public static AtlasPerfTracer getPerfTracer(Logger logger, String tag) {         return new AtlasPerfTracer(logger, tag);     }      public static void log(AtlasPerfTracer tracer) {         if (tracer != null) {             tracer.log();         }     }      private AtlasPerfTracer(Logger logger, String tag) {         this.logger = logger;         this.tag    = tag;         startTimeMs = System.currentTimeMillis();     }      public String getTag() {         return tag;     }      public long getStartTime() {         return startTimeMs;     }      public long getElapsedTime() {         return System.currentTimeMillis() - startTimeMs;     }      public void log() {         long elapsedTime = getElapsedTime();         if (elapsedTime > reportingThresholdMs) {             logger.debug("PERF|{}|{}", tag, elapsedTime);         }     } };data class;blob;t;t;f;blob;data class;0;2023;https://github.com/apache/atlas/blob/af1719a3472d1d436d0fc685fe9f88d8a754ef94/common/src/main/java/org/apache/atlas/utils/AtlasPerfTracer.java/#L27-L80;2;167;2023
170; {"message": "YES I found bad smells", "bad smells are": ["Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@APICommand(name = RevokeCertificateCmd.APINAME,         description = "Revokes certificate using configured CA plugin",         responseObject = SuccessResponse.class,         requestHasSensitiveInfo = true,         responseHasSensitiveInfo = false,         since = "4.11.0",         authorized = {RoleType.Admin}) public class RevokeCertificateCmd extends BaseAsyncCmd {      public static final String APINAME = "revokeCertificate";      @Inject     private CAManager caManager;      /////////////////////////////////////////////////////     //////////////// API parameters /////////////////////     /////////////////////////////////////////////////////      @Parameter(name = ApiConstants.SERIAL, type = BaseCmd.CommandType.STRING, required = true, description = "The certificate serial number, as a hex value")     private String serial;      @Parameter(name = ApiConstants.CN, type = BaseCmd.CommandType.STRING, description = "The certificate CN")     private String cn;      @Parameter(name = ApiConstants.PROVIDER, type = BaseCmd.CommandType.STRING, description = "Name of the CA service provider, otherwise the default configured provider plugin will be used")     private String provider;      /////////////////////////////////////////////////////     /////////////////// Accessors ///////////////////////     /////////////////////////////////////////////////////      public BigInteger getSerialBigInteger() {         if (Strings.isNullOrEmpty(serial)) {             throw new ServerApiException(ApiErrorCode.PARAM_ERROR, "Certificate serial cannot be empty");         }         return new BigInteger(serial, 16);     }      public String getCn() {         return cn;     }      public String getProvider() {         return provider;     }      /////////////////////////////////////////////////////     /////////////// API Implementation///////////////////     /////////////////////////////////////////////////////      @Override     public void execute() {         boolean result = caManager.revokeCertificate(getSerialBigInteger(), getCn(), getProvider());         SuccessResponse response = new SuccessResponse(getCommandName());         response.setSuccess(result);         setResponseObject(response);     }      @Override     public String getCommandName() {         return APINAME.toLowerCase() + BaseCmd.RESPONSE_SUFFIX;     }      @Override     public long getEntityOwnerId() {         return CallContext.current().getCallingAccount().getId();     }      @Override     public String getEventType() {         return EventTypes.EVENT_CA_CERTIFICATE_REVOKE;     }      @Override     public String getEventDescription() {         return "revoking certificate with serial id=" + serial + ", cn=" + cn;     } };data class;blob;t;t;f;blob;data class;0;2035;https://github.com/apache/cloudstack/blob/8d3feb100aab4a45b31a789f444038b892161eec/api/src/main/java/org/apache/cloudstack/api/command/admin/ca/RevokeCertificateCmd.java/#L39-L116;2;170;2035
193; {"response": "YES I found bad smells", "detected_bad_smells": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
class FloatFilterFunction extends AbstractFloatValue {   private final FloatValue baseExpr;   private final BooleanValue filterExpr;   public static final String name = FilterFunction.name;   private final String exprStr;   private final ExpressionType funcType;      public FloatFilterFunction(FloatValue baseExpr, BooleanValue filterExpr) throws SolrException {     this.baseExpr = baseExpr;     this.filterExpr = filterExpr;     this.exprStr = AnalyticsValueStream.createExpressionString(name,baseExpr,filterExpr);     this.funcType = AnalyticsValueStream.determineMappingPhase(exprStr,baseExpr,filterExpr);   }      boolean exists = false;    @Override   public float getFloat() {     float value = baseExpr.getFloat();     exists = baseExpr.exists() && filterExpr.getBoolean() && filterExpr.exists();     return value;   }   @Override   public boolean exists() {     return exists;   }      @Override   public String getName() {     return name;   }   @Override   public String getExpressionStr() {     return exprStr;   }   @Override   public ExpressionType getExpressionType() {     return funcType;   } };data class;blob, long method;t;t;f;blob,  long method;data class;0;2220;https://github.com/apache/lucene-solr/blob/bca22d58e2d126ec6d349d375d3ea028892104e1/solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/FilterFunction.java/#L462-L501;2;193;2220
205; {"message": "YES I found bad smells", "badsmells": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public final class StableValue {      private final T value;     private final Assumption assumption;      public StableValue(T value, String name) {         this.value = value;         this.assumption = Truffle.getRuntime().createAssumption(name);     }      public T getValue() {         return value;     }      public Assumption getAssumption() {         return assumption;     }      @Override     public String toString() {         return "[" + value + ", " + assumption + "]";     } };data class;blob, data class;t;t;t;blob;;0;2299;https://github.com/oracle/fastr/blob/a1ee49060317621c0c9eceea8ec60040aca59b2d/com.oracle.truffle.r.runtime/src/com/oracle/truffle/r/runtime/StableValue.java/#L28-L50;2;205;2299
211; {"answer": "YES I found bad smells", "detected_bad_smells": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class TextAndButtonSection extends Section {  	public TextAndButtonSection( String labelText, Composite parent, 			boolean isFormStyle ) 	{ 		super( labelText, parent, isFormStyle ); 	}  	protected int width = -1;  	protected boolean fillText = false;  	protected TextPropertyDescriptor textField;  	public void createSection( ) 	{ 		if ( selectList == null ) 			selectList = new ArrayList( ); 		getLabelControl( parent ); 		getTextControl( parent ); 		getButtonControl( parent ); 		getGridPlaceholder( parent ); 	}  	public void layout( ) 	{ 		GridData gd = (GridData) textField.getControl( ).getLayoutData( ); 		if ( getLayoutNum( ) > 0 ) 			gd.horizontalSpan = getLayoutNum( ) - 2 - placeholder; 		else 			gd.horizontalSpan = ( (GridLayout) parent.getLayout( ) ).numColumns 					- 2 					- placeholder; 		if ( width > -1 ) 		{ 			gd.widthHint = width; 			gd.grabExcessHorizontalSpace = false; 		} 		else 			gd.grabExcessHorizontalSpace = fillText;  		gd = (GridData) button.getLayoutData( );  		if ( buttonWidth > -1 ) 		{ 			if ( !isComputeSize ) 				gd.widthHint = Math.max( button.computeSize( -1, -1 ).x, 						buttonWidth ); 			else 				gd.widthHint = button.computeSize( -1, -1 ).x; 		} 	}  	public TextPropertyDescriptor getTextControl( ) 	{ 		return textField; 	}  	protected TextPropertyDescriptor getTextControl( Composite parent ) 	{ 		if ( textField == null ) 		{ 			textField = DescriptorToolkit.createTextPropertyDescriptor( true ); 			if ( getProvider( ) != null ) 				textField.setDescriptorProvider( getProvider( ) ); 			textField.createControl( parent ); 			textField.getControl( ).setLayoutData( new GridData( ) ); 			textField.getControl( ).addDisposeListener( new DisposeListener( ) {  				public void widgetDisposed( DisposeEvent event ) 				{ 					textField = null; 				} 			} ); 		} 		else 		{ 			checkParent( textField.getControl( ), parent ); 		} 		return textField; 	}  	protected Button button;  	public Button getButtonControl( ) 	{ 		return button; 	}  	protected Button getButtonControl( Composite parent ) 	{ 		if ( button == null ) 		{ 			button = FormWidgetFactory.getInstance( ).createButton( parent, 					SWT.PUSH, 					isFormStyle ); 			button.setFont( parent.getFont( ) );  			button.setLayoutData( new GridData( ) ); 			String text = getButtonText( ); 			if ( text != null ) 			{ 				button.setText( text ); 			}  			text = getButtonTooltipText( ); 			if ( text != null ) 			{ 				button.setToolTipText( text ); 			}  			button.addDisposeListener( new DisposeListener( ) {  				public void widgetDisposed( DisposeEvent event ) 				{ 					button = null; 				} 			} );  			if ( !selectList.isEmpty( ) ) 				button.addSelectionListener( (SelectionListener) selectList.get( 0 ) ); 			else 			{ 				SelectionListener listener = new SelectionAdapter( ) {  					public void widgetSelected( SelectionEvent e ) 					{ 						onClickButton( ); 					} 				}; 				selectList.add( listener ); 			}  		} 		else 		{ 			checkParent( button, parent ); 		} 		return button; 	}  	private String buttonText;  	IDescriptorProvider provider;  	public IDescriptorProvider getProvider( ) 	{ 		return provider; 	}  	public void setProvider( IDescriptorProvider provider ) 	{ 		this.provider = provider; 		if ( textField != null ) 			textField.setDescriptorProvider( provider ); 	}  	protected List selectList = new ArrayList( );  	/** 	 * if use this method , you couldn't use the onClickButton method. 	 */ 	public void addSelectionListener( SelectionListener listener ) 	{ 		if ( !selectList.contains( listener ) ) 		{ 			if ( !selectList.isEmpty( ) ) 				removeSelectionListener( (SelectionListener) selectList.get( 0 ) ); 			selectList.add( listener ); 			if ( button != null ) 				button.addSelectionListener( listener ); 		} 	}  	public void removeSelectionListener( SelectionListener listener ) 	{ 		if ( selectList.contains( listener ) ) 		{ 			selectList.remove( listener ); 			if ( button != null ) 				button.removeSelectionListener( listener ); 		} 	}  	protected void onClickButton( ) 	{ 	};  	public void forceFocus( ) 	{ 		textField.getControl( ).forceFocus( ); 	}  	public void setInput( Object input ) 	{ 		textField.setInput( input ); 	}  	public void load( ) 	{ 		if ( textField != null && !textField.getControl( ).isDisposed( ) ) 			textField.load( ); 		if ( button != null && !button.isDisposed( ) ) 			button.setEnabled( !isReadOnly( ) ); 	}  	protected int buttonWidth = 60;  	public void setButtonWidth( int buttonWidth ) 	{ 		this.buttonWidth = buttonWidth; 		if ( button != null ) 		{ 			GridData data = new GridData( ); 			data.widthHint = Math.max( button.computeSize( -1, -1 ).x, 					buttonWidth );; 			data.grabExcessHorizontalSpace = false; 			button.setLayoutData( data ); 		} 	}  	protected boolean isComputeSize = false;  	public int getWidth( ) 	{ 		return width; 	}  	public void setWidth( int width ) 	{ 		this.width = width; 	}  	public int getButtonWidth( ) 	{ 		return buttonWidth; 	}  	private String oldValue;  	public void setStringValue( String value ) 	{ 		if ( textField != null ) 		{ 			if ( value == null ) 			{ 				value = "";//$NON-NLS-1$ 			} 			oldValue = textField.getText( ); 			if ( !oldValue.equals( value ) ) 			{ 				textField.setText( value ); 			} 		} 	}  	public boolean isFillText( ) 	{ 		return fillText; 	}  	public void setFillText( boolean fillText ) 	{ 		this.fillText = fillText; 	}  	public void setHidden( boolean isHidden ) 	{ 		if ( displayLabel != null ) 			WidgetUtil.setExcludeGridData( displayLabel, isHidden ); 		if ( textField != null ) 			textField.setHidden( isHidden ); 		if ( button != null ) 			WidgetUtil.setExcludeGridData( button, isHidden ); 		if ( placeholderLabel != null ) 			WidgetUtil.setExcludeGridData( placeholderLabel, isHidden ); 	}  	public void setVisible( boolean isVisible ) 	{ 		if ( displayLabel != null ) 			displayLabel.setVisible( isVisible ); 		if ( textField != null ) 			textField.setVisible( isVisible ); 		if ( button != null ) 			button.setVisible( isVisible ); 		if ( placeholderLabel != null ) 			placeholderLabel.setVisible( isVisible ); 	}  	private String buttonTooltipText;  	public void setButtonTooltipText( String string ) 	{ 		this.buttonTooltipText = string; 		if ( button != null ) 			button.setText( buttonTooltipText );  	}  	public String getButtonText( ) 	{ 		return buttonText; 	}  	public void setButtonText( String buttonText ) 	{ 		this.buttonText = buttonText; 		if ( button != null ) 			button.setText( buttonText ); 	}  	public String getButtonTooltipText( ) 	{ 		return buttonTooltipText; 	}  	public boolean buttonIsComputeSize( ) 	{ 		return isComputeSize; 	}  	public void setButtonIsComputeSize( boolean isComputeSize ) 	{ 		this.isComputeSize = isComputeSize; 	}  };data class;blob, long method;t;t;f;blob,  long method;data class;0;2314;https://github.com/eclipse/birt/blob/f89264810347de98702db45386a822aabc0fadbf/UI/org.eclipse.birt.report.designer.ui.views/src/org/eclipse/birt/report/designer/internal/ui/views/attributes/section/TextAndButtonSection.java/#L23-L351;2;211;2314
241;{"response": "YES I found bad smells", "detected_bad_smells": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class GangliaServer implements MonitorService {   /*    * The Ganglia protocol specific stuff: the xdr_* methods    * and the sendToGanglia* methods have been shamelessly ripped off    * from Hadoop. All hail the yellow elephant!    */    private static final Logger logger =           LoggerFactory.getLogger(GangliaServer.class);   public static final int BUFFER_SIZE = 1500; // as per libgmond.c   protected byte[] buffer = new byte[BUFFER_SIZE];   protected int offset;   private final List addresses = new ArrayList();   private DatagramSocket socket = null;   private ScheduledExecutorService service =           Executors.newSingleThreadScheduledExecutor();   private List hosts;   protected final GangliaCollector collectorRunnable;   private int pollFrequency = 60;   public static final String DEFAULT_UNITS = "";   public static final int DEFAULT_TMAX = 60;   public static final int DEFAULT_DMAX = 0;   public static final int DEFAULT_SLOPE = 3;   public static final String GANGLIA_DOUBLE_TYPE = "double";   private volatile boolean isGanglia3 = false;   private String hostname;   public final String CONF_POLL_FREQUENCY = "pollFrequency";   public final int DEFAULT_POLL_FREQUENCY = 60;   public final String CONF_HOSTS = "hosts";   public final String CONF_ISGANGLIA3 = "isGanglia3";   private static final String GANGLIA_CONTEXT = "flume.";    public GangliaServer() throws FlumeException {     collectorRunnable = new GangliaCollector();   }    /**    * Puts a string into the buffer by first writing the size of the string as an    * int, followed by the bytes of the string, padded if necessary to a multiple    * of 4.    *    * @param s the string to be written to buffer at offset location    */   protected void xdr_string(String s) {     byte[] bytes = s.getBytes();     int len = bytes.length;     xdr_int(len);     System.arraycopy(bytes, 0, buffer, offset, len);     offset += len;     pad();   }    /**    * Pads the buffer with zero bytes up to the nearest multiple of 4.    */   private void pad() {     int newOffset = ((offset + 3) / 4) * 4;     while (offset < newOffset) {       buffer[offset++] = 0;     }   }    /**    * Puts an integer into the buffer as 4 bytes, big-endian.    */   protected void xdr_int(int i) {     buffer[offset++] = (byte) ((i >> 24) & 0xff);     buffer[offset++] = (byte) ((i >> 16) & 0xff);     buffer[offset++] = (byte) ((i >> 8) & 0xff);     buffer[offset++] = (byte) (i & 0xff);   }    public synchronized void sendToGangliaNodes() {     DatagramPacket packet;     for (SocketAddress addr : addresses) {       try {         packet = new DatagramPacket(buffer, offset, addr);         socket.send(packet);       } catch (Exception ex) {         logger.warn("Could not send metrics to metrics server: "                 + addr.toString(), ex);       }     }     offset = 0;   }    /**    * Start this server, causing it to poll JMX at the configured frequency.    */   @Override   public void start() {     try {       socket = new DatagramSocket();       hostname = InetAddress.getLocalHost().getHostName();     } catch (SocketException ex) {       logger.error("Could not create socket for metrics collection.");       throw new FlumeException(               "Could not create socket for metrics collection.", ex);     } catch (Exception ex2) {       logger.warn("Unknown error occured", ex2);     }     for (HostInfo host : hosts) {       addresses.add(new InetSocketAddress(               host.getHostName(), host.getPortNumber()));     }     collectorRunnable.server = this;     if (service.isShutdown() || service.isTerminated()) {       service = Executors.newSingleThreadScheduledExecutor();     }     service.scheduleWithFixedDelay(collectorRunnable, 0,             pollFrequency, TimeUnit.SECONDS);   }    /**    * Stop this server.    */   @Override   public void stop() {     service.shutdown();      while (!service.isTerminated()) {       try {         logger.warn("Waiting for ganglia service to stop");         service.awaitTermination(500, TimeUnit.MILLISECONDS);       } catch (InterruptedException ex) {         logger.warn("Interrupted while waiting"                 + " for ganglia monitor to shutdown", ex);         service.shutdownNow();       }     }     addresses.clear();   }    /**    *    * @param pollFrequency Seconds between consecutive JMX polls.    */   public void setPollFrequency(int pollFrequency) {     this.pollFrequency = pollFrequency;   }    /**    *    * @return Seconds between consecutive JMX polls    */   public int getPollFrequency() {     return pollFrequency;   }    /**    *    * @param isGanglia3 When true, ganglia 3 messages will be sent, else Ganglia    * 3.1 formatted messages are sent.    */   public void setIsGanglia3(boolean isGanglia3) {     this.isGanglia3 = isGanglia3;   }    /**    *    * @return True if the server is currently sending ganglia 3 formatted msgs.    * False if the server returns Ganglia 3.1    */   public boolean isGanglia3() {     return this.isGanglia3;   }    protected void createGangliaMessage(String name, String value) {     logger.debug("Sending ganglia3 formatted message."             + name + ": " + value);     name = hostname + "." + name;     xdr_int(0);     String type = "string";     try {       Float.parseFloat(value);       type = "float";     } catch (NumberFormatException ex) {       // The param is a string, and so leave the type as is.     }     xdr_string(type); // metric type     xdr_string(name);     xdr_string(value);     xdr_string(DEFAULT_UNITS);     xdr_int(DEFAULT_SLOPE);     xdr_int(DEFAULT_TMAX);     xdr_int(DEFAULT_DMAX);   }    protected void createGangliaMessage31(String name, String value) {     logger.debug("Sending ganglia 3.1 formatted message: "             + name + ": " + value);     xdr_int(128); // metric_id = metadata_msg     xdr_string(hostname); // hostname     xdr_string(name); // metric name     xdr_int(0); // spoof = False     String type = "string";     try {       Float.parseFloat(value);       type = "float";     } catch (NumberFormatException ex) {       // The param is a string, and so leave the type as is.     }     xdr_string(type); // metric type     xdr_string(name); // metric name     xdr_string(DEFAULT_UNITS); // units     xdr_int(DEFAULT_SLOPE); // slope     xdr_int(DEFAULT_TMAX); // tmax, the maximum time between metrics     xdr_int(DEFAULT_DMAX); // dmax, the maximum data value     xdr_int(1); /*Num of the entries in extra_value field for Ganglia 3.1.x*/     xdr_string("GROUP"); /*Group attribute*/     xdr_string("flume"); /*Group value*/      this.sendToGangliaNodes();      // Now we send out a message with the actual value.     // Technically, we only need to send out the metadata message once for     // each metric, but I don't want to have to record which metrics we did and     // did not send.     xdr_int(133); // we are sending a string value     xdr_string(hostname); // hostName     xdr_string(name); // metric name     xdr_int(0); // spoof = False     xdr_string("%s"); // format field     xdr_string(value); // metric value   }    @Override   public void configure(Context context) {     this.pollFrequency = context.getInteger(this.CONF_POLL_FREQUENCY, 60);     String localHosts = context.getString(this.CONF_HOSTS);     if (localHosts == null || localHosts.isEmpty()) {       throw new ConfigurationException("Hosts list cannot be empty.");     }     this.hosts = this.getHostsFromString(localHosts);     this.isGanglia3 = context.getBoolean(this.CONF_ISGANGLIA3, false);   }    private List getHostsFromString(String hosts)           throws FlumeException {     List hostInfoList = new ArrayList();     String[] hostsAndPorts = hosts.split(",");     int i = 0;     for (String host : hostsAndPorts) {       String[] hostAndPort = host.split(":");       if (hostAndPort.length < 2) {         logger.warn("Invalid ganglia host: ", host);         continue;       }       try {         hostInfoList.add(new HostInfo("ganglia_host-" + String.valueOf(i),                 hostAndPort[0], Integer.parseInt(hostAndPort[1])));       } catch (Exception e) {         logger.warn("Invalid ganglia host: " + host, e);         continue;       }     }     if (hostInfoList.isEmpty()) {       throw new FlumeException("No valid ganglia hosts defined!");     }     return hostInfoList;   }    /**    * Worker which polls JMX for all mbeans with    * {@link javax.management.ObjectName} within the flume namespace:    * org.apache.flume. All attributes of such beans are sent to the all hosts    * specified by the server that owns it's instance.    *    */   protected class GangliaCollector implements Runnable {      private GangliaServer server;      @Override     public void run() {       try {         Map> metricsMap =                 JMXPollUtil.getAllMBeans();         for (String component : metricsMap.keySet()) {           Map attributeMap = metricsMap.get(component);           for (String attribute : attributeMap.keySet()) {             if (isGanglia3) {               server.createGangliaMessage(GANGLIA_CONTEXT + component + "."                       + attribute,                       attributeMap.get(attribute));             } else {               server.createGangliaMessage31(GANGLIA_CONTEXT + component + "."                       + attribute,                       attributeMap.get(attribute));             }             server.sendToGangliaNodes();           }         }       } catch (Throwable t) {         logger.error("Unexpected error", t);       }     }   } };data class;blob, long method;t;t;f;blob,  long method;data class;0;2643;https://github.com/apache/flume/blob/7d3396f26dc1541e9d2a540d50d15a15c38acb74/flume-ng-core/src/main/java/org/apache/flume/instrumentation/GangliaServer.java/#L56-L354;2;241;2643
243;{"response": "YES I found bad smells", "bad smells are": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  public static class ScanOptions extends CommonOpts {      @Parameter(names = "-s", description = "Start row (inclusive) of scan")     private String startRow;      @Parameter(names = "-e", description = "End row (inclusive) of scan")     private String endRow;      @Parameter(names = "-c", description = "Columns of scan in comma separated format: "         + "<[:]{,[:]}> ")     private List columns;      @Parameter(names = "-r", description = "Exact row to scan")     private String exactRow;      @Parameter(names = "-p", description = "Row prefix to scan")     private String rowPrefix;      @Parameter(names = {"-esc", "--escape-non-ascii"}, help = true,         description = "Hex encode non ascii bytes", arity = 1)     public boolean hexEncNonAscii = true;      @Parameter(names = "--raw", help = true,         description = "Show underlying key/values stored in Accumulo. Interprets the data using Fluo "             + "internal schema, making it easier to comprehend.")     public boolean scanAccumuloTable = false;      @Parameter(names = "--json", help = true,         description = "Export key/values stored in Accumulo as JSON file.")     public boolean exportAsJson = false;      @Parameter(names = "--ntfy", help = true, description = "Scan active notifications")     public boolean scanNtfy = false;      public String getStartRow() {       return startRow;     }      public String getEndRow() {       return endRow;     }      public String getExactRow() {       return exactRow;     }      public String getRowPrefix() {       return rowPrefix;     }      public List getColumns() {       if (columns == null) {         return Collections.emptyList();       }       return columns;     }      /**      * Check if the parameters informed can be used together.      */     private void checkScanOptions() {       if (this.scanAccumuloTable && this.exportAsJson) {         throw new IllegalArgumentException(             "Both \"--raw\" and \"--json\" can not be set together.");       }        if (this.scanAccumuloTable && this.scanNtfy) {         throw new IllegalArgumentException(             "Both \"--raw\" and \"--ntfy\" can not be set together.");       }     }      public ScanUtil.ScanOpts getScanOpts() {       EnumSet flags = EnumSet.noneOf(ScanFlags.class);        ScanUtil.setFlag(flags, help, ScanFlags.HELP);       ScanUtil.setFlag(flags, hexEncNonAscii, ScanFlags.HEX);       ScanUtil.setFlag(flags, scanAccumuloTable, ScanFlags.ACCUMULO);       ScanUtil.setFlag(flags, exportAsJson, ScanFlags.JSON);       ScanUtil.setFlag(flags, scanNtfy, ScanFlags.NTFY);        return new ScanUtil.ScanOpts(startRow, endRow, columns, exactRow, rowPrefix, flags);     }      public static ScanOptions parse(String[] args) {       ScanOptions opts = new ScanOptions();       parse("fluo scan", opts, args);       return opts;     }   };data class;blob, long method;t;t;f;blob,  long method;data class;0;2648;https://github.com/apache/fluo/blob/8e06204d4167651e2d3b5219b8c1397644e6ba6e/modules/command/src/main/java/org/apache/fluo/command/FluoScan.java/#L33-L122;2;243;2648
284; {"message": "YES I found bad smells", "bad_smells": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@ManagedAttributeValueType public interface AclRule extends ManagedAttributeValue {     String getIdentity();     ObjectType getObjectType();     LegacyOperation getOperation();     Map getAttributes();     RuleOutcome getOutcome(); };data class;blob, data class;t;t;t;blob;;0;3039;https://github.com/apache/qpid-broker-j/blob/4c4400b98a5a8493cfb9e5dbb21c97175f433a62/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/plugins/AclRule.java/#L31-L39;2;284;3039
304; {"message": "YES I found bad smells", "bad smells are": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@XmlRootElement public class Book {      private int id;     private String name;      public Book() {}      public Book(int bookId, String name) {         this.id = bookId;         this.name = name;     }      public int getId() {         return id;     }      public void setId(int id) {         this.id = id;     }      public String getName() {         return name;     }      public void setName(String name) {         this.name = name;     } };data class;blob, data class;t;t;t;blob;;0;3183;https://github.com/apache/tomee/blob/d21933b313aff812fe5188b57bf572a9ad649148/examples/mp-rest-client/src/main/java/org/superbiz/rest/Book.java/#L22-L50;2;304;3183
305; {"message": "YES I found bad smells", "bad smells are:": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
	public class TypeRefWithoutModifiersElements extends AbstractParserRuleElementFinder { 		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.n4js.ts.TypeExpressions.TypeRefWithoutModifiers"); 		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1); 		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0); 		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0); 		private final RuleCall cParameterizedTypeRefParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0); 		private final RuleCall cThisTypeRefParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1); 		private final Assignment cDynamicAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1); 		private final Keyword cDynamicPlusSignKeyword_0_1_0 = (Keyword)cDynamicAssignment_0_1.eContents().get(0); 		private final RuleCall cTypeTypeRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1); 		private final RuleCall cFunctionTypeExpressionOLDParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2); 		private final RuleCall cUnionTypeExpressionOLDParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3); 		private final RuleCall cIntersectionTypeExpressionOLDParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4); 		 		//TypeRefWithoutModifiers StaticBaseTypeRef: 		//	(ParameterizedTypeRef | ThisTypeRef) => dynamic?='+'? | TypeTypeRef 		//	| FunctionTypeExpressionOLD 		//	| UnionTypeExpressionOLD 		//	| IntersectionTypeExpressionOLD; 		@Override public ParserRule getRule() { return rule; } 		 		//(ParameterizedTypeRef | ThisTypeRef) => dynamic?='+'? | TypeTypeRef | FunctionTypeExpressionOLD | UnionTypeExpressionOLD 		//| IntersectionTypeExpressionOLD 		public Alternatives getAlternatives() { return cAlternatives; } 		 		//(ParameterizedTypeRef | ThisTypeRef) => dynamic?='+'? 		public Group getGroup_0() { return cGroup_0; } 		 		//ParameterizedTypeRef | ThisTypeRef 		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; } 		 		//ParameterizedTypeRef 		public RuleCall getParameterizedTypeRefParserRuleCall_0_0_0() { return cParameterizedTypeRefParserRuleCall_0_0_0; } 		 		//ThisTypeRef 		public RuleCall getThisTypeRefParserRuleCall_0_0_1() { return cThisTypeRefParserRuleCall_0_0_1; } 		 		//=> dynamic?='+'? 		public Assignment getDynamicAssignment_0_1() { return cDynamicAssignment_0_1; } 		 		//'+' 		public Keyword getDynamicPlusSignKeyword_0_1_0() { return cDynamicPlusSignKeyword_0_1_0; } 		 		//TypeTypeRef 		public RuleCall getTypeTypeRefParserRuleCall_1() { return cTypeTypeRefParserRuleCall_1; } 		 		//FunctionTypeExpressionOLD 		public RuleCall getFunctionTypeExpressionOLDParserRuleCall_2() { return cFunctionTypeExpressionOLDParserRuleCall_2; } 		 		//UnionTypeExpressionOLD 		public RuleCall getUnionTypeExpressionOLDParserRuleCall_3() { return cUnionTypeExpressionOLDParserRuleCall_3; } 		 		//IntersectionTypeExpressionOLD 		public RuleCall getIntersectionTypeExpressionOLDParserRuleCall_4() { return cIntersectionTypeExpressionOLDParserRuleCall_4; } 	};data class;blob, long method;t;t;f;blob,  long method;data class;0;3185;https://github.com/eclipse/n4js/blob/f715912fce0352ab574ff878086f77d17a78c908/plugins/org.eclipse.n4js.ts/src-gen/org/eclipse/n4js/ts/services/TypeExpressionsGrammarAccess.java/#L201-L255;2;305;3185
309;{"message": "YES, I found bad smells", "bad_smells": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  public static void m() {     C c = new C();     E1 e1 = new E1();     E2 e2 = new E2();     c.foo(e1,e2.getClass());   };long method;blob, long method;t;t;t;blob;;0;3204;https://github.com/eclipse/org.aspectj/blob/370f291c359cd159c5f3f0abd6e9e53e81234a07/tests/bugs1611/pr336880/Second.java/#L4-L9;2;309;3204
311;   {     "response": "YES I found bad smells",     "detected_bad_smells": [       "Blob"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  public List getTraceback() {     return traceback;   };feature envy;blob;t;t;f;blob;feature envy;0;3207;https://github.com/apache/zeppelin/blob/4219d552349f8f7f3e6de34505b8a8ae9835f98b/zeppelin-jupyter/src/main/java/org/apache/zeppelin/jupyter/nbformat/Error.java/#L48-L50;2;311;3207
328;{"response": "YES I found bad smells", "detected_bad_smells": ["1. Blob", "2. Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class Config {      public String mysqlAddr;     public Integer mysqlPort;     public String mysqlUsername;     public String mysqlPassword;      public String mqNamesrvAddr;     public String mqTopic;      public String startType = "DEFAULT";     public String binlogFilename;     public Long nextPosition;     public Integer maxTransactionRows = 100;      public void load() throws IOException {          InputStream in = Config.class.getClassLoader().getResourceAsStream("rocketmq_mysql.conf");         Properties properties = new Properties();         properties.load(in);          properties2Object(properties, this);      }      private void properties2Object(final Properties p, final Object object) {         Method[] methods = object.getClass().getMethods();         for (Method method : methods) {             String mn = method.getName();             if (mn.startsWith("set")) {                 try {                     String tmp = mn.substring(4);                     String first = mn.substring(3, 4);                      String key = first.toLowerCase() + tmp;                     String property = p.getProperty(key);                     if (property != null) {                         Class[] pt = method.getParameterTypes();                         if (pt != null && pt.length > 0) {                             String cn = pt[0].getSimpleName();                             Object arg;                             if (cn.equals("int") || cn.equals("Integer")) {                                 arg = Integer.parseInt(property);                             } else if (cn.equals("long") || cn.equals("Long")) {                                 arg = Long.parseLong(property);                             } else if (cn.equals("double") || cn.equals("Double")) {                                 arg = Double.parseDouble(property);                             } else if (cn.equals("boolean") || cn.equals("Boolean")) {                                 arg = Boolean.parseBoolean(property);                             } else if (cn.equals("float") || cn.equals("Float")) {                                 arg = Float.parseFloat(property);                             } else if (cn.equals("String")) {                                 arg = property;                             } else {                                 continue;                             }                             method.invoke(object, arg);                         }                     }                 } catch (Throwable ignored) {                 }             }         }     }      public void setMysqlAddr(String mysqlAddr) {         this.mysqlAddr = mysqlAddr;     }      public void setMysqlPort(Integer mysqlPort) {         this.mysqlPort = mysqlPort;     }      public void setMysqlUsername(String mysqlUsername) {         this.mysqlUsername = mysqlUsername;     }      public void setMysqlPassword(String mysqlPassword) {         this.mysqlPassword = mysqlPassword;     }      public void setBinlogFilename(String binlogFilename) {         this.binlogFilename = binlogFilename;     }      public void setNextPosition(Long nextPosition) {         this.nextPosition = nextPosition;     }      public void setMaxTransactionRows(Integer maxTransactionRows) {         this.maxTransactionRows = maxTransactionRows;     }      public void setMqNamesrvAddr(String mqNamesrvAddr) {         this.mqNamesrvAddr = mqNamesrvAddr;     }      public void setMqTopic(String mqTopic) {         this.mqTopic = mqTopic;     }      public void setStartType(String startType) {         this.startType = startType;     } };data class;1. blob, 2. data class;t;t;f;1. blob;data class;0;3385;https://github.com/apache/rocketmq-externals/blob/dba6eb0c997d5c325f26b3d1da9d739d927228dc/rocketmq-mysql/src/main/java/org/apache/rocketmq/mysql/Config.java/#L26-L130;2;328;3385
338; {"message": "YES I found bad smells", "bad smells are": ["Blob", "Data Class", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class BasicBundleInfo {      private String pkgName;      /**      * The main dex depends on + the md5 that is currently dependent      */     private String unique_tag;      private String applicationName;      private String version;       public Boolean getIsMBundle() {         return isMBundle;     }      public void setIsMBundle(boolean mainBundle) {         isMBundle = mainBundle;     }      private Boolean isMBundle = false;      private List dependency = Lists.newArrayList();      private List activities = Lists.newArrayList();      private List services = Lists.newArrayList();      private List receivers = Lists.newArrayList();      private List contentProviders = Lists.newArrayList();      private HashMap remoteFragments= new HashMap();      private HashMap remoteViews = new HashMap();      private HashMap remoteTransactors = new HashMap();      private Boolean isInternal = true;      public HashMap getRemoteViews() {         return remoteViews;     }      public void setRemoteViews(HashMap remoteViews) {         this.remoteViews = remoteViews;     }      public HashMap getRemoteTransactors() {         return remoteTransactors;     }      public void setRemoteTransactors(HashMap remoteTransactors) {         this.remoteTransactors = remoteTransactors;     }      public HashMap getRemoteFragments() {         return remoteFragments;     }      public void setRemoteFragments(HashMap remoteFragments) {         this.remoteFragments = remoteFragments;     }      public String getPkgName() {         return pkgName;     }      public void setPkgName(String pkgName) {         this.pkgName = pkgName;     }      public String getApplicationName() {         return applicationName;     }      public void setApplicationName(String applicationName) {         this.applicationName = applicationName;     }      public String getVersion() {         return version;     }      public void setVersion(String version) {         this.version = version;     }      public List getDependency() {         return dependency;     }      public void setDependency(List dependency) {         this.dependency = dependency;     }      public List getActivities() {         return activities;     }      public void setActivities(List activities) {         this.activities = activities;     }      public List getServices() {         return services;     }      public void setServices(List services) {         this.services = services;     }      public List getReceivers() {         return receivers;     }      public void setReceivers(List receivers) {         this.receivers = receivers;     }      public List getContentProviders() {         return contentProviders;     }      public void setContentProviders(List contentProviders) {         this.contentProviders = contentProviders;     }      public boolean getIsInternal() {         return isInternal;     }      public void setIsInternal(boolean internal) {         isInternal = internal;     }      public String getUnique_tag() {         return unique_tag;     }      public void setUnique_tag(String unique_tag) {         this.unique_tag = unique_tag;     } };data class;blob, data class, long method;t;t;f;blob,  long method;data class;0;3483;https://github.com/alibaba/atlas/blob/e8c7b3f1ff14b2a1df64321c6992b796cae7d732/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/bundleinfo/model/BasicBundleInfo.java/#L220-L365;2;338;3483
343;{      "output": "YES I found bad smells the bad smells are: 1. Blob"  };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    public static class NamespaceFilter extends XMLFilterImpl {         private static final InputSource EMPTY_INPUT_SOURCE = new InputSource(new ByteArrayInputStream(new byte[0]));          public NamespaceFilter(XMLReader xmlReader) {             super(xmlReader);         }          public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {             return EMPTY_INPUT_SOURCE;         }     };data class;1. blob  ;t;t;f;1. blob  ;data class;0;3503;https://github.com/apache/openejb/blob/f10c077ade927d73bdbd9ed4cc28b79f58a1cd66/openejb/container/openejb-jee/src/main/java/org/apache/openejb/jee/sun/JaxbSun.java/#L96-L106;2;343;3503
347; {"message": "YES, I found bad smells",  "bad smells are": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
   private static byte[] encodeBase64(byte[] binaryData, boolean isChunked)    {       int lengthDataBits = binaryData.length * EIGHTBIT;       int fewerThan24bits = lengthDataBits % TWENTYFOURBITGROUP;       int numberTriplets = lengthDataBits / TWENTYFOURBITGROUP;       byte encodedData[] = null;       int encodedDataLength = 0;       int nbrChunks = 0;        if (fewerThan24bits != 0)       {          //data not divisible by 24 bit          encodedDataLength = (numberTriplets + 1) * 4;       }       else       {          // 16 or 8 bit          encodedDataLength = numberTriplets * 4;       }        // If the output is to be "chunked" into 76 character sections,       // for compliance with RFC 2045 MIME, then it is important to       // allow for extra length to account for the separator(s)       if (isChunked)       {           nbrChunks =                  (CHUNK_SEPARATOR.length == 0                  ? 0                  : (int)Math.ceil((float)encodedDataLength / CHUNK_SIZE));          encodedDataLength += nbrChunks * CHUNK_SEPARATOR.length;       }        encodedData = new byte[encodedDataLength];        byte k = 0, l = 0, b1 = 0, b2 = 0, b3 = 0;        int encodedIndex = 0;       int dataIndex = 0;       int i = 0;       int nextSeparatorIndex = CHUNK_SIZE;       int chunksSoFar = 0;        //log.debug("number of triplets = " + numberTriplets);       for (i = 0; i < numberTriplets; i++)       {          dataIndex = i * 3;          b1 = binaryData[dataIndex];          b2 = binaryData[dataIndex + 1];          b3 = binaryData[dataIndex + 2];           //log.debug("b1= " + b1 +", b2= " + b2 + ", b3= " + b3);           l = (byte)(b2 & 0x0f);          k = (byte)(b1 & 0x03);           byte val1 =                  ((b1 & SIGN) == 0)                  ? (byte)(b1 >> 2)                  : (byte)((b1) >> 2 ^ 0xc0);          byte val2 =                  ((b2 & SIGN) == 0)                  ? (byte)(b2 >> 4)                  : (byte)((b2) >> 4 ^ 0xf0);          byte val3 =                  ((b3 & SIGN) == 0)                  ? (byte)(b3 >> 6)                  : (byte)((b3) >> 6 ^ 0xfc);           encodedData[encodedIndex] = lookUpBase64Alphabet[val1];          //log.debug( "val2 = " + val2 );          //log.debug( "k4   = " + (k<<4) );          //log.debug(  "vak  = " + (val2 | (k<<4)) );          encodedData[encodedIndex + 1] =                  lookUpBase64Alphabet[val2 | (k << 4)];          encodedData[encodedIndex + 2] =                  lookUpBase64Alphabet[(l << 2) | val3];          encodedData[encodedIndex + 3] = lookUpBase64Alphabet[b3 & 0x3f];           encodedIndex += 4;           // If we are chunking, let's put a chunk separator down.          if (isChunked)          {             // this assumes that CHUNK_SIZE % 4 == 0             if (encodedIndex == nextSeparatorIndex)             {                System.arraycopy(                        CHUNK_SEPARATOR,                        0,                        encodedData,                        encodedIndex,                        CHUNK_SEPARATOR.length);                chunksSoFar++;                nextSeparatorIndex =                        (CHUNK_SIZE * (chunksSoFar + 1))                        + (chunksSoFar * CHUNK_SEPARATOR.length);                encodedIndex += CHUNK_SEPARATOR.length;             }          }       }        // form integral number of 6-bit groups       dataIndex = i * 3;        if (fewerThan24bits == EIGHTBIT)       {          b1 = binaryData[dataIndex];          k = (byte)(b1 & 0x03);          //log.debug("b1=" + b1);          //log.debug("b1<<2 = " + (b1>>2) );          byte val1 =                  ((b1 & SIGN) == 0)                  ? (byte)(b1 >> 2)                  : (byte)((b1) >> 2 ^ 0xc0);          encodedData[encodedIndex] = lookUpBase64Alphabet[val1];          encodedData[encodedIndex + 1] = lookUpBase64Alphabet[k << 4];          encodedData[encodedIndex + 2] = PAD;          encodedData[encodedIndex + 3] = PAD;       }       else if (fewerThan24bits == SIXTEENBIT)       {           b1 = binaryData[dataIndex];          b2 = binaryData[dataIndex + 1];          l = (byte)(b2 & 0x0f);          k = (byte)(b1 & 0x03);           byte val1 =                  ((b1 & SIGN) == 0)                  ? (byte)(b1 >> 2)                  : (byte)((b1) >> 2 ^ 0xc0);          byte val2 =                  ((b2 & SIGN) == 0)                  ? (byte)(b2 >> 4)                  : (byte)((b2) >> 4 ^ 0xf0);           encodedData[encodedIndex] = lookUpBase64Alphabet[val1];          encodedData[encodedIndex + 1] =                  lookUpBase64Alphabet[val2 | (k << 4)];          encodedData[encodedIndex + 2] = lookUpBase64Alphabet[l << 2];          encodedData[encodedIndex + 3] = PAD;       }        if (isChunked)       {          // we also add a separator to the end of the final chunk.          if (chunksSoFar < nbrChunks)          {             System.arraycopy(                     CHUNK_SEPARATOR,                     0,                     encodedData,                     encodedDataLength - CHUNK_SEPARATOR.length,                     CHUNK_SEPARATOR.length);          }       }        return encodedData;    };long method;blob, long method;t;t;f;blob;long method;0;3549;https://github.com/apache/felix/blob/a132994b250751d4ba3b115ee070ba397d9840ca/mosgi/jmx.agent/src/main/java/org/apache/felix/mosgi/jmx/agent/mx4j/util/Base64Codec.java/#L218-L377;2;347;3549
350; 	{ 		"message": "YES I found bad smells",     "the bad smells are": [ 			"Blob",  			"Data Class" 		] 	};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public interface ClusterServiceArtifactResponse {    @ApiModelProperty(name = ArtifactResourceProvider.RESPONSE_KEY)   @SuppressWarnings("unused")   ClusterServiceArtifactResponseInfo getClusterServiceArtifactResponseInfo();    @ApiModelProperty(name = ArtifactResourceProvider.ARTIFACT_DATA_PROPERTY)   Map getArtifactData();    interface ClusterServiceArtifactResponseInfo {     @ApiModelProperty(name = ArtifactResourceProvider.ARTIFACT_NAME)     String getArtifactName();      @ApiModelProperty(name = ArtifactResourceProvider.CLUSTER_NAME)     String getClusterName();      @ApiModelProperty(name = ArtifactResourceProvider.SERVICE_NAME)     String getServiceName();   }  };data class;blob, data class;t;t;t;blob;;0;3597;https://github.com/apache/ambari/blob/2bc4779a1e6aabe638101fc8b0e28cd1963d6b13/ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterServiceArtifactResponse.java/#L32-L52;2;350;3597
356;{   "response": "YES, I found bad smells",   "detected_bad_smells": [     "Blob",     "Data Class"   ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@Value public class Release {  	private final String id; 	private final ProjectKey projectKey; 	private final String name; 	private final String description; 	private final LocalDate date; };data class;blob, data class;t;t;t;blob;;0;3676;https://github.com/spring-projects/spring-data-dev-tools/blob/a25ff3ae28026f132871f7172c6ba5c3b64e1671/release-tools/src/main/java/org/springframework/data/release/model/Release.java/#L25-L33;2;356;3676
367; {"message": "YES I found bad smells", "bad_smells": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    public static class RequireCapability     {         private final String namespace;          private final String filter;          private final String effective;          public RequireCapability ( final String namespace, final String filter, final String effective )         {             this.namespace = namespace;             this.filter = filter;             this.effective = effective;         }          public String getNamespace ()         {             return this.namespace;         }          public String getFilter ()         {             return this.filter;         }          public String getEffective ()         {             return this.effective;         }     };data class;blob, data class;t;t;t;blob;;0;3757;https://github.com/eclipse/packagedrone/blob/3869c1643cdc6f7cb8b26097a7b6994683b13d7e/bundles/org.eclipse.packagedrone.repo.utils.osgi/src/org/eclipse/packagedrone/repo/utils/osgi/bundle/BundleInformation.java/#L377-L406;2;367;3757
377; {"message": "YES I found bad smells",  "bad_smells": ["Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
final class JsonObjects {      private static final Jsonb JSON = JsonbBuilder.create();      private JsonObjects() {     }      static List getColumns(JsonObject jsonObject) {         Map map = JSON.fromJson(jsonObject.toString(), Map.class);         return Columns.of(map);     }  };data class;blob;t;t;f;blob;data class;0;3896;https://github.com/eclipse/jnosql/blob/9f03fa6ffe2dd4b538f7dbce424649aa4e484657/communication/diana-column/src/main/java/org/jnosql/diana/api/column/query/JsonObjects.java/#L28-L40;2;377;3896
411;   {      "response": "YES I found bad smells",     "bad_smells": [       "Blob"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
	public ParserRule getCollectionTypeIdentifierRule() { 		return getCollectionTypeIdentifierAccess().getRule(); 	};feature envy;blob;t;t;f;blob;feature envy;0;4212;https://github.com/eclipse/xtext-eclipse/blob/0c7546b6aaf3644a77fc68eef9f3da368cbbeabd/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/BacktrackingContentAssistTestLanguageGrammarAccess.java/#L3702-L3704;2;411;4212
432; { "answer": "YES I found bad smells", "bad smells are": ["1. Blob"] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@SuppressWarnings("serial") public class InvalidStateTransitionException extends Exception {    private Enum currentState;   private Enum event;    public InvalidStateTransitionException(Enum currentState, Enum event) {     super("Invalid event: " + event + " at " + currentState);     this.currentState = currentState;     this.event = event;   }    public Enum getCurrentState() {     return currentState;   }    public Enum getEvent() {     return event;   }  };data class;1. blob;t;t;f;1. blob;data class;0;4281;https://github.com/apache/incubator-ambari/blob/bf747346312170834c6beb89a60c8624b47aa288/ambari-server/src/main/java/org/apache/ambari/server/state/fsm/InvalidStateTransitionException.java/#L25-L45;2;432;4281
446; {"message": "YES I found bad smells", "detected_bad_smells": ["Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public final class Attributes implements AttributeList {     private int _element;     private DOM _document;      public Attributes(DOM document, int element) { 	_element = element; 	_document = document;     }      public int getLength() { 	return 0;     }      public String getName(int i) { 	return null;     }      public String getType(int i) { 	return null;     }      public String getType(String name) { 	return null;     }      public String getValue(int i) { 	return null;     }      public String getValue(String name) { 	return null;     } };data class;blob;t;t;f;blob;data class;0;4357;https://github.com/apache/xalan-j/blob/cba6d7fe7e93defecb98d155e2a780f8a3f1fbaa/src/org/apache/xalan/xsltc/runtime/Attributes.java/#L31-L63;2;446;4357
457;{"response": "YES, I found bad smells", "bad smells are": ["Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class SSLConfigClient extends SSLConfig {    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(SSLConfigClient.class);    private final Properties properties;   private final boolean userSslEnabled;   private final String trustStoreType;   private final String trustStorePath;   private final String trustStorePassword;   private final boolean disableHostVerification;   private final boolean disableCertificateVerification;   private final boolean useSystemTrustStore;   private final String protocol;   private final int handshakeTimeout;   private final String provider;    private final String emptyString = new String();    public SSLConfigClient(Properties properties) throws DrillException {     this.properties = properties;     userSslEnabled = getBooleanProperty(DrillProperties.ENABLE_TLS);     trustStoreType = getStringProperty(DrillProperties.TRUSTSTORE_TYPE, "JKS");     trustStorePath = getStringProperty(DrillProperties.TRUSTSTORE_PATH, "");     trustStorePassword = getStringProperty(DrillProperties.TRUSTSTORE_PASSWORD, "");     disableHostVerification = getBooleanProperty(DrillProperties.DISABLE_HOST_VERIFICATION);     disableCertificateVerification = getBooleanProperty(DrillProperties.DISABLE_CERT_VERIFICATION);     useSystemTrustStore = getBooleanProperty(DrillProperties.USE_SYSTEM_TRUSTSTORE);     protocol = getStringProperty(DrillProperties.TLS_PROTOCOL, DEFAULT_SSL_PROTOCOL);     int hsTimeout = getIntProperty(DrillProperties.TLS_HANDSHAKE_TIMEOUT, DEFAULT_SSL_HANDSHAKE_TIMEOUT_MS);     if (hsTimeout <= 0) {       hsTimeout = DEFAULT_SSL_HANDSHAKE_TIMEOUT_MS;     }     handshakeTimeout = hsTimeout;     // If provider is OPENSSL then to debug or run this code in an IDE, you will need to enable     // the dependency on netty-tcnative with the correct classifier for the platform you use.     // This can be done by enabling the openssl profile.     // If the IDE is Eclipse, it requires you to install an additional Eclipse plugin available here:     // http://repo1.maven.org/maven2/kr/motd/maven/os-maven-plugin/1.6.1/os-maven-plugin-1.6.1.jar     // or from your local maven repository:     // ~/.m2/repository/kr/motd/maven/os-maven-plugin/1.6.1/os-maven-plugin-1.6.1.jar     // Note that installing this plugin may require you to start with a new workspace     provider = getStringProperty(DrillProperties.TLS_PROVIDER, DEFAULT_SSL_PROVIDER);   }    private boolean getBooleanProperty(String propName) {     return (properties != null) && (properties.containsKey(propName))         && (properties.getProperty(propName).compareToIgnoreCase("true") == 0);   }    private String getStringProperty(String name, String defaultValue) {     String value = "";     if ( (properties != null) && (properties.containsKey(name))) {       value = properties.getProperty(name);     }     if (value.isEmpty()) {       value = defaultValue;     }     value = value.trim();     return value;   }    private int getIntProperty(String name, int defaultValue) {     int value = defaultValue;     if (properties != null) {       String property = properties.getProperty(name);       if (property != null && property.length() > 0) {         value = Integer.decode(property);       }     }     return value;   }    public void validateKeyStore() throws DrillException {    }    @Override   public SslContext initNettySslContext() throws DrillException {     final SslContext sslCtx;      if (!userSslEnabled) {       return null;     }      TrustManagerFactory tmf;     try {       tmf = initializeTrustManagerFactory();       sslCtx = SslContextBuilder.forClient()           .sslProvider(getProvider())           .trustManager(tmf)           .protocols(protocol)           .build();     } catch (Exception e) {       // Catch any SSL initialization Exceptions here and abort.       throw new DrillException(new StringBuilder()           .append("SSL is enabled but cannot be initialized due to the following exception: ")           .append("[ ")           .append(e.getMessage())           .append("]. ")           .toString());     }     this.nettySslContext = sslCtx;     return sslCtx;   }    @Override   public SSLContext initJDKSSLContext() throws DrillException {     final SSLContext sslCtx;      if (!userSslEnabled) {       return null;     }      TrustManagerFactory tmf;     try {       tmf = initializeTrustManagerFactory();       sslCtx = SSLContext.getInstance(protocol);       sslCtx.init(null, tmf.getTrustManagers(), null);     } catch (Exception e) {       // Catch any SSL initialization Exceptions here and abort.       throw new DrillException(new StringBuilder()           .append("SSL is enabled but cannot be initialized due to the following exception: ")           .append("[ ")           .append(e.getMessage())           .append("]. ")           .toString());     }     this.jdkSSlContext = sslCtx;     return sslCtx;   }    @Override   public SSLEngine createSSLEngine(BufferAllocator allocator, String peerHost, int peerPort) {     SSLEngine engine = super.createSSLEngine(allocator, peerHost, peerPort);      if (!this.disableHostVerification()) {       SSLParameters sslParameters = engine.getSSLParameters();       // only available since Java 7       sslParameters.setEndpointIdentificationAlgorithm("HTTPS");       engine.setSSLParameters(sslParameters);     }      engine.setUseClientMode(true);      try {       engine.setEnableSessionCreation(true);     } catch (Exception e) {       // Openssl implementation may throw this.       logger.debug("Session creation not enabled. Exception: {}", e.getMessage());     }      return engine;   }    @Override   public boolean isUserSslEnabled() {     return userSslEnabled;   }    @Override   public boolean isHttpsEnabled() {     return false;   }    @Override   public String getKeyStoreType() {     return emptyString;   }    @Override   public String getKeyStorePath() {     return emptyString;   }    @Override   public String getKeyStorePassword() {     return emptyString;   }    @Override   public String getKeyPassword() {     return emptyString;   }    @Override   public String getTrustStoreType() {     return trustStoreType;   }    @Override   public boolean hasTrustStorePath() {     return !trustStorePath.isEmpty();   }    @Override   public String getTrustStorePath() {     return trustStorePath;   }    @Override   public boolean hasTrustStorePassword() {     return !trustStorePassword.isEmpty();   }    @Override   public String getTrustStorePassword() {     return trustStorePassword;   }    @Override   public String getProtocol() {     return protocol;   }    @Override   public SslProvider getProvider() {     return provider.equalsIgnoreCase("JDK") ? SslProvider.JDK : SslProvider.OPENSSL;   }    @Override   public int getHandshakeTimeout() {     return handshakeTimeout;   }    @Override   public Mode getMode() {     return Mode.CLIENT;   }    @Override   public boolean disableHostVerification() {     return disableHostVerification;   }    @Override   public boolean disableCertificateVerification() {     return disableCertificateVerification;   }    @Override   public boolean useSystemTrustStore() {     return useSystemTrustStore;   }    public boolean isSslValid() {     return true;   }  };data class;blob;t;t;f;blob;data class;0;4454;https://github.com/apache/drill/blob/5e2251a9fd659b81ebfcd6702ee4ee16b3f7b6b3/exec/java-exec/src/main/java/org/apache/drill/exec/ssl/SSLConfigClient.java/#L33-L281;2;457;4454
463;{"response": "YES I found bad smells", "detected_bad_smells": ["Blob", "Feature Envy"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public abstract class PKWareExtraHeader implements ZipExtraField {      private final ZipShort headerId;     /**      * Extra field data in local file data - without Header-ID or length      * specifier.      */     private byte[] localData;     /**      * Extra field data in central directory - without Header-ID or length      * specifier.      */     private byte[] centralData;      protected PKWareExtraHeader(final ZipShort headerId) {         this.headerId = headerId;     }      /**      * Get the header id.      *      * @return the header id      */     @Override     public ZipShort getHeaderId() {         return headerId;     }      /**      * Set the extra field data in the local file data - without Header-ID or      * length specifier.      *      * @param data      *            the field data to use      */     public void setLocalFileDataData(final byte[] data) {         localData = ZipUtil.copy(data);     }      /**      * Get the length of the local data.      *      * @return the length of the local data      */     @Override     public ZipShort getLocalFileDataLength() {         return new ZipShort(localData != null ? localData.length : 0);     }      /**      * Get the local data.      *      * @return the local data      */     @Override     public byte[] getLocalFileDataData() {         return ZipUtil.copy(localData);     }      /**      * Set the extra field data in central directory.      *      * @param data      *            the data to use      */     public void setCentralDirectoryData(final byte[] data) {         centralData = ZipUtil.copy(data);     }      /**      * Get the central data length. If there is no central data, get the local      * file data length.      *      * @return the central data length      */     @Override     public ZipShort getCentralDirectoryLength() {         if (centralData != null) {             return new ZipShort(centralData.length);         }         return getLocalFileDataLength();     }      /**      * Get the central data.      *      * @return the central data if present, else return the local file data      */     @Override     public byte[] getCentralDirectoryData() {         if (centralData != null) {             return ZipUtil.copy(centralData);         }         return getLocalFileDataData();     }      /**      * @param data      *            the array of bytes.      * @param offset      *            the source location in the data array.      * @param length      *            the number of bytes to use in the data array.      * @see ZipExtraField#parseFromLocalFileData(byte[], int, int)      */     @Override     public void parseFromLocalFileData(final byte[] data, final int offset, final int length) {         final byte[] tmp = new byte[length];         System.arraycopy(data, offset, tmp, 0, length);         setLocalFileDataData(tmp);     }      /**      * @param data      *            the array of bytes.      * @param offset      *            the source location in the data array.      * @param length      *            the number of bytes to use in the data array.      * @see ZipExtraField#parseFromCentralDirectoryData(byte[], int, int)      */     @Override     public void parseFromCentralDirectoryData(final byte[] data, final int offset, final int length) {         final byte[] tmp = new byte[length];         System.arraycopy(data, offset, tmp, 0, length);         setCentralDirectoryData(tmp);         if (localData == null) {             setLocalFileDataData(tmp);         }     }      /**      * Encryption algorithm.      *      * @since 1.11      */     public enum EncryptionAlgorithm {         DES(0x6601),         RC2pre52(0x6602),         TripleDES168(0x6603),         TripleDES192(0x6609),         AES128(0x660E),         AES192(0x660F),         AES256(0x6610),         RC2(0x6702),         RC4(0x6801),         UNKNOWN(0xFFFF);          private final int code;          private static final Map codeToEnum;          static {             final Map cte = new HashMap<>();             for (final EncryptionAlgorithm method : values()) {                 cte.put(method.getCode(), method);             }             codeToEnum = Collections.unmodifiableMap(cte);         }          /**          * private constructor for enum style class.          */         EncryptionAlgorithm(final int code) {             this.code = code;         }          /**          * the algorithm id.          *          * @return the PKWare AlgorithmId          */         public int getCode() {             return code;         }          /**          * Returns the EncryptionAlgorithm for the given code or null if the          * method is not known.          * @param code the code of the algorithm          * @return the EncryptionAlgorithm for the given code or null          * if the method is not known          */         public static EncryptionAlgorithm getAlgorithmByCode(final int code) {             return codeToEnum.get(code);         }     }      /**      * Hash Algorithm      *      * @since 1.11      */     public enum HashAlgorithm {         NONE(0),         CRC32(1),         MD5(0x8003),         SHA1(0x8004),         RIPEND160(0x8007),         SHA256(0x800C),         SHA384(0x800D),         SHA512(0x800E);          private final int code;          private static final Map codeToEnum;          static {             final Map cte = new HashMap<>();             for (final HashAlgorithm method : values()) {                 cte.put(method.getCode(), method);             }             codeToEnum = Collections.unmodifiableMap(cte);         }          /**          * private constructor for enum style class.          */         HashAlgorithm(final int code) {             this.code = code;         }          /**          * the hash algorithm ID.          *          * @return the PKWare hashAlg          */         public int getCode() {             return code;         }          /**          * Returns the HashAlgorithm for the given code or null if the method is          * not known.          * @param code the code of the algorithm          * @return the HashAlgorithm for the given code or null          * if the method is not known          */         public static HashAlgorithm getAlgorithmByCode(final int code) {             return codeToEnum.get(code);         }     } };data class;blob, feature envy;t;t;f;blob,  feature envy;data class;0;4487;https://github.com/apache/commons-compress/blob/1881a202fbec4466f3766eaa0057370d7007401b/src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java/#L66-L308;2;463;4487
475;   {     "message": "YES I found bad smells",     "detected_bad_smells": [       "Blob"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    class LastAck {         long lastAckedSequence;         byte priority;          public LastAck(LastAck source) {             this.lastAckedSequence = source.lastAckedSequence;             this.priority = source.priority;         }          public LastAck() {             this.priority = MessageOrderIndex.HI;         }          public LastAck(long ackLocation) {             this.lastAckedSequence = ackLocation;             this.priority = MessageOrderIndex.LO;         }          public LastAck(long ackLocation, byte priority) {             this.lastAckedSequence = ackLocation;             this.priority = priority;         }          @Override         public String toString() {             return "[" + lastAckedSequence + ":" + priority + "]";         }     };data class;blob;t;t;f;blob;data class;0;4581;https://github.com/apache/activemq/blob/ccf56875b0660214e0a61bd2f8adc418143551fc/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java/#L2313-L2340;2;475;4581
480;     {         "message": "YES, I found bad smells",         "detected_bad_smells": [             "Long Method",             "Blob"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    static void registerConfigOptions(IConfigManager configManager) {         AsterixProperties.registerConfigOptions(configManager);         ControllerConfig.Option.DEFAULT_DIR                 .setDefaultValue(FileUtil.joinPath(System.getProperty(ConfigurationUtil.JAVA_IO_TMPDIR), "asterixdb"));         NCConfig.Option.APP_CLASS.setDefaultValue(NCApplication.class.getName());         CCConfig.Option.APP_CLASS.setDefaultValue(CCApplication.class.getName());         try {             InputStream propertyStream =                     ApplicationConfigurator.class.getClassLoader().getResourceAsStream("git.properties");             if (propertyStream != null) {                 Properties gitProperties = new Properties();                 gitProperties.load(propertyStream);                 StringWriter sw = new StringWriter();                 gitProperties.store(sw, null);                 configManager.setVersionString(sw.toString());             }         } catch (IOException e) {             throw new IllegalStateException(e);         }      };feature envy;long method, blob;t;t;f;long method,  blob;feature envy;0;4632;https://github.com/apache/asterixdb/blob/223d13a06c4a4a58408aeac19674ac1f36f5ff35/asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/ApplicationConfigurator.java/#L45-L65;2;480;4632
489;     {         "message": "YES I found bad smells",         "bad smells are": [             "Long Method",             "Blob"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    private void appendXmlComparison1(SQLBuffer buf, String op,             FilterValue lhs, FilterValue rhs) {         boolean castrhs = false;         Class rc = Filters.wrap(rhs.getType());         int type = 0;         if (rhs.isConstant()) {             type = getJDBCType(JavaTypes.getTypeCode(rc), false);             castrhs = true;         }          appendXmlExists(buf, lhs);          buf.append(" ").append(op).append(" ");          buf.append("$");         if (castrhs)             buf.append("Parm");         else             rhs.appendTo(buf);          buf.append("]' PASSING ");         appendXmlVar(buf, lhs);         buf.append(", ");          if (castrhs)             appendCast(buf, rhs, type);         else             rhs.appendTo(buf);          buf.append(" AS \"");         if (castrhs)             buf.append("Parm");         else             rhs.appendTo(buf);         buf.append("\")");     };long method;long method, blob;t;t;t; blob;;0;4865;https://github.com/apache/openjpa/blob/8c0b843f6e6e0dd86a31e485928e61f2ba4c8f29/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java/#L682-L717;2;489;4865
508;{"response": "YES I found bad smells", "bad smells are": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@InterfaceAudience.Private @InterfaceStability.Evolving public class BlockMissingException extends IOException {    private static final long serialVersionUID = 1L;    private String filename;   private long   offset;    /**    * An exception that indicates that file was corrupted.    * @param filename name of corrupted file    * @param description a description of the corruption details    */   public BlockMissingException(String filename, String description, long offset) {     super(description);     this.filename = filename;     this.offset = offset;   }    /**    * Returns the name of the corrupted file.    * @return name of corrupted file    */   public String getFile() {     return filename;   }    /**    * Returns the offset at which this file is corrupted    * @return offset of corrupted file    */   public long getOffset() {     return offset;   } };data class;blob, long method;t;t;f;blob,  long method;data class;0;5157;https://github.com/apache/hadoop-hdfs/blob/b2d2a3262c587638db04c2991d48656b3d06275c/src/java/org/apache/hadoop/hdfs/BlockMissingException.java/#L30-L65;2;508;5157
566; {     "message": "YES I found bad smells",     "bad smells are": [         "Blob"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    private static class ProxiedNiFiClient implements NiFiClient {          private final String proxiedEntity;         private final NiFiClient wrappedClient;          public ProxiedNiFiClient(final NiFiClient wrappedClient, final String proxiedEntity) {             this.proxiedEntity = proxiedEntity;             this.wrappedClient = wrappedClient;         }          @Override         public ControllerClient getControllerClient() {             return wrappedClient.getControllerClientForProxiedEntities(proxiedEntity);         }          @Override         public ControllerClient getControllerClientForProxiedEntities(String... proxiedEntity) {             return wrappedClient.getControllerClientForProxiedEntities(proxiedEntity);         }          @Override         public ControllerClient getControllerClientForToken(String token) {             return wrappedClient.getControllerClientForToken(token);         }          @Override         public FlowClient getFlowClient() {             return wrappedClient.getFlowClientForProxiedEntities(proxiedEntity);         }          @Override         public FlowClient getFlowClientForProxiedEntities(String... proxiedEntity) {             return wrappedClient.getFlowClientForProxiedEntities(proxiedEntity);         }          @Override         public FlowClient getFlowClientForToken(String token) {             return wrappedClient.getFlowClientForToken(token);         }          @Override         public ProcessGroupClient getProcessGroupClient() {             return wrappedClient.getProcessGroupClientForProxiedEntities(proxiedEntity);         }          @Override         public ProcessGroupClient getProcessGroupClientForProxiedEntities(String... proxiedEntity) {             return wrappedClient.getProcessGroupClientForProxiedEntities(proxiedEntity);         }          @Override         public ProcessGroupClient getProcessGroupClientForToken(String token) {             return wrappedClient.getProcessGroupClientForToken(token);         }          @Override         public VersionsClient getVersionsClient() {             return wrappedClient.getVersionsClientForProxiedEntities(proxiedEntity);         }          @Override         public VersionsClient getVersionsClientForProxiedEntities(String... proxiedEntity) {             return wrappedClient.getVersionsClientForProxiedEntities(proxiedEntity);         }          @Override         public VersionsClient getVersionsClientForToken(String token) {             return wrappedClient.getVersionsClientForToken(token);         }          @Override         public void close() throws IOException {             wrappedClient.close();         }     };data class;blob;t;t;f;blob;data class;0;5719;https://github.com/apache/nifi/blob/c8eff590efa3babcda0b755009224dcac168708b/nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/client/NiFiClientFactory.java/#L113-L187;2;566;5719
577;     {     "message": "YES, I found bad smells",     "bad smells are": [         "Blob",         "Long Method"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
        private Action createAction(final ProjectInfo project, final TeamConfiguration team) {             Check.notNull(project, "project"); //$NON-NLS-1$             Check.notNull(team, "team"); //$NON-NLS-1$              final String projectGUID = project.getGUID();              // Omit the team name for the default team             final String actionName = team.isDefaultTeam() ? project.getName()                 : MessageFormat.format(                     Messages.getString("TeamExplorerControl.ProjectSlashTeamFormat"), //$NON-NLS-1$                     project.getName(),                     team.getTeamName());              final Action action = new Action(actionName) {                 @Override                 public void run() {                     final String beforeChangeProjectGUID = context.getCurrentProjectInfo().getGUID();                     if (!projectGUID.equals(beforeChangeProjectGUID) || !team.equals(context.getCurrentTeam())) {                         context.setCurrentProject(projectGUID);                         context.setCurrentTeam(team);                          TFSCommonUIClientPlugin.getDefault().projectOrTeamChanged();                          // Only invoke this listener if team project changed                         if (!projectGUID.equals(beforeChangeProjectGUID)) {                             final boolean tfvc =                                 context.getCurrentProjectInfo().getSourceControlCapabilityFlags().contains(                                     SourceControlCapabilityFlags.TFS);                             TFSCommonUIClientPlugin.getDefault().sourceControlChanged(tfvc);                         }                     }                 }             };              if (projectGUID.equals(context.getCurrentProjectInfo().getGUID())                 && team.equals(context.getCurrentTeam())) {                 action.setChecked(true);             }              return action;         };long method;blob, long method;t;t;t;blob;;0;5782;https://github.com/Microsoft/team-explorer-everywhere/blob/89ab2a4847aec8ec2afdf36c3f6287dd03bd558d/source/com.microsoft.tfs.client.common.ui/src/com/microsoft/tfs/client/common/ui/controls/teamexplorer/TeamExplorerControl.java/#L607-L647;2;577;5782
592;     {         "message": "YES I found bad smells",         "detected_bad_smells": [             "Blob",             "Long Method"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    public float computeTableUnit(PercentBaseContext percentBaseContext, int contentAreaIPD) {          int sumCols = 0;         float factors = 0;         float unit = 0;          /* calculate the total width (specified absolute/percentages),          * and work out the total number of factors to use to distribute          * the remaining space (if any)          */         for (Object colWidth1 : colWidths) {             Length colWidth = (Length) colWidth1;             if (colWidth != null) {                 sumCols += colWidth.getValue(percentBaseContext);                 if (colWidth instanceof RelativeNumericProperty) {                     factors += ((RelativeNumericProperty) colWidth).getTableUnits();                 } else if (colWidth instanceof TableColLength) {                     factors += ((TableColLength) colWidth).getTableUnits();                 }             }         }          /* distribute the remaining space over the accumulated          * factors (if any)          */         if (factors > 0) {             if (sumCols < contentAreaIPD) {                 unit = (contentAreaIPD - sumCols) / factors;             } else {                 log.warn("No space remaining to distribute over columns.");             }         }          return unit;     };long method;blob, long method;t;t;t;blob;;0;5902;https://github.com/apache/fop/blob/caced35327f6b6d6eeac2a13543f3c458e902101/fop-core/src/main/java/org/apache/fop/layoutmgr/table/ColumnSetup.java/#L201-L235;2;592;5902
611; {    "response": "YES I found bad smells",    "bad smells": [     "1. Blob",     "2. Long Method"   ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public final class ObjectLruCache extends AbstractLruCache {      /** The array of values */     Object[] values = new Object[INITIAL_SIZE];      /**      * Create a new ObjectLruCache.      * @param maxSize the maximum size the cache can grow to      */     public ObjectLruCache(int maxSize) {         super(maxSize);     }      /**      * Overridden method to return values array.      */     Object getValuesArray() {         return values;     }      /**      * Overridden method to allocate new values array.      */     void allocNewValuesArray(int newSize) {         super.allocNewValuesArray(newSize);         values = new Object[newSize];     }      /**      * Overridden method to repopulate with key plus value at given offset.      */     void put(long key, Object oldvalues, int offset) {         Object[] v = (Object[])oldvalues;         put(key, v[offset]);     }      /**      * Returns the value mapped by the given key. Also promotes this key to the most      * recently used.      * @return the value or null if it cannot be found      */     public Object get(long key) {         int index = getIndexAndPromote(key) ;         if (index != -1) {             return values[index];         }         return null;     }      /**      * Add the key/value pair to the map.      */     public void put(long key, Object value) {         int index = putIndexAndPromote(key) ;         values[index] = value;         checkRehash();     } };data class;1. blob, 2. long method;t;t;f;1. blob,  2. long method;data class;0;6133;https://github.com/eclipse/openj9/blob/4911084853eb75b20e037c434ad4521b7317ebfb/jcl/src/openj9.dtfj/share/classes/com/ibm/dtfj/corereaders/zos/util/ObjectLruCache.java/#L32-L89;2;611;6133
612;      {     "message": "YES I found bad smells",     "detected_bad_smells": [       "Long Method",       "Blob"     ]   } ;The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    @Override     public void serialize(AGeometry instance, DataOutput out) throws HyracksDataException {         try {             OGCGeometry geometry = instance.getGeometry();             byte[] buffer = geometry.asBinary().array();             // For efficiency, we store the size of the geometry in bytes in the first 32 bits             // This allows AsterixDB to skip over this attribute if needed.             out.writeInt(buffer.length);             out.write(buffer);         } catch (IOException e) {             throw HyracksDataException.create(e);         }     };feature envy;long method, blob;t;t;f;long method,  blob;feature envy;0;6154;https://github.com/apache/asterixdb/blob/223d13a06c4a4a58408aeac19674ac1f36f5ff35/asterixdb/asterix-om/src/main/java/org/apache/asterix/dataflow/data/nontagged/serde/AGeometrySerializerDeserializer.java/#L63-L75;2;612;6154
645;{"message": "YES I found bad smells", "bad smells are": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class JodaDateValidator {    public enum PostgresDateTimeConstant {      // patterns for replacing     POSTGRES_FULL_NAME_OF_DAY(true, "day"),     POSTGRES_DAY_OF_YEAR(false, "ddd"),     POSTGRES_DAY_OF_MONTH(false, "dd"),     POSTGRES_DAY_OF_WEEK(false, "d"),     POSTGRES_NAME_OF_MONTH(true, "month"),     POSTGRES_ABR_NAME_OF_MONTH(true, "mon"),     POSTGRES_YEAR(false, "y"),     POSTGRES_ISO_4YEAR(false, "iyyy"),     POSTGRES_ISO_3YEAR(false, "iyy"),     POSTGRES_ISO_2YEAR(false, "iy"),     POSTGRES_ISO_1YEAR(false, "i"),     POSTGRES_FULL_ERA_NAME(false, "ee"),     POSTGRES_NAME_OF_DAY(true, "dy"),     POSTGRES_HOUR_12_NAME(false, "hh"),     POSTGRES_HOUR_12_OTHER_NAME(false, "hh12"),     POSTGRES_HOUR_24_NAME(false, "hh24"),     POSTGRES_MINUTE_OF_HOUR_NAME(false, "mi"),     POSTGRES_SECOND_OF_MINUTE_NAME(false, "ss"),     POSTGRES_MILLISECOND_OF_MINUTE_NAME(false, "ms"),     POSTGRES_WEEK_OF_YEAR(false, "ww"),     POSTGRES_ISO_WEEK_OF_YEAR(false, "iw"),     POSTGRES_MONTH(false, "mm"),     POSTGRES_HALFDAY_AM(false, "am"),     POSTGRES_HALFDAY_PM(false, "pm"),      // pattern modifiers for deleting     PREFIX_FM(false, "fm"),     PREFIX_FX(false, "fx"),     PREFIX_TM(false, "tm");      private final boolean hasCamelCasing;     private final String name;      PostgresDateTimeConstant(boolean hasCamelCasing, String name) {       this.hasCamelCasing = hasCamelCasing;       this.name = name;     }      public boolean hasCamelCasing() {       return hasCamelCasing;     }      public String getName() {       return name;     }   }    private static final Map postgresToJodaMap = Maps.newTreeMap(new LengthDescComparator());    public static final String POSTGRES_ESCAPE_CHARACTER = "\"";    // jodaTime patterns   public static final String JODA_FULL_NAME_OF_DAY = "EEEE";   public static final String JODA_DAY_OF_YEAR = "D";   public static final String JODA_DAY_OF_MONTH = "d";   public static final String JODA_DAY_OF_WEEK = "e";   public static final String JODA_NAME_OF_MONTH = "MMMM";   public static final String JODA_ABR_NAME_OF_MONTH = "MMM";   public static final String JODA_YEAR = "y";   public static final String JODA_ISO_4YEAR = "xxxx";   public static final String JODA_ISO_3YEAR = "xxx";   public static final String JODA_ISO_2YEAR = "xx";   public static final String JODA_ISO_1YEAR = "x";   public static final String JODA_FULL_ERA_NAME = "G";   public static final String JODA_NAME_OF_DAY = "E";   public static final String JODA_HOUR_12_NAME = "h";   public static final String JODA_HOUR_24_NAME = "H";   public static final String JODA_MINUTE_OF_HOUR_NAME = "m";   public static final String JODA_SECOND_OF_MINUTE_NAME = "ss";   public static final String JODA_MILLISECOND_OF_MINUTE_NAME = "SSS";   public static final String JODA_WEEK_OF_YEAR = "w";   public static final String JODA_MONTH = "MM";   public static final String JODA_HALFDAY = "aa";   public static final String JODA_ESCAPE_CHARACTER = "'";   public static final String EMPTY_STRING = "";    static {     postgresToJodaMap.put(POSTGRES_FULL_NAME_OF_DAY, JODA_FULL_NAME_OF_DAY);     postgresToJodaMap.put(POSTGRES_DAY_OF_YEAR, JODA_DAY_OF_YEAR);     postgresToJodaMap.put(POSTGRES_DAY_OF_MONTH, JODA_DAY_OF_MONTH);     postgresToJodaMap.put(POSTGRES_DAY_OF_WEEK, JODA_DAY_OF_WEEK);     postgresToJodaMap.put(POSTGRES_NAME_OF_MONTH, JODA_NAME_OF_MONTH);     postgresToJodaMap.put(POSTGRES_ABR_NAME_OF_MONTH, JODA_ABR_NAME_OF_MONTH);     postgresToJodaMap.put(POSTGRES_FULL_ERA_NAME, JODA_FULL_ERA_NAME);     postgresToJodaMap.put(POSTGRES_NAME_OF_DAY, JODA_NAME_OF_DAY);     postgresToJodaMap.put(POSTGRES_HOUR_12_NAME, JODA_HOUR_12_NAME);     postgresToJodaMap.put(POSTGRES_HOUR_12_OTHER_NAME, JODA_HOUR_12_NAME);     postgresToJodaMap.put(POSTGRES_HOUR_24_NAME, JODA_HOUR_24_NAME);     postgresToJodaMap.put(POSTGRES_MINUTE_OF_HOUR_NAME, JODA_MINUTE_OF_HOUR_NAME);     postgresToJodaMap.put(POSTGRES_SECOND_OF_MINUTE_NAME, JODA_SECOND_OF_MINUTE_NAME);     postgresToJodaMap.put(POSTGRES_MILLISECOND_OF_MINUTE_NAME, JODA_MILLISECOND_OF_MINUTE_NAME);     postgresToJodaMap.put(POSTGRES_WEEK_OF_YEAR, JODA_WEEK_OF_YEAR);     postgresToJodaMap.put(POSTGRES_MONTH, JODA_MONTH);     postgresToJodaMap.put(POSTGRES_HALFDAY_AM, JODA_HALFDAY);     postgresToJodaMap.put(POSTGRES_HALFDAY_PM, JODA_HALFDAY);     postgresToJodaMap.put(POSTGRES_ISO_WEEK_OF_YEAR, JODA_WEEK_OF_YEAR);     postgresToJodaMap.put(POSTGRES_YEAR, JODA_YEAR);     postgresToJodaMap.put(POSTGRES_ISO_1YEAR, JODA_ISO_1YEAR);     postgresToJodaMap.put(POSTGRES_ISO_2YEAR, JODA_ISO_2YEAR);     postgresToJodaMap.put(POSTGRES_ISO_3YEAR, JODA_ISO_3YEAR);     postgresToJodaMap.put(POSTGRES_ISO_4YEAR, JODA_ISO_4YEAR);     postgresToJodaMap.put(PREFIX_FM, EMPTY_STRING);     postgresToJodaMap.put(PREFIX_FX, EMPTY_STRING);     postgresToJodaMap.put(PREFIX_TM, EMPTY_STRING);   }    /**    * Replaces all postgres patterns from {@param pattern},    * available in postgresToJodaMap keys to jodaTime equivalents.    *    * @param pattern date pattern in postgres format    * @return date pattern with replaced patterns in joda format    */   public static String toJodaFormat(String pattern) {     // replaces escape character for text delimiter     StringBuilder builder = new StringBuilder(pattern.replaceAll(POSTGRES_ESCAPE_CHARACTER, JODA_ESCAPE_CHARACTER));      int start = 0;    // every time search of postgres token in pattern will start from this index.     int minPos;       // min position of the longest postgres token     do {       // finds first value with max length       minPos = builder.length();       PostgresDateTimeConstant firstMatch = null;       for (PostgresDateTimeConstant postgresPattern : postgresToJodaMap.keySet()) {         // keys sorted in length decreasing         // at first search longer tokens to consider situation where some tokens are the parts of large tokens         // example: if pattern contains a token "DDD", token "DD" would be skipped, as a part of "DDD".         int pos;         // some tokens can't be in upper camel casing, so we ignore them here.         // example: DD, DDD, MM, etc.         if (postgresPattern.hasCamelCasing()) {           // finds postgres tokens in upper camel casing           // example: Month, Mon, Day, Dy, etc.           pos = builder.indexOf(StringUtils.capitalize(postgresPattern.getName()), start);           if (pos >= 0 && pos < minPos) {             firstMatch = postgresPattern;             minPos = pos;             if (minPos == start) {               break;             }           }         }         // finds postgres tokens in lower casing         pos = builder.indexOf(postgresPattern.getName().toLowerCase(), start);         if (pos >= 0 && pos < minPos) {           firstMatch = postgresPattern;           minPos = pos;           if (minPos == start) {             break;           }         }         // finds postgres tokens in upper casing         pos = builder.indexOf(postgresPattern.getName().toUpperCase(), start);         if (pos >= 0 && pos < minPos) {           firstMatch = postgresPattern;           minPos = pos;           if (minPos == start) {             break;           }         }       }       // replaces postgres token, if found and it does not escape character       if (minPos < builder.length() && firstMatch != null) {         String jodaToken = postgresToJodaMap.get(firstMatch);         // checks that token is not a part of escape sequence         if (StringUtils.countMatches(builder.subSequence(0, minPos), JODA_ESCAPE_CHARACTER) % 2 == 0) {           int offset = minPos + firstMatch.getName().length();           builder.replace(minPos, offset, jodaToken);           start = minPos + jodaToken.length();         } else {           int endEscapeCharacter = builder.indexOf(JODA_ESCAPE_CHARACTER, minPos);           if (endEscapeCharacter >= 0) {             start = endEscapeCharacter;           } else {             break;           }         }       }     } while (minPos < builder.length());     return builder.toString();   }    /**    * Length decreasing comparator.    * Compares PostgresDateTimeConstant names by length, if they have the same length, compares them lexicographically.    */   private static class LengthDescComparator implements Comparator {      public int compare(PostgresDateTimeConstant o1, PostgresDateTimeConstant o2) {       int result = o2.getName().length() - o1.getName().length();       if (result == 0) {         return o1.getName().compareTo(o2.getName());       }       return result;     }   }  };data class;blob, long method;t;t;f;blob,  long method;data class;0;6363;https://github.com/apache/drill/blob/5e2251a9fd659b81ebfcd6702ee4ee16b3f7b6b3/logical/src/main/java/org/apache/drill/common/expression/fn/JodaDateValidator.java/#L54-L256;2;645;6363
654;     {     "message": "YES I found bad smells",     "bad smells are": [       "Long Method",       "Blob"     ]   }   ;The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
	public void run( IAction action ) 	{ 		if ( !preGenerate( ) ) 		{ 			return; 		}  		IFile file = getSelectedFile( ); 		if ( file != null ) 		{ 			String url = file.getLocation( ).toOSString( );  			Map options = new HashMap( ); 			options.put( WebViewer.RESOURCE_FOLDER_KEY, 					ReportPlugin.getDefault( ) 							.getResourceFolder( file.getProject( ) ) ); 			options.put( WebViewer.SERVLET_NAME_KEY, WebViewer.VIEWER_DOCUMENT );  			Object adapter = ElementAdapterManager.getAdapter( action, 					IPreviewAction.class );  			if ( adapter instanceof IPreviewAction ) 			{ 				IPreviewAction delegate = (IPreviewAction) adapter;  				delegate.setProperty( IPreviewConstants.REPORT_PREVIEW_OPTIONS, 						options ); 				delegate.setProperty( IPreviewConstants.REPORT_FILE_PATH, url );  				delegate.run( );  				return; 			}  			try 			{ 				WebViewer.display( url, options ); 			} 			catch ( Exception e ) 			{ 				ExceptionUtil.handle( e ); 				return; 			} 		} 		else 		{ 			action.setEnabled( false ); 		} 	};feature envy;long method, blob;t;t;f;long method,  blob;feature envy;0;6390;https://github.com/eclipse/birt/blob/f89264810347de98702db45386a822aabc0fadbf/UI/org.eclipse.birt.report.designer.ui.preview.web/src/org/eclipse/birt/report/designer/ui/ide/navigator/GenerateDocumentAction.java/#L39-L87;2;654;6390
659; {"message": "YES I found bad smells", "bad smells are": ["Blob", "Data Class", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class DefaultJobMasterServiceFactory implements JobMasterServiceFactory {  	private final JobMasterConfiguration jobMasterConfiguration;  	private final SlotPoolFactory slotPoolFactory;  	private final SchedulerFactory schedulerFactory;  	private final RpcService rpcService;  	private final HighAvailabilityServices haServices;  	private final JobManagerSharedServices jobManagerSharedServices;  	private final HeartbeatServices heartbeatServices;  	private final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory;  	private final FatalErrorHandler fatalErrorHandler;  	public DefaultJobMasterServiceFactory( 			JobMasterConfiguration jobMasterConfiguration, 			SlotPoolFactory slotPoolFactory, 			SchedulerFactory schedulerFactory, 			RpcService rpcService, 			HighAvailabilityServices haServices, 			JobManagerSharedServices jobManagerSharedServices, 			HeartbeatServices heartbeatServices, 			JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory, 			FatalErrorHandler fatalErrorHandler) { 		this.jobMasterConfiguration = jobMasterConfiguration; 		this.slotPoolFactory = slotPoolFactory; 		this.schedulerFactory = schedulerFactory; 		this.rpcService = rpcService; 		this.haServices = haServices; 		this.jobManagerSharedServices = jobManagerSharedServices; 		this.heartbeatServices = heartbeatServices; 		this.jobManagerJobMetricGroupFactory = jobManagerJobMetricGroupFactory; 		this.fatalErrorHandler = fatalErrorHandler; 	}  	@Override 	public JobMaster createJobMasterService(JobGraph jobGraph, OnCompletionActions jobCompletionActions, ClassLoader userCodeClassloader) throws Exception { 		return new JobMaster( 			rpcService, 			jobMasterConfiguration, 			ResourceID.generate(), 			jobGraph, 			haServices, 			slotPoolFactory, 			schedulerFactory, 			jobManagerSharedServices, 			heartbeatServices, 			jobManagerJobMetricGroupFactory, 			jobCompletionActions, 			fatalErrorHandler, 			userCodeClassloader); 	} };data class;blob, data class, long method;t;t;t;blob,  long method;;0;6424;https://github.com/apache/flink/blob/8068c8775ad067d75828e6360e7e0994348da9b9/flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/factories/DefaultJobMasterServiceFactory.java/#L37-L95;2;659;6424
671;     {         "output": "YES I found bad smells",         "bad smells are": ["Long Method", "Blob"]     }     ;The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    NativeKeyHolder(P11Key p11Key, long keyID, Session keySession,             boolean extractKeyInfo, boolean isTokenObject) {         this.p11Key = p11Key;         this.keyID = keyID;         this.refCount = -1;         byte[] ki = null;         if (isTokenObject) {             this.ref = null;         } else {             this.ref = new SessionKeyRef(p11Key, keyID, keySession);              // Try extracting key info, if any error, disable it             Token token = p11Key.token;             if (extractKeyInfo) {                 try {                     if (p11Key.sensitive && nativeKeyWrapperKeyID == 0) {                         synchronized(NativeKeyHolder.class) {                             // Create a global wrapping/unwrapping key                             CK_ATTRIBUTE[] wrappingAttributes = token.getAttributes                                 (O_GENERATE, CKO_SECRET_KEY, CKK_AES, new CK_ATTRIBUTE[] {                                     new CK_ATTRIBUTE(CKA_CLASS, CKO_SECRET_KEY),                                     new CK_ATTRIBUTE(CKA_VALUE_LEN, 256 >> 3),                                 });                             Session wrappingSession = null;                             try {                                 wrappingSession = token.getObjSession();                                 nativeKeyWrapperKeyID = token.p11.C_GenerateKey                                     (wrappingSession.id(),                                     new CK_MECHANISM(CKM_AES_KEY_GEN),                                     wrappingAttributes);                                 byte[] iv = new byte[16];                                 JCAUtil.getSecureRandom().nextBytes(iv);                                 nativeKeyWrapperMechanism = new CK_MECHANISM                                     (CKM_AES_CBC_PAD, iv);                             } catch (PKCS11Exception e) {                                 // best effort                             } finally {                                 token.releaseSession(wrappingSession);                             }                         }                     }                     Session opSession = null;                     try {                         opSession = token.getOpSession();                         ki = p11Key.token.p11.getNativeKeyInfo(opSession.id(),                             keyID, nativeKeyWrapperKeyID, nativeKeyWrapperMechanism);                     } catch (PKCS11Exception e) {                         // best effort                     } finally {                         token.releaseSession(opSession);                     }                 } catch (PKCS11Exception e) {                     // best effort                 }             }         }         this.nativeKeyInfo = ((ki == null || ki.length == 0)? null : ki);     };long method;long method, blob;t;t;t; blob;;0;6554;https://github.com/SAP/SapMachine/blob/6e62561730c46dc5000c39665c43951832192ceb/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11Key.java/#L1154-L1211;2;671;6554
676;     {         "response": "YES I found bad smells",         "the bad smells are": [             "Blob",             "Data Class"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class SchemaAndValue {     private final Schema schema;     private final Object value;      public static final SchemaAndValue NULL = new SchemaAndValue(null, null);      public SchemaAndValue(Schema schema, Object value) {         this.value = value;         this.schema = schema;     }      public Schema schema() {         return schema;     }      public Object value() {         return value;     }      @Override     public boolean equals(Object o) {         if (this == o) return true;         if (o == null || getClass() != o.getClass()) return false;         SchemaAndValue that = (SchemaAndValue) o;         return Objects.equals(schema, that.schema) &&                 Objects.equals(value, that.value);     }      @Override     public int hashCode() {         return Objects.hash(schema, value);     }      @Override     public String toString() {         return "SchemaAndValue{" +                 "schema=" + schema +                 ", value=" + value +                 '}';     } };data class;blob, data class;t;t;t;blob;;0;6576;https://github.com/apache/kafka/blob/c74acb24eb1da5d16cc2721a63931cd87f79ec66/connect/api/src/main/java/org/apache/kafka/connect/data/SchemaAndValue.java/#L21-L61;2;676;6576
685;  {     "message": "YES I found bad smells",     "detected_bad_smells": [         "1. Blob",         "2. Long Method"     ] }  ;The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@UnknownActivationContextCheck(false) @WhitelistAccessOnly @ContentType("text/html") @Import(stylesheet = "dashboard.css") public class T5Dashboard extends AbstractInternalPage {     @Inject     @Symbol(SymbolConstants.TAPESTRY_VERSION)     @Property     private String frameworkVersion;      @Property     @Inject     @Symbol(SymbolConstants.PRODUCTION_MODE)     private boolean productionMode;      @Inject     @Property     private DashboardManager dashboardManager;      @Property     private String tabName;      private String activeTab;      public String getTabClass()     {         return tabName.equalsIgnoreCase(activeTab) ? "active" : null;     }      public Block getContent()     {         return dashboardManager.getTabContent(activeTab);     }      void onActivate()     {         activeTab = dashboardManager.getTabNames().get(0);     }      boolean onActivate(String tabName)     {         activeTab = tabName;          return true;     }      String onPassivate()     {         return activeTab;     } };data class;1. blob, 2. long method;t;t;f;1. blob,  2. long method;data class;0;6616;https://github.com/apache/tapestry-5/blob/542950fc0266e8f9be1aacb5d6ba92146ae20f1b/tapestry-core/src/main/java/org/apache/tapestry5/corelib/pages/T5Dashboard.java/#L27-L78;2;685;6616
701;{"message": "YES I found bad smells", "bad smells are": ["Long Method", "Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
            if (!experimentCatalog.isExist(ExperimentCatalogModelType.EXPERIMENT, airavataExperimentId)) {                 logger.error(airavataExperimentId, "Update request failed, Experiment {} doesn't exist.", airavataExperimentId);                 throw new RegistryServiceException("Requested experiment id " + airavataExperimentId + " does not exist in the system..");             }              ExperimentStatus experimentStatus = getExperimentStatusInternal(airavataExperimentId);             if (experimentStatus != null){                 ExperimentState experimentState = experimentStatus.getState();                 switch (experimentState){                     case CREATED: case VALIDATED:                         if(experiment.getUserConfigurationData() != null && experiment.getUserConfigurationData()                                 .getComputationalResourceScheduling() != null){                             String compResourceId = experiment.getUserConfigurationData()                                     .getComputationalResourceScheduling().getResourceHostId();                             ComputeResourceDescription computeResourceDescription = appCatalog.getComputeResource()                                     .getComputeResource(compResourceId);                             if(!computeResourceDescription.isEnabled()){                                 logger.error("Compute Resource is not enabled by the Admin!");                                 AiravataSystemException exception = new AiravataSystemException();                                 exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);                                 exception.setMessage("Compute Resource is not enabled by the Admin!");                                 throw exception;                             }                         }                         experimentCatalog.update(ExperimentCatalogModelType.EXPERIMENT, experiment, airavataExperimentId);                         logger.debug(airavataExperimentId, "Successfully updated experiment {} ", experiment.getExperimentName());                         break;                     default:                         logger.error(airavataExperimentId, "Error while updating experiment. Update experiment is only valid for experiments " +                                 "with status CREATED, VALIDATED, CANCELLED, FAILED and UNKNOWN. Make sure the given " +                                 "experiment is in one of above statuses... ");                         AiravataSystemException exception = new AiravataSystemException();                         exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);                         exception.setMessage("Error while updating experiment. Update experiment is only valid for experiments " +                                 "with status CREATED, VALIDATED, CANCELLED, FAILED and UNKNOWN. Make sure the given " +                                 "experiment is in one of above statuses... ");                         throw exception;                 }             }         } catch (RegistryException e) {             logger.error(airavataExperimentId, "Error while updating experiment", e);             RegistryServiceException exception = new RegistryServiceException();             exception.setMessage("Error while updating experiment. More info : " + e.getMessage());             throw exception;         } catch (AppCatalogException e) {             logger.error(airavataExperimentId, "Error while updating experiment", e);             RegistryServiceException exception = new RegistryServiceException();             exception.setMessage("Error while updating experiment. More info : " + e.getMessage());             throw exception;         }     }      /**      * *      * * Create New Experiment;long method;long method, blob;t;t;t; blob;;0;6688;https://github.com/apache/airavata/blob/391843a00eefa7b6213e845f2f044b4e042894d5/modules/registry/registry-server/registry-api-service/src/main/java/org/apache/airavata/registry/api/service/handler/RegistryServerHandler.java/#L3124-L3178;2;701;6688
702; {"message": "YES I found bad smells", "detected_bad_smells": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@XmlType(name = "remoteProcessGroup") public class RemoteProcessGroupDTO extends ComponentDTO {      private String targetUri;     private String targetUris;     private Boolean targetSecure;      private String name;     private String comments;     private String communicationsTimeout;     private String yieldDuration;     private String transportProtocol;     private String localNetworkInterface;     private String proxyHost;     private Integer proxyPort;     private String proxyUser;     private String proxyPassword;      private Collection authorizationIssues;     private Collection validationErrors;     private Boolean transmitting;      private Integer inputPortCount;     private Integer outputPortCount;      private Integer activeRemoteInputPortCount;     private Integer inactiveRemoteInputPortCount;     private Integer activeRemoteOutputPortCount;     private Integer inactiveRemoteOutputPortCount;      private Date flowRefreshed;      private RemoteProcessGroupContentsDTO contents;      public RemoteProcessGroupDTO() {         super();     }      public RemoteProcessGroupDTO(final RemoteProcessGroupDTO toCopy) {         setId(toCopy.getId());         setPosition(toCopy.getPosition());         targetUri = toCopy.getTargetUri();         name = toCopy.getName();     }      public void setTargetUri(final String targetUri) {         this.targetUri = targetUri;     }      /**      * @return target uri of this remote process group.      * If target uri is not set, but uris are set, then returns the first url in the urls.      * If neither target uri nor uris are set, then returns null.      */     @ApiModelProperty(             value = "The target URI of the remote process group." +                     " If target uri is not set, but uris are set, then returns the first url in the urls." +                     " If neither target uri nor uris are set, then returns null."     )     public String getTargetUri() {         if (targetUri == null || targetUri.length() == 0) {             synchronized (this) {                 if (targetUri == null || targetUri.length() == 0) {                     if (targetUris != null && targetUris.length() > 0) {                         if (targetUris.indexOf(',') > -1) {                             targetUri = targetUris.substring(0, targetUris.indexOf(','));                         } else {                             targetUri = targetUris;                         }                     }                 }             }         }          return this.targetUri;     }      public void setTargetUris(String targetUris) {         this.targetUris = targetUris;     }      /**      * @return target uris of this remote process group      * If targetUris was not set but target uri was set, then returns a collection containing the single uri.      * If neither target uris nor uri were set, then returns null.      */     @ApiModelProperty(             value = "The target URI of the remote process group." +                     " If target uris is not set but target uri is set," +                     " then returns a collection containing the single target uri." +                     " If neither target uris nor uris are set, then returns null."     )     public String getTargetUris() {         if (targetUris == null || targetUris.length() == 0) {             synchronized (this) {                 if (targetUris == null || targetUris.length() == 0) {                     targetUris = targetUri;                 }             }         }          return this.targetUris;     }      /**      * @param name of this remote process group      */     @ApiModelProperty(             value = "The name of the remote process group."     )     public void setName(final String name) {         this.name = name;     }      public String getName() {         return this.name;     }      /**      * @return Comments for this remote process group      */     @ApiModelProperty(             value = "The comments for the remote process group."     )     public String getComments() {         return comments;     }      public void setComments(String comments) {         this.comments = comments;     }      /**      * @return any remote authorization issues for this remote process group      */     @ApiModelProperty(             value = "Any remote authorization issues for the remote process group."     )     public Collection getAuthorizationIssues() {         return authorizationIssues;     }      public void setAuthorizationIssues(Collection authorizationIssues) {         this.authorizationIssues = authorizationIssues;     }      /**      * @return whether or not this remote process group is actively transmitting      */     @ApiModelProperty(             value = "Whether the remote process group is actively transmitting."     )     public Boolean isTransmitting() {         return transmitting;     }      public void setTransmitting(Boolean transmitting) {         this.transmitting = transmitting;     }      /**      * @return whether or not the target is running securely      */     @ApiModelProperty(             value = "Whether the target is running securely."     )     public Boolean isTargetSecure() {         return targetSecure;     }      public void setTargetSecure(Boolean targetSecure) {         this.targetSecure = targetSecure;     }      /**      * @return the time period used for the timeout when communicating with this RemoteProcessGroup      */     @ApiModelProperty(             value = "The time period used for the timeout when communicating with the target."     )     public String getCommunicationsTimeout() {         return communicationsTimeout;     }      public void setCommunicationsTimeout(String communicationsTimeout) {         this.communicationsTimeout = communicationsTimeout;     }      /**      * @return when yielding, this amount of time must elapse before this remote process group is scheduled again      */     @ApiModelProperty(             value = "When yielding, this amount of time must elapse before the remote process group is scheduled again."     )     public String getYieldDuration() {         return yieldDuration;     }      public void setYieldDuration(String yieldDuration) {         this.yieldDuration = yieldDuration;     }      /**      * @return number of active remote input ports      */     @ApiModelProperty(             value = "The number of active remote input ports."     )     public Integer getActiveRemoteInputPortCount() {         return activeRemoteInputPortCount;     }      public void setActiveRemoteInputPortCount(Integer activeRemoteInputPortCount) {         this.activeRemoteInputPortCount = activeRemoteInputPortCount;     }      /**      * @return number of inactive remote input ports      */     @ApiModelProperty(             value = "The number of inactive remote input ports."     )     public Integer getInactiveRemoteInputPortCount() {         return inactiveRemoteInputPortCount;     }      public void setInactiveRemoteInputPortCount(Integer inactiveRemoteInputPortCount) {         this.inactiveRemoteInputPortCount = inactiveRemoteInputPortCount;     }      /**      * @return number of active remote output ports      */     @ApiModelProperty(             value = "The number of active remote output ports."     )     public Integer getActiveRemoteOutputPortCount() {         return activeRemoteOutputPortCount;     }      public void setActiveRemoteOutputPortCount(Integer activeRemoteOutputPortCount) {         this.activeRemoteOutputPortCount = activeRemoteOutputPortCount;     }      /**      * @return number of inactive remote output ports      */     @ApiModelProperty(             value = "The number of inactive remote output ports."     )     public Integer getInactiveRemoteOutputPortCount() {         return inactiveRemoteOutputPortCount;     }      public void setInactiveRemoteOutputPortCount(Integer inactiveRemoteOutputPortCount) {         this.inactiveRemoteOutputPortCount = inactiveRemoteOutputPortCount;     }      /**      * @return number of Remote Input Ports currently available in the remote NiFi instance      */     @ApiModelProperty(             value = "The number of remote input ports currently available on the target."     )     public Integer getInputPortCount() {         return inputPortCount;     }      public void setInputPortCount(Integer inputPortCount) {         this.inputPortCount = inputPortCount;     }      /**      * @return number of Remote Output Ports currently available in the remote NiFi instance      */     @ApiModelProperty(             value = "The number of remote output ports currently available on the target."     )     public Integer getOutputPortCount() {         return outputPortCount;     }      public void setOutputPortCount(Integer outputPortCount) {         this.outputPortCount = outputPortCount;     }      /**      * @return contents of this remote process group. Will contain available input/output ports      */     @ApiModelProperty(             value = "The contents of the remote process group. Will contain available input/output ports."     )     public RemoteProcessGroupContentsDTO getContents() {         return contents;     }      public void setContents(RemoteProcessGroupContentsDTO contents) {         this.contents = contents;     }      /**      * @return the flow for this remote group was last refreshed      */     @XmlJavaTypeAdapter(DateTimeAdapter.class)     @ApiModelProperty(             value = "The timestamp when this remote process group was last refreshed.",             dataType = "string"     )     public Date getFlowRefreshed() {         return flowRefreshed;     }      public void setFlowRefreshed(Date flowRefreshed) {         this.flowRefreshed = flowRefreshed;     }      public String getTransportProtocol() {         return transportProtocol;     }      public void setTransportProtocol(String transportProtocol) {         this.transportProtocol = transportProtocol;     }      @ApiModelProperty("The local network interface to send/receive data. If not specified, any local address is used. If clustered, all nodes must have an interface with this identifier.")     public String getLocalNetworkInterface() {         return localNetworkInterface;     }      public void setLocalNetworkInterface(String localNetworkInterface) {         this.localNetworkInterface = localNetworkInterface;     }      @ApiModelProperty(             "The validation errors for the remote process group. These validation errors represent the problems with the remote process group that must be resolved before it can transmit."     )     public Collection getValidationErrors() {         return validationErrors;     }      public void setValidationErrors(Collection validationErrors) {         this.validationErrors = validationErrors;     }      public String getProxyHost() {         return proxyHost;     }      public void setProxyHost(String proxyHost) {         this.proxyHost = proxyHost;     }      public Integer getProxyPort() {         return proxyPort;     }      public void setProxyPort(Integer proxyPort) {         this.proxyPort = proxyPort;     }      public String getProxyUser() {         return proxyUser;     }      public void setProxyUser(String proxyUser) {         this.proxyUser = proxyUser;     }      public String getProxyPassword() {         return proxyPassword;     }      public void setProxyPassword(String proxyPassword) {         this.proxyPassword = proxyPassword;     } };data class;blob, data class;t;t;t;blob;;0;6697;https://github.com/apache/nifi/blob/c8eff590efa3babcda0b755009224dcac168708b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/RemoteProcessGroupDTO.java/#L30-L405;2;702;6697
749;     {         "answer": "YES I found bad smells",         "detected_bad_smells": "the bad smells are: 1. Blob, 2. Data Class"     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@SuppressWarnings({"unchecked", "rawtypes"}) public final class None extends Option {     private static final None INSTANCE = new None<>();      /**      * Get the static instance.      * @param  The type of this no-value object.      * @return the static instance      */     public static final  None getInstance() {         return INSTANCE;     }      /**      * Default constructor, does nothing.      */     public None() {         // super(null);         // no-op     }      @Override     public boolean hasValue() {         return false;     }      @Override     public T getValue() {         throw new NoSuchElementException("None does not contain a value");     }      @Override     public String toString() {         return "None()";     }      @Override     public boolean equals(Object other) {         return (other == null || other.getClass() != None.class) ? false : true;     }      @Override     public int hashCode() {         return -31;     }  };data class;the bad smells are: 1. blob, 2. data class;t;t;t;the bad smells are: 1. blob;;0;7022;https://github.com/apache/pivot/blob/568543f3396648a646341fe077a714eb06d556c0/core/src/org/apache/pivot/functional/monad/None.java/#L24-L70;2;749;7022
751;{"response": "YES I found bad smells", "bad smells are": ["Long Method", "Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class JavaTimeSupplementary_es_AR extends OpenListResourceBundle {     @Override     protected final Object[][] getContents() {         final String[] sharedAmPmMarkers = {             "a.m.",             "p.m.",         };          final String[] sharedDatePatterns = {             "GGGG y MMMM d, EEEE",             "GGGG y MMMM d",             "GGGG y MMM d",             "dd/MM/yy G",         };          final String[] sharedDayNarrows = {             "d",             "l",             "m",             "m",             "j",             "v",             "s",         };          final String[] sharedTimePatterns = {             "HH:mm:ss zzzz",             "HH:mm:ss z",             "HH:mm:ss",             "HH:mm",         };          final String[] sharedJavaTimeDatePatterns = {             "G y MMMM d, EEEE",             "G y MMMM d",             "G y MMM d",             "dd/MM/yy GGGGG",         };          return new Object[][] {             { "field.dayperiod",                 "a.m./p.m." },             { "islamic.AmPmMarkers",                 sharedAmPmMarkers },             { "islamic.DatePatterns",                 sharedDatePatterns },             { "islamic.DayNarrows",                 sharedDayNarrows },             { "islamic.TimePatterns",                 sharedTimePatterns },             { "islamic.abbreviated.AmPmMarkers",                 sharedAmPmMarkers },             { "islamic.narrow.AmPmMarkers",                 sharedAmPmMarkers },             { "java.time.buddhist.DatePatterns",                 sharedJavaTimeDatePatterns },             { "java.time.islamic.DatePatterns",                 sharedJavaTimeDatePatterns },             { "java.time.roc.DatePatterns",                 sharedJavaTimeDatePatterns },             { "roc.AmPmMarkers",                 sharedAmPmMarkers },             { "roc.DatePatterns",                 sharedDatePatterns },             { "roc.DayNarrows",                 sharedDayNarrows },             { "roc.MonthAbbreviations",                 new String[] {                     "ene.",                     "feb.",                     "mar.",                     "abr.",                     "may.",                     "jun.",                     "jul.",                     "ago.",                     "sep.",                     "oct.",                     "nov.",                     "dic.",                     "",                 }             },             { "roc.MonthNarrows",                 new String[] {                     "e",                     "f",                     "m",                     "a",                     "m",                     "j",                     "j",                     "a",                     "s",                     "o",                     "n",                     "d",                     "",                 }             },             { "roc.TimePatterns",                 sharedTimePatterns },             { "roc.abbreviated.AmPmMarkers",                 sharedAmPmMarkers },             { "roc.narrow.AmPmMarkers",                 sharedAmPmMarkers },         };     } };data class;long method, blob, data class;t;t;t;long method,  blob;;0;7030;https://github.com/SAP/SapMachine/blob/6e62561730c46dc5000c39665c43951832192ceb/src/jdk.localedata/share/classes/sun/text/resources/ext/JavaTimeSupplementary_es_AR.java/#L72-L180;2;751;7030
755;   {     "message": "YES I found bad smells",     "bad smells are": [       "Blob",       "Data Class",       "Long Method"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
	protected MqttDeliveryToken restoreToken(MqttPublish message) { 		final String methodName = "restoreToken"; 		MqttDeliveryToken token; 		synchronized(tokens) { 			String key = Integer.toString(message.getMessageId()); 			if (this.tokens.containsKey(key)) { 				token = (MqttDeliveryToken)this.tokens.get(key); 				//@TRACE 302=existing key={0} message={1} token={2} 				log.fine(CLASS_NAME,methodName, "302",new Object[]{key, message,token}); 			} else { 				token = new MqttDeliveryToken(logContext); 				token.internalTok.setKey(key); 				this.tokens.put(key, token); 				//@TRACE 303=creating new token key={0} message={1} token={2} 				log.fine(CLASS_NAME,methodName,"303",new Object[]{key, message, token}); 			} 		} 		return token; 	};long method;blob, data class, long method;t;t;t;blob,  data class;;0;7047;https://github.com/eclipse/paho.mqtt.java/blob/5af7b53499e7dbe45b7227b3d41fc870089c0033/org.eclipse.paho.client.mqttv3/src/main/java/org/eclipse/paho/client/mqttv3/internal/CommsTokenStore.java/#L108-L126;2;755;7047
756;{       "output": "YES I found bad smells",     "bad smells are": "1. Long Method, 2. Data Class, 3. Blob" }  ;The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    @Override     public String getVMPassword(final GetVMPasswordCmd cmd) {         final Account caller = getCaller();          final UserVmVO vm = _userVmDao.findById(cmd.getId());         if (vm == null) {             final InvalidParameterValueException ex = new InvalidParameterValueException("No VM with specified id found.");             ex.addProxyObject(cmd.getId().toString(), "vmId");             throw ex;         }          // make permission check         _accountMgr.checkAccess(caller, null, true, vm);          _userVmDao.loadDetails(vm);         final String password = vm.getDetail("Encrypted.Password");         if (password == null || password.equals("")) {             final InvalidParameterValueException ex = new InvalidParameterValueException(                     "No password for VM with specified id found. " + "If VM is created from password enabled template and SSH keypair is assigned to VM then only password can be retrieved.");             ex.addProxyObject(vm.getUuid(), "vmId");             throw ex;         }          return password;     };long method;1. long method, 2. data class, 3. blob;t;t;t; 2. data class,  3. blob;;0;7049;https://github.com/apache/cloudstack/blob/8d3feb100aab4a45b31a789f444038b892161eec/server/src/main/java/com/cloud/server/ManagementServerImpl.java/#L3807-L3831;2;756;7049
773;{   "answer": "YES I found bad smells",   "bad smells are": [     "Blob",     "Long Method"   ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@XmlAccessorType(XmlAccessType.FIELD) @XmlType(name = "faces-config-propertyType", propOrder = {     "descriptions",     "displayNames",     "icon",     "propertyName",     "propertyClass",     "defaultValue",     "suggestedValue",     "propertyExtension" }) public class FacesProperty {      @XmlTransient     protected TextMap description = new TextMap();     @XmlTransient     protected TextMap displayName = new TextMap();     @XmlElement(name = "icon", required = true)     protected LocalCollection icon = new LocalCollection();     @XmlElement(name = "property-name", required = true)     protected java.lang.String propertyName;     @XmlElement(name = "property-class", required = true)     protected java.lang.String propertyClass;     @XmlElement(name = "default-value")     protected java.lang.String defaultValue;     @XmlElement(name = "suggested-value")     protected java.lang.String suggestedValue;     @XmlElement(name = "property-extension")     protected List propertyExtension;     @XmlAttribute     @XmlJavaTypeAdapter(CollapsedStringAdapter.class)     @XmlID     @XmlSchemaType(name = "ID")     protected java.lang.String id;      @XmlElement(name = "description", required = true)     public Text[] getDescriptions() {         return description.toArray();     }      public void setDescriptions(Text[] text) {         description.set(text);     }      public String getDescription() {         return description.get();     }      @XmlElement(name = "display-name", required = true)     public Text[] getDisplayNames() {         return displayName.toArray();     }      public void setDisplayNames(Text[] text) {         displayName.set(text);     }      public String getDisplayName() {         return displayName.get();     }      public Collection getIcons() {         if (icon == null) {             icon = new LocalCollection();         }         return icon;     }      public Map getIconMap() {         if (icon == null) {             icon = new LocalCollection();         }         return icon.toMap();     }      public Icon getIcon() {         return icon.getLocal();     }      /**      * Gets the value of the propertyName property.      *       * @return      *     possible object is      *     {@link java.lang.String }      *           */     public java.lang.String getPropertyName() {         return propertyName;     }      /**      * Sets the value of the propertyName property.      *       * @param value      *     allowed object is      *     {@link java.lang.String }      *           */     public void setPropertyName(java.lang.String value) {         this.propertyName = value;     }      /**      * Gets the value of the propertyClass property.      *       * @return      *     possible object is      *     {@link java.lang.String }      *           */     public java.lang.String getPropertyClass() {         return propertyClass;     }      /**      * Sets the value of the propertyClass property.      *       * @param value      *     allowed object is      *     {@link java.lang.String }      *           */     public void setPropertyClass(java.lang.String value) {         this.propertyClass = value;     }      /**      * Gets the value of the defaultValue property.      *       * @return      *     possible object is      *     {@link java.lang.String }      *           */     public java.lang.String getDefaultValue() {         return defaultValue;     }      /**      * Sets the value of the defaultValue property.      *       * @param value      *     allowed object is      *     {@link java.lang.String }      *           */     public void setDefaultValue(java.lang.String value) {         this.defaultValue = value;     }      /**      * Gets the value of the suggestedValue property.      *       * @return      *     possible object is      *     {@link java.lang.String }      *           */     public java.lang.String getSuggestedValue() {         return suggestedValue;     }      /**      * Sets the value of the suggestedValue property.      *       * @param value      *     allowed object is      *     {@link java.lang.String }      *           */     public void setSuggestedValue(java.lang.String value) {         this.suggestedValue = value;     }      /**      * Gets the value of the propertyExtension property.      *       *       * This accessor method returns a reference to the live list,      * not a snapshot. Therefore any modification you make to the      * returned list will be present inside the JAXB object.      * This is why there is not a set method for the propertyExtension property.      *       *       * For example, to add a new item, do as follows:      *       *    getPropertyExtension().add(newItem);      *       *       *       *       * Objects of the following type(s) are allowed in the list      * {@link FacesPropertyExtension }      *       *       */     public List getPropertyExtension() {         if (propertyExtension == null) {             propertyExtension = new ArrayList();         }         return this.propertyExtension;     }      /**      * Gets the value of the id property.      *       * @return      *     possible object is      *     {@link java.lang.String }      *           */     public java.lang.String getId() {         return id;     }      /**      * Sets the value of the id property.      *       * @param value      *     allowed object is      *     {@link java.lang.String }      *           */     public void setId(java.lang.String value) {         this.id = value;     }  };data class;blob, long method;t;t;f;blob,  long method;data class;0;7288;https://github.com/apache/openejb/blob/f10c077ade927d73bdbd9ed4cc28b79f58a1cd66/openejb/container/openejb-jee/src/main/java/org/apache/openejb/jee/FacesProperty.java/#L70-L298;2;773;7288
780; 	{ 	    "message": "YES I found bad smells", 	    "detected_bad_smells": [ 	        "Long Method", 	        "Blob" 	    ] 	};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    public ClientListenerResponse doHandle(OdbcRequest req) {         if (!busyLock.enterBusy())             return new OdbcResponse(IgniteQueryErrorCode.UNKNOWN,                 "Failed to handle ODBC request because node is stopping: " + req);          if (actx != null)             AuthorizationContext.context(actx);          try {             switch (req.command()) {                 case QRY_EXEC:                     return executeQuery((OdbcQueryExecuteRequest)req);                  case QRY_EXEC_BATCH:                     return executeBatchQuery((OdbcQueryExecuteBatchRequest)req);                  case STREAMING_BATCH:                     return dispatchBatchOrdered((OdbcStreamingBatchRequest)req);                  case QRY_FETCH:                     return fetchQuery((OdbcQueryFetchRequest)req);                  case QRY_CLOSE:                     return closeQuery((OdbcQueryCloseRequest)req);                  case META_COLS:                     return getColumnsMeta((OdbcQueryGetColumnsMetaRequest)req);                  case META_TBLS:                     return getTablesMeta((OdbcQueryGetTablesMetaRequest)req);                  case META_PARAMS:                     return getParamsMeta((OdbcQueryGetParamsMetaRequest)req);                  case MORE_RESULTS:                     return moreResults((OdbcQueryMoreResultsRequest)req);             }              return new OdbcResponse(IgniteQueryErrorCode.UNKNOWN, "Unsupported ODBC request: " + req);         }         finally {             AuthorizationContext.clear();              busyLock.leaveBusy();         }     };long method;long method, blob;t;t;t; blob;;0;7455;https://github.com/apache/ignite/blob/7a7c407ea41477aae8508bfe871b4e9a67e1b277/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/odbc/OdbcRequestHandler.java/#L221-L266;2;780;7455
788;{"response": "YES I found bad smells", "detected_bad_smells": ["1. Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@DeferredContextBinding public class RoutesHealthCheckRepository implements CamelContextAware, HealthCheckRepository {     private final ConcurrentMap checks;     private Set blacklist;     private List> evaluators;     private ConcurrentMap>> evaluatorMap;     private volatile CamelContext context;      public RoutesHealthCheckRepository() {         this.checks = new ConcurrentHashMap<>();     }      @Override     public void setCamelContext(CamelContext camelContext) {         this.context = camelContext;     }      @Override     public CamelContext getCamelContext() {         return context;     }      public void setBlacklistedRoutes(Collection blacklistedRoutes) {         blacklistedRoutes.forEach(this::addBlacklistedRoute);     }      public void addBlacklistedRoute(String routeId) {         if (this.blacklist == null) {             this.blacklist = new HashSet<>();         }          this.blacklist.add(routeId);     }      public void setEvaluators(Collection> evaluators) {         evaluators.forEach(this::addEvaluator);     }      public void addEvaluator(PerformanceCounterEvaluator evaluator) {         if (this.evaluators == null) {             this.evaluators = new CopyOnWriteArrayList<>();         }          this.evaluators.add(evaluator);     }      public void setRoutesEvaluators(Map>> evaluators) {         evaluators.forEach(this::setRouteEvaluators);     }      public void setRouteEvaluators(String routeId, Collection> evaluators) {         evaluators.forEach(evaluator -> addRouteEvaluator(routeId, evaluator));     }      public void addRouteEvaluator(String routeId, PerformanceCounterEvaluator evaluator) {         if (this.evaluatorMap == null) {             this.evaluatorMap = new ConcurrentHashMap<>();         }          this.evaluatorMap.computeIfAbsent(routeId, id -> new CopyOnWriteArrayList<>()).add(evaluator);     }      public Stream> evaluators() {         return this.evaluators != null             ? this.evaluators.stream()             : Stream.empty();     }      public Stream> evaluators(String routeId) {         return this.evaluatorMap != null             ? evaluatorMap.getOrDefault(routeId, Collections.emptyList()).stream()             : Stream.empty();     }      @Override     public Stream stream() {         // This is not really efficient as getRoutes() creates a copy of the routes         // array for each invocation. It would be nice to have more stream oriented         // operation on CamelContext i.e.         //         // interface CamelContext {         //         //     Stream routes();         //         //     void forEachRoute(Consumer consumer);         // }         //         return this.context != null             ? this.context.getRoutes()                 .stream()                 .filter(route -> route.getId() != null)                 .filter(route -> isNotBlacklisted(route))                 .map(this::toRouteHealthCheck)             : Stream.empty();     }      // *****************************     // Helpers     // *****************************      private boolean isNotBlacklisted(Route route) {         return this.blacklist != null             ? !this.blacklist.contains(route.getId())             : true;     }      private HealthCheck toRouteHealthCheck(Route route) {         return checks.computeIfAbsent(             route,             r -> {                 HealthCheck check = new RouteHealthCheck(                     route,                     evaluatorMap != null                         ? evaluatorMap.getOrDefault(r.getId(), evaluators)                         : evaluators                 );                  check.getConfiguration().setEnabled(true);                  return check;             }         );     } };data class;1. blob;t;t;f;1. blob;data class;0;7512;https://github.com/apache/camel/blob/8a85a70643c4d6eec2d3abddeea44ecb06c2f486/core/camel-base/src/main/java/org/apache/camel/impl/health/RoutesHealthCheckRepository.java/#L38-L161;2;788;7512
789;   {     "message": "YES, I found bad smells",     "bad smells are": [       "1. Blob",       "2. Data Class"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    public static class DAOAttachment {         private final AttachmentId attachmentId;         private final BlobId blobId;         private final String type;         private final long size;          private DAOAttachment(AttachmentId attachmentId, BlobId blobId, String type, long size) {             this.attachmentId = attachmentId;             this.blobId = blobId;             this.type = type;             this.size = size;         }          public AttachmentId getAttachmentId() {             return attachmentId;         }          public BlobId getBlobId() {             return blobId;         }          public String getType() {             return type;         }          public long getSize() {             return size;         }          public Attachment toAttachment(byte[] data) {             return Attachment.builder()                 .attachmentId(attachmentId)                 .type(type)                 .bytes(data)                 .build();         }          @Override         public final boolean equals(Object o) {             if (o instanceof DAOAttachment) {                 DAOAttachment that = (DAOAttachment) o;                  return Objects.equals(this.size, that.size)                     && Objects.equals(this.attachmentId, that.attachmentId)                     && Objects.equals(this.blobId, that.blobId)                     && Objects.equals(this.type, that.type);             }             return false;         }          @Override         public final int hashCode() {             return Objects.hash(attachmentId, blobId, type, size);         }     };data class;1. blob, 2. data class;t;t;t;1. blob;;0;7520;https://github.com/apache/james-project/blob/fa24a096a5853459c3769a34ccc68feb91626bfa/mailbox/cassandra/src/main/java/org/apache/james/mailbox/cassandra/mail/CassandraAttachmentDAOV2.java/#L50-L104;2;789;7520
797;{   "input": {     "codeSmells": [       "Blob",       "Data Class",       "Feature Envy",       "Long Method"     ],     "javaCode": "// Java code goes here"   },   "output": {     "message": "YES I found bad smells",     "detectedCodeSmells": [       {         "blob": false,         "dataClass": false,         "featureEnvy": true,         "longMethod": true       }     ]   } };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
;long method;message: yes i found bad smells, detectedcodesmells: blob: false, dataclass: false, featureenvy: true, longmethod: true;t;t;f;message: yes i found bad smells,  detectedcodesmells: blob: false,  dataclass: false,  featureenvy: true,  longmethod: true;long method;0;7568;https://github.com/apache/kylin/blob/6ee0212af9d5b50096850c9cb76031b7cdd67402/core-common/src/main/java/org/apache/kylin/common/persistence/JDBCResourceStore.java/#L566-L591;2;797;7568
809; {"message": "YES I found bad smells", "bad smells are": ["Blob", "Data Class", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public interface IContentEmitter {  	String getOutputFormat( );  	void initialize( IEmitterServices service ) throws BirtException;  	void start( IReportContent report ) throws BirtException;  	void end( IReportContent report ) throws BirtException;  	/** 	 * start a page 	 *  	 * @param page 	 */ 	void startPage( IPageContent page ) throws BirtException; 	 	/** 	 * page end 	 *  	 * @param page 	 */ 	void endPage( IPageContent page ) throws BirtException;  	/** 	 * table started 	 *  	 * @param table 	 */ 	void startTable( ITableContent table ) throws BirtException;  	/** 	 * table end 	 */ 	void endTable( ITableContent table ) throws BirtException;  	void startTableBand( ITableBandContent band ) throws BirtException;  	void endTableBand( ITableBandContent band ) throws BirtException;  	void startRow( IRowContent row ) throws BirtException;  	void endRow( IRowContent row ) throws BirtException;  	void startCell( ICellContent cell ) throws BirtException;  	void endCell( ICellContent cell ) throws BirtException; 	 	void startList( IListContent list ) throws BirtException;  	void endList( IListContent list ) throws BirtException;  	void startListBand( IListBandContent listBand ) throws BirtException;  	void endListBand( IListBandContent listBand ) throws BirtException;  	void startContainer( IContainerContent container ) throws BirtException;  	void endContainer( IContainerContent container ) throws BirtException;  	void startText( ITextContent text ) throws BirtException;  	void startData( IDataContent data ) throws BirtException;  	void startLabel( ILabelContent label ) throws BirtException; 	 	void startAutoText ( IAutoTextContent autoText ) throws BirtException;  	void startForeign( IForeignContent foreign ) throws BirtException;  	void startImage( IImageContent image ) throws BirtException;  	void startContent( IContent content ) throws BirtException; 	void endContent( IContent content) throws BirtException; 	 	void startGroup( IGroupContent group ) throws BirtException;  	void endGroup( IGroupContent group ) throws BirtException;  	void startTableGroup( ITableGroupContent group ) throws BirtException;  	void endTableGroup( ITableGroupContent group ) throws BirtException;  	void startListGroup( IListGroupContent group ) throws BirtException;  	void endListGroup( IListGroupContent group ) throws BirtException; };data class;blob, data class, long method;t;t;t;blob,  long method;;0;7647;https://github.com/eclipse/birt/blob/f89264810347de98702db45386a822aabc0fadbf/engine/org.eclipse.birt.report.engine/src/org/eclipse/birt/report/engine/emitter/IContentEmitter.java/#L39-L126;2;809;7647
839;     {         "message": "YES I found bad smells",         "bad smells are": [             "Long Method",             "Blob"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    @Override     public Object getValue(final String columnLabel, final Class type) throws SQLException {         Object result;         if (Object.class == type) {             result = decrypt(columnLabel, resultSet.getObject(columnLabel));         } else if (boolean.class == type) {             result = decrypt(columnLabel, resultSet.getBoolean(columnLabel));         } else if (byte.class == type) {             result = decrypt(columnLabel, resultSet.getByte(columnLabel));         } else if (short.class == type) {             result = decrypt(columnLabel, resultSet.getShort(columnLabel));         } else if (int.class == type) {             result = decrypt(columnLabel, resultSet.getInt(columnLabel));         } else if (long.class == type) {             result = decrypt(columnLabel, resultSet.getLong(columnLabel));         } else if (float.class == type) {             result = decrypt(columnLabel, resultSet.getFloat(columnLabel));         } else if (double.class == type) {             result = decrypt(columnLabel, resultSet.getDouble(columnLabel));         } else if (String.class == type) {             result = decrypt(columnLabel, resultSet.getString(columnLabel));         } else if (BigDecimal.class == type) {             result = decrypt(columnLabel, resultSet.getBigDecimal(columnLabel));         } else if (byte[].class == type) {             result = resultSet.getBytes(columnLabel);         } else if (Date.class == type) {             result = resultSet.getDate(columnLabel);         } else if (Time.class == type) {             result = resultSet.getTime(columnLabel);         } else if (Timestamp.class == type) {             result = resultSet.getTimestamp(columnLabel);         } else if (URL.class == type) {             result = resultSet.getURL(columnLabel);         } else if (Blob.class == type) {             result = resultSet.getBlob(columnLabel);         } else if (Clob.class == type) {             result = resultSet.getClob(columnLabel);         } else if (SQLXML.class == type) {             result = resultSet.getSQLXML(columnLabel);         } else if (Reader.class == type) {             result = resultSet.getCharacterStream(columnLabel);         } else {             result = decrypt(columnLabel, resultSet.getObject(columnLabel));         }         return result;     };feature envy;long method, blob;t;t;f;long method,  blob;feature envy;0;7778;https://github.com/apache/incubator-shardingsphere/blob/c5cf1d15b02f3a0fb3bda4f15d5f0b3779eac7ba/sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/core/execute/sql/execute/result/StreamQueryResult.java/#L117-L162;2;839;7778
842;{"answer":"YES I found bad smells","bad smells are":["Blob","Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class PasswordPolicyDetailsPage implements IDetailsPage {     /** The associated Master Details Block */     private PasswordPoliciesMasterDetailsBlock masterDetailsBlock;      /** The Managed Form */     private IManagedForm mform;      /** The input password policy */     private PasswordPolicyBean passwordPolicy;      // UI Widgets     private Button enabledCheckbox;     private Text idText;     private Text descriptionText;     private ComboViewer checkQualityComboViewer;     private Text validatorText;     private Button minimumLengthCheckbox;     private Text minimumLengthText;     private Button maximumLengthCheckbox;     private Text maximumLengthText;     private Text minimumAgeText;     private Text maximumAgeText;     private Button expireWarningCheckbox;     private Text expireWarningText;     private Button graceAuthenticationLimitCheckbox;     private Text graceAuthenticationLimitText;     private Button graceExpireCheckbox;     private Text graceExpireText;     private Button mustChangeCheckbox;     private Button allowUserChangeCheckbox;     private Button safeModifyCheckbox;     private Button lockoutCheckbox;     private Text lockoutDurationText;     private Text maxFailureText;     private Text failureCountIntervalText;     private Button inHistoryCheckbox;     private Text inHistoryText;     private Button maxIdleCheckbox;     private Text maxIdleText;     private Text minimumDelayText;     private Text maximumDelayText;      // Listeners     /** The Text Modify Listener */     private ModifyListener textModifyListener = new ModifyListener()     {         public void modifyText( ModifyEvent e )         {             commit( true );             masterDetailsBlock.setEditorDirty();         }     };      /** The button Selection Listener */     private SelectionListener buttonSelectionListener = new SelectionAdapter()     {         public void widgetSelected( SelectionEvent e )         {             commit( true );             masterDetailsBlock.setEditorDirty();         }     };      /** The viewer Selection Changed Listener */     private ISelectionChangedListener viewerSelectionChangedListener = new ISelectionChangedListener()     {         public void selectionChanged( SelectionChangedEvent event )         {             commit( true );             masterDetailsBlock.setEditorDirty();         }     };      private VerifyListener integerVerifyListener = new VerifyListener()     {         public void verifyText( VerifyEvent e )         {             if ( !e.text.matches( "[0-9]*" ) ) //$NON-NLS-1$             {                 e.doit = false;             }         }     };      private ISelectionChangedListener checkQualityComboViewerSelectionChangedListener = new ISelectionChangedListener()     {         public void selectionChanged( SelectionChangedEvent event )         {             StructuredSelection selection = ( StructuredSelection ) checkQualityComboViewer.getSelection();              if ( !selection.isEmpty() )             {                 CheckQuality checkQuality = ( CheckQuality ) selection.getFirstElement();                  if ( checkQuality == CheckQuality.DISABLED )                 {                     minimumLengthCheckbox.setEnabled( false );                     minimumLengthText.setEnabled( false );                     maximumLengthCheckbox.setEnabled( false );                     maximumLengthText.setEnabled( false );                 }                 else                 {                     int minimumLength = 0;                     int maximumLength = 0;                      try                     {                         minimumLength = Integer.parseInt( minimumLengthText.getText() );                     }                     catch ( NumberFormatException e )                     {                         // Nothing to do.                     }                      try                     {                         maximumLength = Integer.parseInt( maximumLengthText.getText() );                     }                     catch ( NumberFormatException e )                     {                         // Nothing to do.                     }                      minimumLengthCheckbox.setEnabled( true );                     minimumLengthText.setEnabled( minimumLength != 0 );                     maximumLengthCheckbox.setEnabled( true );                     maximumLengthText.setEnabled( maximumLength != 0 );                 }             }         }     };      private SelectionListener minimumLengthCheckboxSelectionListener = new SelectionAdapter()     {         public void widgetSelected( SelectionEvent e )         {             minimumLengthText.setEnabled( minimumLengthCheckbox.getSelection() );         }     };      private SelectionListener maximumLengthCheckboxSelectionListener = new SelectionAdapter()     {         public void widgetSelected( SelectionEvent e )         {             maximumLengthText.setEnabled( maximumLengthCheckbox.getSelection() );         }     };      private SelectionListener expireWarningCheckboxSelectionListener = new SelectionAdapter()     {         public void widgetSelected( SelectionEvent e )         {             expireWarningText.setEnabled( expireWarningCheckbox.getSelection() );         }     };      private SelectionListener graceAuthenticationLimitCheckboxSelectionListener = new SelectionAdapter()     {         public void widgetSelected( SelectionEvent e )         {             graceAuthenticationLimitText.setEnabled( graceAuthenticationLimitCheckbox.getSelection() );         }     };      private SelectionListener graceExpireCheckboxSelectionListener = new SelectionAdapter()     {         public void widgetSelected( SelectionEvent e )         {             graceExpireText.setEnabled( graceExpireCheckbox.getSelection() );         }     };      private SelectionListener maxIdleCheckboxSelectionListener = new SelectionAdapter()     {         public void widgetSelected( SelectionEvent e )         {             maxIdleText.setEnabled( maxIdleCheckbox.getSelection() );         }     };      private SelectionListener inHistoryCheckboxSelectionListener = new SelectionAdapter()     {         public void widgetSelected( SelectionEvent e )         {             inHistoryText.setEnabled( inHistoryCheckbox.getSelection() );         }     };       /**      * Creates a new instance of PartitionDetailsPage.      *      * @param pmdb      *      the associated Master Details Block      */     public PasswordPolicyDetailsPage( PasswordPoliciesMasterDetailsBlock pmdb )     {         masterDetailsBlock = pmdb;     }       /**      * {@inheritDoc}      */     public void createContents( Composite parent )     {         FormToolkit toolkit = mform.getToolkit();         TableWrapLayout layout = new TableWrapLayout();         layout.topMargin = 5;         layout.leftMargin = 5;         layout.rightMargin = 2;         layout.bottomMargin = 2;         parent.setLayout( layout );          // Depending on if the PP is enabled or disabled, we will         // expose the configuration                  createDetailsSection( toolkit, parent );         createQualitySection( toolkit, parent );         createExpirationSection( toolkit, parent );         createOptionsSection( toolkit, parent );         createLockoutSection( toolkit, parent );     }       /**      * Creates the Details Section      *      * @param parent      *      the parent composite      * @param toolkit      *      the toolkit to use      */     private void createDetailsSection( FormToolkit toolkit, Composite parent )     {         // Creation of the section         Section section = toolkit.createSection( parent, Section.DESCRIPTION | Section.TITLE_BAR );         section.marginWidth = 10;         section.setText( "Password Policy Details" );         section.setDescription( "Set the properties of the password policy." );         TableWrapData td = new TableWrapData( TableWrapData.FILL, TableWrapData.TOP );         td.grabHorizontal = true;         section.setLayoutData( td );         Composite client = toolkit.createComposite( section );         toolkit.paintBordersFor( client );                  GridLayout glayout = new GridLayout( 2, false );         client.setLayout( glayout );         section.setClient( client );          // Enabled Checkbox         enabledCheckbox = toolkit.createButton( client, "Enabled", SWT.CHECK );         enabledCheckbox.setLayoutData( new GridData( SWT.FILL, SWT.NONE, true, false, 2, 1 ) );          // ID Text         toolkit.createLabel( client, "ID:" );         idText = toolkit.createText( client, "" );         idText.setLayoutData( new GridData( SWT.FILL, SWT.NONE, true, false ) );          // Description Text         toolkit.createLabel( client, "Description:" );         descriptionText = toolkit.createText( client, "" );         descriptionText.setLayoutData( new GridData( SWT.FILL, SWT.NONE, true, false ) );     }       /**      * Creates the Quality section.      *      * @param toolkit the toolkit to use      * @param parent the parent composite      */     private void createQualitySection( FormToolkit toolkit, Composite parent )     {         // Creation of the section         Section section = toolkit.createSection( parent, Section.TITLE_BAR );         section.marginWidth = 10;         section.setText( "Quality" );         TableWrapData td = new TableWrapData( TableWrapData.FILL, TableWrapData.TOP );         td.grabHorizontal = true;         section.setLayoutData( td );         Composite composite = toolkit.createComposite( section );         toolkit.paintBordersFor( composite );         GridLayout gridLayout = new GridLayout( 2, false );         gridLayout.marginHeight = gridLayout.marginWidth = 0;         composite.setLayout( gridLayout );         section.setClient( composite );          // Check Quality (pwdCheckQuality)         toolkit.createLabel( composite, "Check Quality:" );         checkQualityComboViewer = new ComboViewer( composite );         checkQualityComboViewer.setContentProvider( new ArrayContentProvider() );         checkQualityComboViewer.setInput( new CheckQuality[]             { CheckQuality.DISABLED, CheckQuality.RELAXED, CheckQuality.STRICT } );         checkQualityComboViewer.getControl().setLayoutData(             new GridData( SWT.FILL, SWT.CENTER, true, false ) );          // Validator         toolkit.createLabel( composite, "Validator:" );         validatorText = toolkit.createText( composite, "" );         validatorText.setLayoutData( new GridData( SWT.FILL, SWT.CENTER, true, false ) );          // Minimum Length (pwdMinLength)         minimumLengthCheckbox = toolkit.createButton( composite, "Enable Mimimum Length", SWT.CHECK );         minimumLengthCheckbox.setLayoutData( new GridData( SWT.BEGINNING, SWT.CENTER, false, false, 2, 1 ) );         Composite mimimumLengthRadioIndentComposite = createRadioIndentComposite( toolkit, composite,             "Number of characters:" );         minimumLengthText = toolkit.createText( mimimumLengthRadioIndentComposite, "" );         minimumLengthText.setLayoutData( new GridData( SWT.FILL, SWT.CENTER, true, false ) );          // Maximum Length (pwdMaxLength)         maximumLengthCheckbox = toolkit.createButton( composite, "Enable Maximum Length", SWT.CHECK );         maximumLengthCheckbox.setLayoutData( new GridData( SWT.BEGINNING, SWT.CENTER, false, false, 2, 1 ) );         Composite maximumLengthRadioIndentComposite = createRadioIndentComposite( toolkit, composite,             "Number of characters:" );         maximumLengthText = toolkit.createText( maximumLengthRadioIndentComposite, "" );         maximumLengthText.setLayoutData( new GridData( SWT.FILL, SWT.CENTER, true, false ) );     }       /**      * Creates the Expiration section.      *      * @param toolkit the toolkit to use      * @param parent the parent composite      */     private void createExpirationSection( FormToolkit toolkit, Composite parent )     {         // Creation of the section         Section section = toolkit.createSection( parent, Section.TITLE_BAR );         section.marginWidth = 10;         section.setText( "Expiration" );         TableWrapData td = new TableWrapData( TableWrapData.FILL, TableWrapData.TOP );         td.grabHorizontal = true;         section.setLayoutData( td );         Composite composite = toolkit.createComposite( section );         toolkit.paintBordersFor( composite );         GridLayout gridLayout = new GridLayout( 2, false );         gridLayout.marginHeight = gridLayout.marginWidth = 0;         composite.setLayout( gridLayout );         section.setClient( composite );          // Minimum Age (pwdMinAge)         toolkit.createLabel( composite, "Mimimum Age (seconds):" );         minimumAgeText = toolkit.createText( composite, "" );         minimumAgeText.setLayoutData( new GridData( SWT.FILL, SWT.CENTER, true, false ) );          // Maximum Age (pwdMaxAge)         toolkit.createLabel( composite, "Maximum Age (seconds):" );         maximumAgeText = toolkit.createText( composite, "" );         maximumAgeText.setLayoutData( new GridData( SWT.FILL, SWT.CENTER, true, false ) );          // Expire Warning (pwdExpireWarning)         expireWarningCheckbox = toolkit.createButton( composite, "Enable Expire Warning", SWT.CHECK );         expireWarningCheckbox.setLayoutData( new GridData( SWT.BEGINNING, SWT.CENTER, false, false, 3, 1 ) );         Composite expireWarningRadioIndentComposite = createRadioIndentComposite( toolkit, composite,             "Number of seconds:" );         expireWarningText = toolkit.createText( expireWarningRadioIndentComposite, "" );         expireWarningText.setLayoutData( new GridData( SWT.FILL, SWT.CENTER, true, false ) );          // Grace Authentication Limit (pwdGraceAuthNLimit)         graceAuthenticationLimitCheckbox = toolkit.createButton( composite, "Enable Grace Authentication Limit",             SWT.CHECK );         graceAuthenticationLimitCheckbox.setLayoutData( new GridData( SWT.BEGINNING, SWT.CENTER, false, false, 3, 1 ) );         Composite graceAuthenticationLimitRadioIndentComposite = createRadioIndentComposite( toolkit, composite,             "Number of times:" );         graceAuthenticationLimitText = toolkit.createText( graceAuthenticationLimitRadioIndentComposite, "" );         graceAuthenticationLimitText.setLayoutData( new GridData( SWT.FILL, SWT.CENTER, true, false ) );          // Grace Expire (pwdGraceExpire)         graceExpireCheckbox = toolkit.createButton( composite, "Enable Grace Expire", SWT.CHECK );         graceExpireCheckbox.setLayoutData( new GridData( SWT.BEGINNING, SWT.CENTER, false, false, 3, 1 ) );         Composite graceExpireRadioIndentComposite = createRadioIndentComposite( toolkit, composite,             "Interval (seconds):" );         graceExpireText = toolkit.createText( graceExpireRadioIndentComposite, "" );         graceExpireText.setLayoutData( new GridData( SWT.FILL, SWT.CENTER, true, false ) );     }       /**      * Creates the Options section.      *      * @param toolkit the toolkit to use      * @param parent the parent composite      */     private void createOptionsSection( FormToolkit toolkit, Composite parent )     {         // Creation of the section         Section section = toolkit.createSection( parent, Section.TITLE_BAR );         section.marginWidth = 10;         section.setText( "Options" );         TableWrapData td = new TableWrapData( TableWrapData.FILL, TableWrapData.TOP );         td.grabHorizontal = true;         section.setLayoutData( td );         Composite composite = toolkit.createComposite( section );         toolkit.paintBordersFor( composite );         GridLayout gridLayout = new GridLayout( 2, false );         gridLayout.marginHeight = gridLayout.marginWidth = 0;         composite.setLayout( gridLayout );         section.setClient( composite );          // Must Change (pwdMustChange)         mustChangeCheckbox = toolkit.createButton( composite, "Enable Must Change", SWT.CHECK );         mustChangeCheckbox.setLayoutData( new GridData( SWT.BEGINNING, SWT.CENTER, false, false, 2, 1 ) );          // Allow User Change (pwdAllowUserChange)         allowUserChangeCheckbox = toolkit.createButton( composite, "Enable Allow User Change", SWT.CHECK );         allowUserChangeCheckbox.setLayoutData( new GridData( SWT.BEGINNING, SWT.CENTER, false, false, 2, 1 ) );          // Safe Modify (pwdSafeModify)         safeModifyCheckbox = toolkit.createButton( composite, "Enable Safe Modify", SWT.CHECK );         safeModifyCheckbox.setLayoutData( new GridData( SWT.BEGINNING, SWT.CENTER, false, false, 2, 1 ) );     }       /**      * Creates the Lockout section.      *      * @param toolkit the toolkit to use      * @param parent the parent composite      */     private void createLockoutSection( FormToolkit toolkit, Composite parent )     {         // Creation of the section         Section section = toolkit.createSection( parent, Section.TITLE_BAR );         section.marginWidth = 10;         section.setText( "Lockout" );         TableWrapData td = new TableWrapData( TableWrapData.FILL, TableWrapData.TOP );         td.grabHorizontal = true;         section.setLayoutData( td );         Composite composite = toolkit.createComposite( section );         toolkit.paintBordersFor( composite );         GridLayout gridLayout = new GridLayout( 2, false );         gridLayout.marginHeight = gridLayout.marginWidth = 0;         composite.setLayout( gridLayout );         section.setClient( composite );          // Lockout (pwdLockout)         lockoutCheckbox = toolkit.createButton( composite, "Enable Lockout", SWT.CHECK );         lockoutCheckbox.setLayoutData( new GridData( SWT.BEGINNING, SWT.CENTER, false, false, 2, 1 ) );          // Lockout Duration (pwdLockoutDuration)         toolkit.createLabel( composite, "Lockout Duration (seconds):" );         lockoutDurationText = toolkit.createText( composite, "" );         lockoutDurationText.setLayoutData( new GridData( SWT.FILL, SWT.CENTER, true, false ) );          // Max Failure (pwdMaxFailure)         toolkit.createLabel( composite, "Maximum Consecutive Failures (count):" );         maxFailureText = toolkit.createText( composite, "" );         maxFailureText.setLayoutData( new GridData( SWT.FILL, SWT.CENTER, true, false ) );          // Failure Count Interval (pwdFailureCountInterval)         toolkit.createLabel( composite, "Failure Count Interval (seconds):" );         failureCountIntervalText = toolkit.createText( composite, "" );         failureCountIntervalText.setLayoutData( new GridData( SWT.FILL, SWT.CENTER, true, false ) );          // Max Idle (pwdMaxIdle)         maxIdleCheckbox = toolkit.createButton( composite, "Enable Maximum Idle", SWT.CHECK );         maxIdleCheckbox.setLayoutData( new GridData( SWT.BEGINNING, SWT.CENTER, false, false, 3, 1 ) );         Composite maxIdleCheckboxRadioIndentComposite = createRadioIndentComposite( toolkit, composite,             "Interval (seconds):" );         maxIdleText = toolkit.createText( maxIdleCheckboxRadioIndentComposite, "" );         maxIdleText.setLayoutData( new GridData( SWT.FILL, SWT.CENTER, true, false ) );          // In History (pwdInHistory)         inHistoryCheckbox = toolkit.createButton( composite, "Enable In History", SWT.CHECK );         inHistoryCheckbox.setLayoutData( new GridData( SWT.BEGINNING, SWT.CENTER, false, false, 2, 1 ) );         Composite inHistoryRadioIndentComposite = createRadioIndentComposite( toolkit, composite,             "Used passwords stored in history:" );         inHistoryText = toolkit.createText( inHistoryRadioIndentComposite, "" );         inHistoryText.setLayoutData( new GridData( SWT.FILL, SWT.CENTER, true, false ) );                  // Minimum delay (pwdMinDelay)         toolkit.createLabel( composite, "Mimimum Delay (seconds):" );         minimumDelayText = toolkit.createText( composite, "" );         minimumDelayText.setLayoutData( new GridData( SWT.FILL, SWT.CENTER, true, false ) );          // Maximum Delay (pwdMaxDelay)         toolkit.createLabel( composite, "Maximum Delay (seconds):" );         maximumDelayText = toolkit.createText( composite, "" );         maximumDelayText.setLayoutData( new GridData( SWT.FILL, SWT.CENTER, true, false ) );     }       /**      * Creates a radio indented composite.      *      * @param toolkit the toolkit      * @param parent the parent composite      * @return a radio indented composite      */     private Composite createRadioIndentComposite( FormToolkit toolkit, Composite parent, String text )     {         Composite composite = toolkit.createComposite( parent );         GridLayout gridLayout = new GridLayout( 3, false );         gridLayout.marginHeight = gridLayout.marginWidth = 0;         composite.setLayout( gridLayout );         composite.setLayoutData( new GridData( SWT.FILL, SWT.CENTER, true, false, 2, 1 ) );          toolkit.createLabel( composite, "   " );         toolkit.createLabel( composite, text );          return composite;     }       /**      * Adds listeners to UI fields.      */     private void addListeners()     {         enabledCheckbox.addSelectionListener( buttonSelectionListener );         idText.addModifyListener( textModifyListener );         descriptionText.addModifyListener( textModifyListener );         checkQualityComboViewer.addSelectionChangedListener( viewerSelectionChangedListener );         checkQualityComboViewer.addSelectionChangedListener( checkQualityComboViewerSelectionChangedListener );         validatorText.addModifyListener( textModifyListener );         minimumLengthCheckbox.addSelectionListener( buttonSelectionListener );         minimumLengthCheckbox.addSelectionListener( minimumLengthCheckboxSelectionListener );         minimumLengthText.addModifyListener( textModifyListener );         minimumLengthText.addVerifyListener( integerVerifyListener );         maximumLengthCheckbox.addSelectionListener( buttonSelectionListener );         maximumLengthCheckbox.addSelectionListener( maximumLengthCheckboxSelectionListener );         maximumLengthText.addModifyListener( textModifyListener );         maximumLengthText.addVerifyListener( integerVerifyListener );         minimumAgeText.addModifyListener( textModifyListener );         minimumAgeText.addVerifyListener( integerVerifyListener );         maximumAgeText.addModifyListener( textModifyListener );         maximumAgeText.addVerifyListener( integerVerifyListener );         expireWarningCheckbox.addSelectionListener( buttonSelectionListener );         expireWarningCheckbox.addSelectionListener( expireWarningCheckboxSelectionListener );         expireWarningText.addModifyListener( textModifyListener );         expireWarningText.addVerifyListener( integerVerifyListener );         graceAuthenticationLimitCheckbox.addSelectionListener( buttonSelectionListener );         graceAuthenticationLimitCheckbox.addSelectionListener( graceAuthenticationLimitCheckboxSelectionListener );         graceAuthenticationLimitText.addModifyListener( textModifyListener );         graceAuthenticationLimitText.addVerifyListener( integerVerifyListener );         graceExpireCheckbox.addSelectionListener( buttonSelectionListener );         graceExpireCheckbox.addSelectionListener( graceExpireCheckboxSelectionListener );         graceExpireText.addModifyListener( textModifyListener );         graceExpireText.addVerifyListener( integerVerifyListener );         mustChangeCheckbox.addSelectionListener( buttonSelectionListener );         allowUserChangeCheckbox.addSelectionListener( buttonSelectionListener );         safeModifyCheckbox.addSelectionListener( buttonSelectionListener );         lockoutCheckbox.addSelectionListener( buttonSelectionListener );         lockoutDurationText.addModifyListener( textModifyListener );         lockoutDurationText.addVerifyListener( integerVerifyListener );         maxFailureText.addModifyListener( textModifyListener );         maxFailureText.addVerifyListener( integerVerifyListener );         failureCountIntervalText.addModifyListener( textModifyListener );         failureCountIntervalText.addVerifyListener( integerVerifyListener );         maxIdleCheckbox.addSelectionListener( buttonSelectionListener );         maxIdleCheckbox.addSelectionListener( maxIdleCheckboxSelectionListener );         maxIdleText.addModifyListener( textModifyListener );         maxIdleText.addVerifyListener( integerVerifyListener );         inHistoryCheckbox.addSelectionListener( buttonSelectionListener );         inHistoryCheckbox.addSelectionListener( inHistoryCheckboxSelectionListener );         inHistoryText.addModifyListener( textModifyListener );         inHistoryText.addVerifyListener( integerVerifyListener );         minimumDelayText.addModifyListener( textModifyListener );         minimumDelayText.addVerifyListener( integerVerifyListener );         maximumDelayText.addModifyListener( textModifyListener );         maximumDelayText.addVerifyListener( integerVerifyListener );     }       /**      * Removes listeners to UI fields.      */     private void removeListeners()     {         enabledCheckbox.removeSelectionListener( buttonSelectionListener );         idText.removeModifyListener( textModifyListener );         descriptionText.removeModifyListener( textModifyListener );         checkQualityComboViewer.removeSelectionChangedListener( viewerSelectionChangedListener );         checkQualityComboViewer.removeSelectionChangedListener( checkQualityComboViewerSelectionChangedListener );         validatorText.removeModifyListener( textModifyListener );         minimumLengthCheckbox.removeSelectionListener( buttonSelectionListener );         minimumLengthCheckbox.removeSelectionListener( minimumLengthCheckboxSelectionListener );         minimumLengthText.removeModifyListener( textModifyListener );         minimumLengthText.removeVerifyListener( integerVerifyListener );         maximumLengthCheckbox.removeSelectionListener( buttonSelectionListener );         maximumLengthCheckbox.removeSelectionListener( maximumLengthCheckboxSelectionListener );         maximumLengthText.removeModifyListener( textModifyListener );         maximumLengthText.removeVerifyListener( integerVerifyListener );         minimumAgeText.removeModifyListener( textModifyListener );         minimumAgeText.removeVerifyListener( integerVerifyListener );         maximumAgeText.removeModifyListener( textModifyListener );         maximumAgeText.removeVerifyListener( integerVerifyListener );         expireWarningCheckbox.removeSelectionListener( buttonSelectionListener );         expireWarningCheckbox.removeSelectionListener( expireWarningCheckboxSelectionListener );         expireWarningText.removeModifyListener( textModifyListener );         expireWarningText.removeVerifyListener( integerVerifyListener );         graceAuthenticationLimitCheckbox.removeSelectionListener( buttonSelectionListener );         graceAuthenticationLimitCheckbox.removeSelectionListener( graceAuthenticationLimitCheckboxSelectionListener );         graceAuthenticationLimitText.removeModifyListener( textModifyListener );         graceAuthenticationLimitText.removeVerifyListener( integerVerifyListener );         graceExpireCheckbox.removeSelectionListener( buttonSelectionListener );         graceExpireCheckbox.removeSelectionListener( graceExpireCheckboxSelectionListener );         graceExpireText.removeModifyListener( textModifyListener );         graceExpireText.removeVerifyListener( integerVerifyListener );         mustChangeCheckbox.removeSelectionListener( buttonSelectionListener );         allowUserChangeCheckbox.removeSelectionListener( buttonSelectionListener );         safeModifyCheckbox.removeSelectionListener( buttonSelectionListener );         lockoutCheckbox.removeSelectionListener( buttonSelectionListener );         lockoutDurationText.removeModifyListener( textModifyListener );         lockoutDurationText.removeVerifyListener( integerVerifyListener );         maxFailureText.removeModifyListener( textModifyListener );         maxFailureText.removeVerifyListener( integerVerifyListener );         failureCountIntervalText.removeModifyListener( textModifyListener );         failureCountIntervalText.removeVerifyListener( integerVerifyListener );         maxIdleCheckbox.removeSelectionListener( buttonSelectionListener );         maxIdleCheckbox.removeSelectionListener( maxIdleCheckboxSelectionListener );         maxIdleText.removeModifyListener( textModifyListener );         maxIdleText.removeVerifyListener( integerVerifyListener );         inHistoryCheckbox.removeSelectionListener( buttonSelectionListener );         inHistoryCheckbox.removeSelectionListener( inHistoryCheckboxSelectionListener );         inHistoryText.removeModifyListener( textModifyListener );         inHistoryText.removeVerifyListener( integerVerifyListener );         minimumDelayText.removeModifyListener( textModifyListener );         minimumDelayText.removeVerifyListener( integerVerifyListener );         maximumDelayText.removeModifyListener( textModifyListener );         maximumDelayText.removeVerifyListener( integerVerifyListener );     }       /**      * {@inheritDoc}      */     public void selectionChanged( IFormPart part, ISelection selection )     {         IStructuredSelection ssel = ( IStructuredSelection ) selection;         if ( ssel.size() == 1 )         {             passwordPolicy = ( PasswordPolicyBean ) ssel.getFirstElement();         }         else         {             passwordPolicy = null;         }         refresh();     }       /**      * {@inheritDoc}      */     public void commit( boolean onSave )     {         if ( passwordPolicy != null )         {             // Enabled             passwordPolicy.setEnabled( enabledCheckbox.getSelection() );              // ID             passwordPolicy.setPwdId( ServerConfigurationEditorUtils.checkEmptyString( idText.getText() ) );              // Description             passwordPolicy                 .setDescription( ServerConfigurationEditorUtils.checkEmptyString( descriptionText.getText() ) );              // Check Quality             passwordPolicy.setPwdCheckQuality( getPwdCheckQuality() );              // Validator             passwordPolicy                 .setPwdValidator( ServerConfigurationEditorUtils.checkEmptyString( validatorText.getText() ) );              // Miminum Length             if ( minimumLengthCheckbox.getSelection() )             {                 try                 {                     passwordPolicy.setPwdMinLength( Integer.parseInt( minimumLengthText.getText() ) );                 }                 catch ( NumberFormatException e )                 {                     passwordPolicy.setPwdMinLength( 0 );                 }             }             else             {                 passwordPolicy.setPwdMinLength( 0 );             }              // Maximum Length             if ( maximumLengthCheckbox.getSelection() )             {                 try                 {                     passwordPolicy.setPwdMaxLength( Integer.parseInt( maximumLengthText.getText() ) );                 }                 catch ( NumberFormatException e )                 {                     passwordPolicy.setPwdMaxLength( 0 );                 }             }             else             {                 passwordPolicy.setPwdMaxLength( 0 );             }              // Minimum Age             try             {                 passwordPolicy.setPwdMinAge( Integer.parseInt( minimumAgeText.getText() ) );             }             catch ( NumberFormatException e )             {                 passwordPolicy.setPwdMinAge( 0 );             }              // Maximum Age             try             {                 passwordPolicy.setPwdMaxAge( Integer.parseInt( maximumAgeText.getText() ) );             }             catch ( NumberFormatException e )             {                 passwordPolicy.setPwdMaxAge( 0 );             }              // Expire Warning             if ( expireWarningCheckbox.getSelection() )             {                 try                 {                     passwordPolicy.setPwdExpireWarning( Integer.parseInt( expireWarningText.getText() ) );                 }                 catch ( NumberFormatException e )                 {                     passwordPolicy.setPwdExpireWarning( 0 );                 }             }             else             {                 passwordPolicy.setPwdExpireWarning( 0 );             }              // Grace Authentication Limit             if ( graceAuthenticationLimitCheckbox.getSelection() )             {                 try                 {                     passwordPolicy.setPwdGraceAuthNLimit( Integer.parseInt( graceAuthenticationLimitText.getText() ) );                 }                 catch ( NumberFormatException e )                 {                     passwordPolicy.setPwdGraceAuthNLimit( 0 );                 }             }             else             {                 passwordPolicy.setPwdGraceAuthNLimit( 0 );             }              // Grace Expire             if ( graceExpireCheckbox.getSelection() )             {                 try                 {                     passwordPolicy.setPwdGraceExpire( Integer.parseInt( graceExpireText.getText() ) );                 }                 catch ( NumberFormatException e )                 {                     passwordPolicy.setPwdGraceExpire( 0 );                 }             }             else             {                 passwordPolicy.setPwdGraceExpire( 0 );             }              // Must Change             passwordPolicy.setPwdMustChange( mustChangeCheckbox.getSelection() );              // Allow User Change             passwordPolicy.setPwdAllowUserChange( allowUserChangeCheckbox.getSelection() );              // Safe Modify             passwordPolicy.setPwdSafeModify( safeModifyCheckbox.getSelection() );              // Lockout             passwordPolicy.setPwdLockout( lockoutCheckbox.getSelection() );              // Lockout Duration             try             {                 passwordPolicy.setPwdLockoutDuration( Integer.parseInt( lockoutDurationText.getText() ) );             }             catch ( NumberFormatException e )             {                 passwordPolicy.setPwdLockoutDuration( 0 );             }              // Max Failure             try             {                 passwordPolicy.setPwdMaxFailure( Integer.parseInt( maxFailureText.getText() ) );             }             catch ( NumberFormatException e )             {                 passwordPolicy.setPwdMaxFailure( 0 );             }              // Failure Count Interval             try             {                 passwordPolicy.setPwdFailureCountInterval( Integer.parseInt( failureCountIntervalText.getText() ) );             }             catch ( NumberFormatException e )             {                 passwordPolicy.setPwdFailureCountInterval( 0 );             }              // Max Idle             if ( maxIdleCheckbox.getSelection() )             {                 try                 {                     passwordPolicy.setPwdMaxIdle( Integer.parseInt( maxIdleText.getText() ) );                 }                 catch ( NumberFormatException e )                 {                     passwordPolicy.setPwdMaxIdle( 0 );                 }             }             else             {                 passwordPolicy.setPwdMaxIdle( 0 );             }              // In History             if ( inHistoryCheckbox.getSelection() )             {                 try                 {                     passwordPolicy.setPwdInHistory( Integer.parseInt( inHistoryText.getText() ) );                 }                 catch ( NumberFormatException e )                 {                     passwordPolicy.setPwdInHistory( 0 );                 }             }             else             {                 passwordPolicy.setPwdInHistory( 0 );             }              // Minimum Delay             try             {                 passwordPolicy.setPwdMinDelay( Integer.parseInt( minimumDelayText.getText() ) );             }             catch ( NumberFormatException e )             {                 passwordPolicy.setPwdMinDelay( 0 );             }              // Maximum Delay             try             {                 passwordPolicy.setPwdMaxDelay( Integer.parseInt( maximumDelayText.getText() ) );             }             catch ( NumberFormatException e )             {                 passwordPolicy.setPwdMaxDelay( 0 );             }         }     }       /**      * Gets the password policy check quality.      *      * @return the password policy check quality      */     private int getPwdCheckQuality()     {         IStructuredSelection selection = ( StructuredSelection ) checkQualityComboViewer.getSelection();          if ( !selection.isEmpty() )         {             CheckQuality checkQuality = ( CheckQuality ) selection.getFirstElement();              return checkQuality.getValue();         }          return CheckQuality.DISABLED.getValue();     }       /**      * {@inheritDoc}      */     public void dispose()     {     }       /**      * {@inheritDoc}      */     public void initialize( IManagedForm form )     {         this.mform = form;     }       /**      * {@inheritDoc}      */     public boolean isDirty()     {         return false;     }       /**      * {@inheritDoc}      */     public boolean isStale()     {         return false;     }       /**      * {@inheritDoc}      */     public void refresh()     {         removeListeners();          if ( passwordPolicy != null )         {             // Checking if this is the default password policy             boolean isDefaultPasswordPolicy = PasswordPoliciesPage.isDefaultPasswordPolicy( passwordPolicy );              // Enabled             enabledCheckbox.setSelection( passwordPolicy.isEnabled() );              // ID             idText.setText( ServerConfigurationEditorUtils.checkNull( passwordPolicy.getPwdId() ) );             idText.setEnabled( !isDefaultPasswordPolicy );              // Description             descriptionText.setText( ServerConfigurationEditorUtils.checkNull( passwordPolicy.getDescription() ) );             descriptionText.setEnabled( !isDefaultPasswordPolicy );              // Check Quality             checkQualityComboViewer.setSelection( new StructuredSelection( CheckQuality.valueOf( passwordPolicy                 .getPwdCheckQuality() ) ) );              // Validator             validatorText.setText( ServerConfigurationEditorUtils.checkNull( passwordPolicy.getPwdValidator() ) );              // Miminum Length             int minimumLength = passwordPolicy.getPwdMinLength();             minimumLengthCheckbox.setSelection( minimumLength != 0 );             minimumLengthText.setText( "" + minimumLength );              // Maximum Length             int maximumLength = passwordPolicy.getPwdMaxLength();             maximumLengthCheckbox.setSelection( maximumLength != 0 );             maximumLengthText.setText( "" + maximumLength );              if ( getPwdCheckQuality() == 0 )             {                 minimumLengthCheckbox.setEnabled( false );                 minimumLengthText.setEnabled( false );                 maximumLengthCheckbox.setEnabled( false );                 maximumLengthText.setEnabled( false );             }             else             {                 minimumLengthCheckbox.setEnabled( true );                 minimumLengthText.setEnabled( minimumLength != 0 );                 maximumLengthCheckbox.setEnabled( true );                 maximumLengthText.setEnabled( maximumLength != 0 );             }              // Minimum Age             minimumAgeText.setText( "" + passwordPolicy.getPwdMinAge() );              // Maximum Age             maximumAgeText.setText( "" + passwordPolicy.getPwdMaxAge() );              // Expire Warning             int expireWarning = passwordPolicy.getPwdExpireWarning();             expireWarningCheckbox.setSelection( expireWarning != 0 );             expireWarningText.setText( "" + expireWarning );             expireWarningText.setEnabled( expireWarning != 0 );              // Grace Authentication Limit             int graceAuthenticationLimit = passwordPolicy.getPwdGraceAuthNLimit();             graceAuthenticationLimitCheckbox.setSelection( graceAuthenticationLimit != 0 );             graceAuthenticationLimitText.setText( "" + graceAuthenticationLimit );             graceAuthenticationLimitText.setEnabled( graceAuthenticationLimit != 0 );              // Grace Expire             int graceExpire = passwordPolicy.getPwdGraceExpire();             graceExpireCheckbox.setSelection( graceExpire != 0 );             graceExpireText.setText( "" + graceExpire );             graceExpireText.setEnabled( graceExpire != 0 );              // Must Change             mustChangeCheckbox.setSelection( passwordPolicy.isPwdMustChange() );              // Allow User Change             allowUserChangeCheckbox.setSelection( passwordPolicy.isPwdAllowUserChange() );              // Safe Modify             safeModifyCheckbox.setSelection( passwordPolicy.isPwdSafeModify() );              // Lockout             lockoutCheckbox.setSelection( passwordPolicy.isPwdLockout() );              // Lockout Duration             lockoutDurationText.setText( "" + passwordPolicy.getPwdLockoutDuration() );              // Max Failure             maxFailureText.setText( "" + passwordPolicy.getPwdMaxFailure() );              // Failure Count Interval             failureCountIntervalText.setText( "" + passwordPolicy.getPwdFailureCountInterval() );              // Max Idle             int maxIdle = passwordPolicy.getPwdMaxIdle();             maxIdleCheckbox.setSelection( maxIdle != 0 );             maxIdleText.setText( "" + maxIdle );             maxIdleText.setEnabled( maxIdle != 0 );              // In History             int inHistory = passwordPolicy.getPwdInHistory();             inHistoryCheckbox.setSelection( inHistory != 0 );             inHistoryText.setText( "" + inHistory );             inHistoryText.setEnabled( inHistory != 0 );              // Minimum Delay             minimumDelayText.setText( "" + passwordPolicy.getPwdMinDelay() );              // Maximum Delay             maximumDelayText.setText( "" + passwordPolicy.getPwdMaxDelay() );         }          addListeners();     }       /**      * {@inheritDoc}      */     public void setFocus()     {         //        idText.setFocus();     }       /**      * {@inheritDoc}      */     public boolean setFormInput( Object input )     {         return false;     }      /**      * This enum is used for the check quality value.      *      * @author Apache Directory Project      */     private enum CheckQuality     {         DISABLED(0),         RELAXED(1),         STRICT(2);          /** The value */         private int value;           /**          * Creates a new instance of CheckQuality.          *          * @param value the value          */         private CheckQuality( int value )         {             this.value = value;         }           /**          * Gets the value.          *          * @return the value          */         public int getValue()         {             return value;         }           public static CheckQuality valueOf( int value )         {             for ( CheckQuality checkQuality : CheckQuality.class.getEnumConstants() )             {                 if ( checkQuality.getValue() == value )                 {                     return checkQuality;                 }             }              throw new IllegalArgumentException( "There is no CheckQuality value for :" + value );         }           /**          * {@inheritDoc}          */         public String toString()         {             switch ( this )             {                 case DISABLED:                     return "Disabled";                 case RELAXED:                     return "Relaxed";                 case STRICT:                     return "Strict";             }              return super.toString();         }     } };data class;blob, long method;t;t;f;blob,  long method;data class;0;7803;https://github.com/apache/directory-studio/blob/e8f15ea553a3ae7bebc2fe96d6a2864e188f8017/plugins/apacheds.configuration/src/main/java/org/apache/directory/studio/apacheds/configuration/editor/PasswordPolicyDetailsPage.java/#L110-L1248;2;842;7803
866;   {     "message": "YES I found bad smells",     "bad smells are": [       "1. Long Method",       "2. Blob"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  private XMLEvent expectTag(String expected, boolean allowEnd)       throws IOException {     XMLEvent ev = null;     while (true) {       try {         ev = events.nextEvent();       } catch (XMLStreamException e) {         throw new IOException("Expecting " + expected +             ", but got XMLStreamException", e);       }       switch (ev.getEventType()) {       case XMLEvent.ATTRIBUTE:         throw new IOException("Got unexpected attribute: " + ev);       case XMLEvent.CHARACTERS:         if (!ev.asCharacters().isWhiteSpace()) {           throw new IOException("Got unxpected characters while " +               "looking for " + expected + ": " +               ev.asCharacters().getData());         }         break;       case XMLEvent.END_ELEMENT:         if (!allowEnd) {           throw new IOException("Got unexpected end event " +               "while looking for " + expected);         }         return ev;       case XMLEvent.START_ELEMENT:         if (!expected.startsWith("[")) {           if (!ev.asStartElement().getName().getLocalPart().                 equals(expected)) {             throw new IOException("Failed to find <" + expected + ">; " +                 "got " + ev.asStartElement().getName().getLocalPart() +                 " instead.");           }         }         return ev;       default:         // Ignore other event types like comment, etc.         if (LOG.isTraceEnabled()) {           LOG.trace("Skipping XMLEvent of type " +               ev.getEventType() + "(" +  ev + ")");         }         break;       }     }   };long method;1. long method, 2. blob;t;t;t; 2. blob;;0;7932;https://github.com/apache/hadoop/blob/128dd91e10080bdcbcd7d555fa3c4105e55a6b51/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java/#L184-L229;2;866;7932
871; {"response": "YES, I found bad smells", "bad smells are": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class Status {     public String getAction() {         return action;     }      public Result getResult() {         return result;     }      public String getDetails() {         return details;     }      private String action;     private Result result;     private String details;      public Status(String action, Result result, String details) {         this.action = action;         this.result = result;         this.details = details;     }     public static enum Result {         SUCCESSFUL,         FAILED,     }      @Override     public String toString() {         return String.format("%s\t%s\t%s", action, result, details);     } };data class;blob, data class;t;t;t;blob;;0;7972;https://github.com/Microsoft/azure-tools-for-java/blob/d121e8ac9cc3ab400e5b49c8b372280ae332f3fb/Utils/azuretools-core/src/com/microsoft/azuretools/authmanage/srvpri/step/Status.java/#L28-L59;2;871;7972
880;   {     "response": "YES I found bad smells",     "detected_bad_smells": [       "Long Method",       "Blob"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    private static void weaveDir(File dir, String consumerHeaderKey, String consumerHeaderValue, String bundleClassPath) throws Exception {         Set wd = ConsumerHeaderProcessor.processHeader(consumerHeaderKey, consumerHeaderValue);          URLClassLoader cl = new URLClassLoader(new URL [] {dir.toURI().toURL()}, Main.class.getClassLoader());         String dirName = dir.getAbsolutePath();          DirTree dt = new DirTree(dir);         for (File f : dt.getFiles()) {             if (!f.getName().endsWith(".class"))                 continue;              String className = f.getAbsolutePath().substring(dirName.length());             if (className.startsWith(File.separator))                 className = className.substring(1);             className = className.substring(0, className.length() - ".class".length());             className = className.replace(File.separator, ".");              InputStream is = new FileInputStream(f);             byte[] b;             try {                 ClassReader cr = new ClassReader(is);                 ClassWriter cw = new StaticToolClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES, cl);                 TCCLSetterVisitor cv = new TCCLSetterVisitor(cw, className, wd);                 cr.accept(cv, ClassReader.SKIP_FRAMES);                 if (cv.isWoven()) {                     b = cw.toByteArray();                 } else {                     // if not woven, store the original bytes                     b = Streams.suck(new FileInputStream(f));                 }             } finally {                 is.close();             }              OutputStream os = new FileOutputStream(f);             try {                 os.write(b);             } finally {                 os.close();             }         }          if (bundleClassPath != null) {             for (String entry : bundleClassPath.split(",")) {                 File jarFile = new File(dir, entry.trim());                 if (jarFile.isFile()) {                     weaveBCPJar(jarFile, consumerHeaderKey, consumerHeaderValue);                 }             }         }     };long method;long method, blob;t;t;t; blob;;0;8016;https://github.com/apache/aries/blob/52293d20268de7c98833846ded2b70d6476773de/spi-fly/spi-fly-static-tool/src/main/java/org/apache/aries/spifly/statictool/Main.java/#L173-L223;2;880;8016
908;   {     "answer": "YES I found bad smells",     "bad smells are": [       "Blob",       "Long Method"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    @Override     public void onTrigger(final ProcessContext context, final ProcessSession session) {         List flowFiles = session.get(context.getProperty(BATCH_SIZE).evaluateAttributeExpressions().asInteger());         if (flowFiles == null || flowFiles.size() == 0) {             return;         }          Map keysToFlowFileMap = new HashMap<>();          final String table = context.getProperty(TABLE).evaluateAttributeExpressions().getValue();          final String hashKeyName = context.getProperty(HASH_KEY_NAME).evaluateAttributeExpressions().getValue();         final String hashKeyValueType = context.getProperty(HASH_KEY_VALUE_TYPE).getValue();         final String rangeKeyName = context.getProperty(RANGE_KEY_NAME).evaluateAttributeExpressions().getValue();         final String rangeKeyValueType = context.getProperty(RANGE_KEY_VALUE_TYPE).getValue();         final String jsonDocument = context.getProperty(JSON_DOCUMENT).evaluateAttributeExpressions().getValue();         final String charset = context.getProperty(DOCUMENT_CHARSET).evaluateAttributeExpressions().getValue();          TableWriteItems tableWriteItems = new TableWriteItems(table);          for (FlowFile flowFile : flowFiles) {             final Object hashKeyValue = getValue(context, HASH_KEY_VALUE_TYPE, HASH_KEY_VALUE, flowFile);             final Object rangeKeyValue = getValue(context, RANGE_KEY_VALUE_TYPE, RANGE_KEY_VALUE, flowFile);              if (!isHashKeyValueConsistent(hashKeyName, hashKeyValue, session, flowFile)) {                 continue;             }              if (!isRangeKeyValueConsistent(rangeKeyName, rangeKeyValue, session, flowFile)) {                 continue;             }              if (!isDataValid(flowFile, jsonDocument)) {                 flowFile = session.putAttribute(flowFile, AWS_DYNAMO_DB_ITEM_SIZE_ERROR, "Max size of item + attribute should be 400kb but was " + flowFile.getSize() + jsonDocument.length());                 session.transfer(flowFile, REL_FAILURE);                 continue;             }              ByteArrayOutputStream baos = new ByteArrayOutputStream();             session.exportTo(flowFile, baos);              try {                 if (rangeKeyValue == null || StringUtils.isBlank(rangeKeyValue.toString())) {                     tableWriteItems.addItemToPut(new Item().withKeyComponent(hashKeyName, hashKeyValue)                         .withJSON(jsonDocument, IOUtils.toString(baos.toByteArray(), charset)));                 } else {                     tableWriteItems.addItemToPut(new Item().withKeyComponent(hashKeyName, hashKeyValue)                         .withKeyComponent(rangeKeyName, rangeKeyValue)                         .withJSON(jsonDocument, IOUtils.toString(baos.toByteArray(), charset)));                 }             } catch (IOException ioe) {                 getLogger().error("IOException while creating put item : " + ioe.getMessage());                 flowFile = session.putAttribute(flowFile, DYNAMODB_ITEM_IO_ERROR, ioe.getMessage());                 session.transfer(flowFile, REL_FAILURE);             }             keysToFlowFileMap.put(new ItemKeys(hashKeyValue, rangeKeyValue), flowFile);         }          if (keysToFlowFileMap.isEmpty()) {             return;         }          final DynamoDB dynamoDB = getDynamoDB();          try {             BatchWriteItemOutcome outcome = dynamoDB.batchWriteItem(tableWriteItems);              handleUnprocessedItems(session, keysToFlowFileMap, table, hashKeyName, hashKeyValueType, rangeKeyName,                 rangeKeyValueType, outcome);              // Handle any remaining flowfiles             for (FlowFile flowFile : keysToFlowFileMap.values()) {                 getLogger().debug("Successful posted items to dynamodb : " + table);                 session.transfer(flowFile, REL_SUCCESS);             }         } catch (AmazonServiceException exception) {             getLogger().error("Could not process flowFiles due to service exception : " + exception.getMessage());             List failedFlowFiles = processServiceException(session, flowFiles, exception);             session.transfer(failedFlowFiles, REL_FAILURE);         } catch (AmazonClientException exception) {             getLogger().error("Could not process flowFiles due to client exception : " + exception.getMessage());             List failedFlowFiles = processClientException(session, flowFiles, exception);             session.transfer(failedFlowFiles, REL_FAILURE);         } catch (Exception exception) {             getLogger().error("Could not process flowFiles due to exception : " + exception.getMessage());             List failedFlowFiles = processException(session, flowFiles, exception);             session.transfer(failedFlowFiles, REL_FAILURE);         }     };long method;blob, long method;t;t;t;blob;;0;8202;https://github.com/apache/nifi/blob/c8eff590efa3babcda0b755009224dcac168708b/nifi-nar-bundles/nifi-aws-bundle/nifi-aws-processors/src/main/java/org/apache/nifi/processors/aws/dynamodb/PutDynamoDB.java/#L100-L188;2;908;8202
936; {"message": "YES I found bad smells", "bad smells are": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class TfsGitTreeEntriesJson {     private final String objectId;     private final List treeEntries;     private final int size;      @JsonCreator     public TfsGitTreeEntriesJson(         @JsonProperty("objectId") final String objectId,         @JsonProperty("treeEntries") final List treeEntries,         @JsonProperty("size") final int size) throws JsonProcessingException {         this.objectId = objectId;         this.treeEntries = treeEntries;         this.size = size;     }      public String getObjectId() {         return objectId;     }      public List getTreeEntries() {         return treeEntries;     }      public int getSize() {         return size;     } };data class;blob, data class;t;t;t;blob;;0;8410;https://github.com/Microsoft/team-explorer-everywhere/blob/89ab2a4847aec8ec2afdf36c3f6287dd03bd558d/source/com.microsoft.tfs.client.common/src/com/microsoft/tfs/client/common/git/json/TfsGitTreeEntriesJson.java/#L12-L38;2;936;8410
938; {   "response": "YES I found bad smells",   "detected_bad_smells": [     "Long Method",     "Blob"   ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
	private ICompletionProposal[] getRelevantProposals( ITextViewer viewer, 			int offset ) throws BadLocationException 	{ 		if ( lastProposals != null ) 		{ 			ArrayList relevantProposals = new ArrayList( 10 );  			String word = ( findWord( viewer, offset - 1 ) ).toLowerCase( ); 			//Search for this word in the list  			for ( int n = 0; n < lastProposals.length; n++ ) 			{ 				if ( stripQuotes( lastProposals[n].getDisplayString( ) 						.toLowerCase( ) ).startsWith( word ) ) 				{ 					CompletionProposal proposal = new CompletionProposal( lastProposals[n].getDisplayString( ), 							offset - word.length( ), 							word.length( ), 							lastProposals[n].getDisplayString( ).length( ) ); 					relevantProposals.add( proposal ); 				} 			}  			if ( relevantProposals.size( ) > 0 ) 			{ 				return (ICompletionProposal[]) relevantProposals.toArray( new ICompletionProposal[]{} ); 			} 		}  		return null; 	};long method;long method, blob;t;t;t; blob;;0;8427;https://github.com/eclipse/birt/blob/f89264810347de98702db45386a822aabc0fadbf/data/org.eclipse.birt.report.data.oda.jdbc.ui/src/org/eclipse/birt/report/data/oda/jdbc/ui/editors/JdbcSQLContentAssistProcessor.java/#L278-L308;2;938;8427
939;     {         "message": "YES I found bad smells",         "bad smells are": [             "Long Method",             "Blob"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    public static class CounterMark     {         private final Row row;         private final ColumnMetadata column;         private final CellPath path;          private CounterMark(Row row, ColumnMetadata column, CellPath path)         {             this.row = row;             this.column = column;             this.path = path;         }          public Clustering clustering()         {             return row.clustering();         }          public ColumnMetadata column()         {             return column;         }          public CellPath path()         {             return path;         }          public ByteBuffer value()         {             return path == null                  ? row.getCell(column).value()                  : row.getCell(column, path).value();         }          public void setValue(ByteBuffer value)         {             // This is a bit of a giant hack as this is the only place where we mutate a Row object. This makes it more efficient             // for counters however and this won't be needed post-#6506 so that's probably fine.             assert row instanceof BTreeRow;             ((BTreeRow)row).setValue(column, path, value);         }     };data class;long method, blob;t;t;f;long method,  blob;data class;0;8450;https://github.com/apache/cassandra/blob/e191aff385053bdb5325f15bc6d16d2dc0ee0589/src/java/org/apache/cassandra/db/partitions/PartitionUpdate.java/#L661-L703;2;939;8450
944;	{ 		"response": "YES I found bad smells", 		"bad smells": [ 			"Blob", 			"Long Method" 		] 	};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class SimpleMessage implements Message {      private final MessageId messageId;     private final String subType;     private final String mediaType;     private final SharedInputStream content;     private final int bodyStartOctet;     private final Date internalDate;     private final long size;     private final Long textualLineCount;     private final List properties;     private final List attachments;      public SimpleMessage(MessageId messageId, SharedInputStream content, long size, Date internalDate, String subType, String mediaType, int bodyStartOctet, Long textualLineCount, List properties, List attachments) {         this.messageId = messageId;         this.subType = subType;         this.mediaType = mediaType;         this.content = content;         this.bodyStartOctet = bodyStartOctet;         this.internalDate = internalDate;         this.size = size;         this.textualLineCount = textualLineCount;         this.properties = properties;         this.attachments = attachments;     }      public SimpleMessage(MessageId messageId, SharedInputStream content, long size, Date internalDate, String subType, String mediaType, int bodyStartOctet, Long textualLineCount, List properties) {         this(messageId, content, size, internalDate, subType, mediaType, bodyStartOctet, textualLineCount, properties, ImmutableList.of());     }      @Override     public MessageId getMessageId() {         return messageId;     }      @Override     public Date getInternalDate() {         return internalDate;     }      @Override     public InputStream getBodyContent() throws IOException {         return content.newStream(bodyStartOctet, -1);     }      @Override     public String getMediaType() {         return mediaType;     }      @Override     public String getSubType() {         return subType;     }      @Override     public long getBodyOctets() {         return getFullContentOctets() - bodyStartOctet;     }      @Override     public long getHeaderOctets() {         return bodyStartOctet;     }      @Override     public long getFullContentOctets() {         return size;     }      @Override     public Long getTextualLineCount() {         return textualLineCount;     }      @Override     public InputStream getHeaderContent() throws IOException {         long headerEnd = bodyStartOctet;         if (headerEnd < 0) {             headerEnd = 0;         }         return content.newStream(0, headerEnd);     }      @Override     public InputStream getFullContent() throws IOException {         return content.newStream(0, -1);     }      @Override     public List getProperties() {         return properties;     }      @Override     public List getAttachments() {         return attachments;     } };data class;blob, long method;t;t;f;blob,  long method;data class;0;8474;https://github.com/apache/james-project/blob/fa24a096a5853459c3769a34ccc68feb91626bfa/mailbox/store/src/main/java/org/apache/james/mailbox/store/mail/model/impl/SimpleMessage.java/#L35-L133;2;944;8474
949;  {     "message": "YES I found bad smells",     "badSmells": [         "Blob",         "Feature Envy",         "Long Method"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    @Override     @SuppressWarnings("unchecked")     public void processElement(Object untypedElem) throws Exception {       WindowedValue elem = (WindowedValue) untypedElem;        Collection windows =           windowFn.assignWindows(               windowFn.new AssignContext() {                 @Override                 public T element() {                   return elem.getValue();                 }                  @Override                 public Instant timestamp() {                   return elem.getTimestamp();                 }                  @Override                 public BoundedWindow window() {                   return Iterables.getOnlyElement(elem.getWindows());                 }               });        WindowedValue res =           WindowedValue.of(elem.getValue(), elem.getTimestamp(), windows, elem.getPane());       receiver.process(res);     };feature envy;blob, feature envy, long method;t;t;t;blob,  long method;;0;8517;https://github.com/apache/beam/blob/a956ff77a8448e5f2c12f6695fec608348b5ab60/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/AssignWindowsParDoFnFactory.java/#L93-L120;2;949;8517
952; {     "answer": "YES I found bad smells",     "bad smells": [         "Blob"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    private ConfigurationInfo(CompositeData cd) {         this.settings = createMap(cd.get("settings"));         this.name = (String) cd.get("name");         this.label = (String) cd.get("label");         this.description = (String) cd.get("description");         this.provider = (String) cd.get("provider");         this.contents = (String) cd.get("contents");     };feature envy;blob;t;t;f;blob;feature envy;0;8527;https://github.com/SAP/SapMachine/blob/6e62561730c46dc5000c39665c43951832192ceb/src/jdk.management.jfr/share/classes/jdk/management/jfr/ConfigurationInfo.java/#L63-L70;2;952;8527
969; {"message": "YES I found bad smells", "bad_smells": ["Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    class Whitespace implements Text {         private String text;         public Whitespace(String text) {             this.text = text;         }         @Override         public String getText() {             return text;         }     };data class;blob;t;t;f;blob;data class;0;8680;https://github.com/eclipse/ceylon/blob/d3994d6cd120c4df85952cd9432123b413cfd65a/common/src/org/eclipse/ceylon/common/config/ConfigWriter.java/#L395-L404;2;969;8680
983;     {         "message": "YES I found bad smells",         "bad smells are": ["Blob", "Long Method", "Data Class"]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class WSS4JInInterceptorFactory {      private Properties properties;      public Properties getProperties() {         return properties;     }      public void setProperties(Properties properties) {         this.properties = properties;     }      public WSS4JInInterceptor create() {         final Map map = new HashMap();         for (Map.Entry entry : properties.entrySet()) {             map.put(entry.getKey().toString(), entry.getValue());         }         properties.clear();         return new WSS4JInInterceptor(map);     } };data class;blob, long method, data class;t;t;t;blob,  long method;;0;8862;https://github.com/apache/openejb/blob/f10c077ade927d73bdbd9ed4cc28b79f58a1cd66/openejb/server/openejb-cxf/src/main/java/org/apache/openejb/server/cxf/config/WSS4JInInterceptorFactory.java/#L28-L48;2;983;8862
984;        {     "message": "YES I found bad smells",     "bad smells are": [         "Long Method",         "Blob"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    List freevarDefs(int pos, List freevars, Symbol owner,             long additionalFlags) {         long flags = FINAL | SYNTHETIC | additionalFlags;         List defs = List.nil();         Set proxyNames = new HashSet<>();         for (List l = freevars; l.nonEmpty(); l = l.tail) {             VarSymbol v = l.head;             int index = 0;             Name proxyName;             do {                 proxyName = proxyName(v.name, index++);             } while (!proxyNames.add(proxyName));             VarSymbol proxy = new VarSymbol(                 flags, proxyName, v.erasure(types), owner);             proxies.put(v, proxy);             JCVariableDecl vd = make.at(pos).VarDef(proxy, null);             vd.vartype = access(vd.vartype);             defs = defs.prepend(vd);         }         return defs;     };long method;long method, blob;t;t;t; blob;;0;8875;https://github.com/SAP/SapMachine/blob/6e62561730c46dc5000c39665c43951832192ceb/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Lower.java/#L1457-L1477;2;984;8875
990;{"message": "YES I found bad smells", "bad_smells": ["Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    private static class MigrationLink {         int source;         int target;         Migration[] migrations;         public MigrationLink(int source, int target, Migration[] migrations) {             this.source = source;             this.target = target;             this.migrations = migrations;         }     };data class;blob;t;t;f;blob;data class;0;9019;https://github.com/apache/ode/blob/b2ddc6436891f84f716ffcbed8c1cd1e374bd805/bpel-runtime/src/main/java/org/apache/ode/bpel/engine/migration/MigrationHandler.java/#L113-L122;2;990;9019
995;{"message": "YES I found bad smells", "bad smells are": ["Long Method", "Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
        public void startElement(String uri, String localName, String qName, Attributes attributes)                     throws SAXException {             if (delegate != null) {                 delegateStack.push(qName);                 delegate.startElement(uri, localName, qName, attributes);             } else if (domImplementation != null) {                 //domImplementation is set so we need to start a new DOM building sub-process                 TransformerHandler handler;                 try {                     handler = tFactory.newTransformerHandler();                 } catch (TransformerConfigurationException e) {                     throw new SAXException("Error creating a new TransformerHandler", e);                 }                 Document doc = domImplementation.createDocument(uri, qName, null);                 //It's easier to work with an empty document, so remove the root element                 doc.removeChild(doc.getDocumentElement());                 handler.setResult(new DOMResult(doc));                 Area parent = (Area)areaStack.peek();                 ((ForeignObject)parent).setDocument(doc);                  //activate delegate for nested foreign document                 domImplementation = null; //Not needed anymore now                 this.delegate = handler;                 delegateStack.push(qName);                 delegate.startDocument();                 delegate.startElement(uri, localName, qName, attributes);             } else {                 boolean handled = true;                 if ("".equals(uri)) {                     if (localName.equals("structureTree")) {                          /* The area tree parser no longer supports the structure tree. */                         delegate = new DefaultHandler();                          delegateStack.push(qName);                         delegate.startDocument();                         delegate.startElement(uri, localName, qName, attributes);                     } else {                         handled = startAreaTreeElement(localName, attributes);                     }                 } else {                     ContentHandlerFactoryRegistry registry                             = userAgent.getContentHandlerFactoryRegistry();                     ContentHandlerFactory factory = registry.getFactory(uri);                     if (factory != null) {                         delegate = factory.createContentHandler();                         delegateStack.push(qName);                         delegate.startDocument();                         delegate.startElement(uri, localName, qName, attributes);                     } else {                         handled = false;                     }                 }                 if (!handled) {                     if (uri == null || uri.length() == 0) {                         throw new SAXException("Unhandled element " + localName                                 + " in namespace: " + uri);                     } else {                         log.warn("Unhandled element " + localName                                 + " in namespace: " + uri);                     }                 }             }         };long method;long method, blob;t;t;t; blob;;0;9092;https://github.com/apache/fop/blob/caced35327f6b6d6eeac2a13543f3c458e902101/fop-core/src/main/java/org/apache/fop/area/AreaTreeParser.java/#L260-L323;2;995;9092
1001; {"message": "YES I found bad smells", "badSmells": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    private static final class Reference {          private final Tree tree;         private final PropertyState property;          private Reference(Tree tree, String propertyName) {             this.tree = tree;             this.property = tree.getProperty(propertyName);         }          private boolean isMultiple() {             return property.isArray();         }          private void setProperty(String newValue) {             PropertyState prop = PropertyStates.createProperty(property.getName(), newValue, property.getType().tag());             tree.setProperty(prop);         }          private void setProperty(Iterable newValues) {             PropertyState prop = PropertyStates.createProperty(property.getName(), newValues, property.getType());             tree.setProperty(prop);         }     };data class;blob, data class;t;t;f;blob;data class;0;9189;https://github.com/apache/jackrabbit-oak/blob/fa85f54a065e01c0a1cb8c03af74194fdf521ddd/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/xml/ImporterImpl.java/#L548-L571;2;1001;9189
1028; {       "answer": "YES I found bad smells",     "detected_bad_smells": "the bad smells are: 1. Long Method, 2. Blob" };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    public Object doExecute() throws Exception {          Group group = groupManager.findGroupByName(groupName);         if (group == null) {             System.err.println("Cluster group " + groupName + " doesn't exist");             return null;         }          CellarSupport support = new CellarSupport();         support.setClusterManager(clusterManager);         support.setGroupManager(groupManager);         support.setConfigurationAdmin(configurationAdmin);          if (!in && !out) {             in = true;             out = true;         }         if (!whitelist && !blacklist) {             whitelist = true;             blacklist = true;         }          if (pid == null || pid.isEmpty()) {             // display mode             if (in) {                 System.out.println("INBOUND:");                 if (whitelist) {                     System.out.print("\twhitelist: ");                     Set list = support.getListEntries(Configurations.WHITELIST, groupName, Constants.CATEGORY, EventType.INBOUND);                     System.out.println(list.toString());                 }                 if (blacklist) {                     System.out.print("\tblacklist: ");                     Set list = support.getListEntries(Configurations.BLACKLIST, groupName, Constants.CATEGORY, EventType.INBOUND);                     System.out.println(list.toString());                 }             }             if (out) {                 System.out.println("OUTBOUND:");                 if (whitelist) {                     System.out.print("\twhitelist: ");                     Set list = support.getListEntries(Configurations.WHITELIST, groupName, Constants.CATEGORY, EventType.OUTBOUND);                     System.out.println(list.toString());                 }                 if (blacklist) {                     System.out.print("\tblacklist: ");                     Set list = support.getListEntries(Configurations.BLACKLIST, groupName, Constants.CATEGORY, EventType.OUTBOUND);                     System.out.println(list.toString());                 }             }         } else {             // edit mode             System.out.println("Updating blocking policy for " + pid);             if (in) {                 if (whitelist) {                     System.out.println("\tinbound whitelist ...");                     support.switchListEntry(Configurations.WHITELIST, groupName, Constants.CATEGORY, EventType.INBOUND, pid);                 }                 if (blacklist) {                     System.out.println("\tinbound blacklist ...");                     support.switchListEntry(Configurations.BLACKLIST, groupName, Constants.CATEGORY, EventType.INBOUND, pid);                 }             }             if (out) {                 if (whitelist) {                     System.out.println("\toutbound whitelist ...");                     support.switchListEntry(Configurations.WHITELIST, groupName, Constants.CATEGORY, EventType.OUTBOUND, pid);                 }                 if (blacklist) {                     System.out.println("\toutbound blacklist ...");                     support.switchListEntry(Configurations.BLACKLIST, groupName, Constants.CATEGORY, EventType.OUTBOUND, pid);                 }             }         }          return null;     };feature envy;the bad smells are: 1. long method, 2. blob;t;t;f;the bad smells are: 1. long method,  2. blob;feature envy;0;9371;https://github.com/apache/karaf-cellar/blob/4082b26110e56973dceb2563395f8aed3f294dd1/config/src/main/java/org/apache/karaf/cellar/config/shell/BlockCommand.java/#L56-L132;2;1028;9371
1034;{   "response": "YES I found bad smells",   "bad_smells": [     "Blob",     "Long Method"   ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
None;long method;blob, long method;t;t;t;blob;;0;9396;https://github.com/eclipse/xtext-core/blob/e04964e4c2a3e0338c0079bd8333688835e77c31/org.eclipse.xtext.testlanguages.ide/src-gen/org/eclipse/xtext/testlanguages/backtracking/ide/contentassist/antlr/internal/InternalExBeeLangTestLanguageParser.java/#L7286-L7317;2;1034;9396
1046;  {"message": "YES, I found bad smells", "bad_smells": ["Long Method", "Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    @Override     public List discoverHosts(final AddHostCmd cmd) throws IllegalArgumentException, DiscoveryException, InvalidParameterValueException {         Long dcId = cmd.getZoneId();         final Long podId = cmd.getPodId();         final Long clusterId = cmd.getClusterId();         String clusterName = cmd.getClusterName();         final String url = cmd.getUrl();         final String username = cmd.getUsername();         final String password = cmd.getPassword();         final List hostTags = cmd.getHostTags();          dcId = _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), dcId);          // this is for standalone option         if (clusterName == null && clusterId == null) {             clusterName = "Standalone-" + url;         }          if (clusterId != null) {             final ClusterVO cluster = _clusterDao.findById(clusterId);             if (cluster == null) {                 final InvalidParameterValueException ex = new InvalidParameterValueException("can not find cluster for specified clusterId");                 ex.addProxyObject(clusterId.toString(), "clusterId");                 throw ex;             } else {                 if (cluster.getGuid() == null) {                     final List hosts = listAllHostsInCluster(clusterId);                     if (!hosts.isEmpty()) {                         final CloudRuntimeException ex =                                 new CloudRuntimeException("Guid is not updated for cluster with specified cluster id; need to wait for hosts in this cluster to come up");                         ex.addProxyObject(cluster.getUuid(), "clusterId");                         throw ex;                     }                 }             }         }          return discoverHostsFull(dcId, podId, clusterId, clusterName, url, username, password, cmd.getHypervisor(), hostTags, cmd.getFullUrlParams(), false);     };long method;long method, blob;t;t;t; blob;;0;9456;https://github.com/apache/cloudstack/blob/8d3feb100aab4a45b31a789f444038b892161eec/server/src/main/java/com/cloud/resource/ResourceManagerImpl.java/#L573-L611;2;1046;9456
1076; 	{ 		"output": "YES I found bad smells", 		"bad smells are": [ 			"Blob", 			"Long Method" 		] 	};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  @Override   public void configure(Context context) {     this.headerName = context.getString(CONFIG_MULTIPLEX_HEADER_NAME,         DEFAULT_MULTIPLEX_HEADER);      Map channelNameMap = getChannelNameMap();      defaultChannels = getChannelListFromNames(         context.getString(CONFIG_DEFAULT_CHANNEL), channelNameMap);      Map mapConfig =         context.getSubProperties(CONFIG_PREFIX_MAPPING);      channelMapping = new HashMap>();      for (String headerValue : mapConfig.keySet()) {       List configuredChannels = getChannelListFromNames(           mapConfig.get(headerValue),           channelNameMap);        //This should not go to default channel(s)       //because this seems to be a bad way to configure.       if (configuredChannels.size() == 0) {         throw new FlumeException("No channel configured for when "             + "header value is: " + headerValue);       }        if (channelMapping.put(headerValue, configuredChannels) != null) {         throw new FlumeException("Selector channel configured twice");       }     }     //If no mapping is configured, it is ok.     //All events will go to the default channel(s).     Map optionalChannelsMapping =         context.getSubProperties(CONFIG_PREFIX_OPTIONAL + ".");      optionalChannels = new HashMap>();     for (String hdr : optionalChannelsMapping.keySet()) {       List confChannels = getChannelListFromNames(               optionalChannelsMapping.get(hdr), channelNameMap);       if (confChannels.isEmpty()) {         confChannels = EMPTY_LIST;       }       //Remove channels from optional channels, which are already       //configured to be required channels.        List reqdChannels = channelMapping.get(hdr);       //Check if there are required channels, else defaults to default channels       if (reqdChannels == null || reqdChannels.isEmpty()) {         reqdChannels = defaultChannels;       }       for (Channel c : reqdChannels) {         if (confChannels.contains(c)) {           confChannels.remove(c);         }       }        if (optionalChannels.put(hdr, confChannels) != null) {         throw new FlumeException("Selector channel configured twice");       }     }    };long method;blob, long method;t;t;t;blob;;0;9643;https://github.com/apache/flume/blob/7d3396f26dc1541e9d2a540d50d15a15c38acb74/flume-ng-core/src/main/java/org/apache/flume/channel/MultiplexingChannelSelector.java/#L83-L145;2;1076;9643
1083; {   "output": "YES I found bad smells",   "detected_bad_smells": [     "Blob",     "Data Class"   ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@XmlAccessorType(XmlAccessType.FIELD) @XmlType(name = "serialization-registration-type",     namespace = "http://geode.apache.org/schema/cache",     propOrder = {"serializers", "instantiators"}) @Experimental public class SerializationRegistrationType {    @XmlElement(name = "serializer", namespace = "http://geode.apache.org/schema/cache")   protected List serializers;   @XmlElement(name = "instantiator", namespace = "http://geode.apache.org/schema/cache")   protected List instantiators;    /**    * Gets the value of the serializer property.    *    *     * This accessor method returns a reference to the live list,    * not a snapshot. Therefore any modification you make to the    * returned list will be present inside the JAXB object.    * This is why there is not a set method for the serializer property.    *    *     * For example, to add a new item, do as follows:    *    *     * getSerializer().add(newItem);    *     *    *    *     * Objects of the following type(s) are allowed in the list    * {@link SerializationRegistrationType.Serializer }    *    *    */   public List getSerializers() {     if (serializers == null) {       serializers = new ArrayList();     }     return this.serializers;   }    /**    * Gets the value of the instantiator property.    *    *     * This accessor method returns a reference to the live list,    * not a snapshot. Therefore any modification you make to the    * returned list will be present inside the JAXB object.    * This is why there is not a set method for the instantiator property.    *    *     * For example, to add a new item, do as follows:    *    *     * getInstantiator().add(newItem);    *     *    *    *     * Objects of the following type(s) are allowed in the list    * {@link SerializationRegistrationType.Instantiator }    *    *    */   public List getInstantiators() {     if (instantiators == null) {       instantiators = new ArrayList();     }     return this.instantiators;   }     /**    *     * Java class for anonymous complex type.    *    *     * The following schema fragment specifies the expected content contained within this class.    *    *     * <complexType>    *   <complexContent>    *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">    *       <sequence>    *         <element name="class-name" type="{http://geode.apache.org/schema/cache}class-name-type"/>    *       </sequence>    *       <attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />    *     </restriction>    *   </complexContent>    * </complexType>    *     *    *    */   @XmlAccessorType(XmlAccessType.FIELD)   @XmlType(name = "", propOrder = {"className"})   public static class Instantiator {      @XmlElement(name = "class-name", namespace = "http://geode.apache.org/schema/cache",         required = true)     protected String className;     @XmlAttribute(name = "id", required = true)     protected String id;      /**      * Gets the value of the className property.      *      * possible object is      * {@link String }      *      */     public String getClassName() {       return className;     }      /**      * Sets the value of the className property.      *      * allowed object is      * {@link String }      *      */     public void setClassName(String value) {       this.className = value;     }      /**      * Gets the value of the id property.      *      * possible object is      * {@link String }      *      */     public String getId() {       return id;     }      /**      * Sets the value of the id property.      *      * allowed object is      * {@link String }      *      */     public void setId(String value) {       this.id = value;     }    }     /**    *     * Java class for anonymous complex type.    *    *     * The following schema fragment specifies the expected content contained within this class.    *    *     * <complexType>    *   <complexContent>    *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">    *       <sequence>    *         <element name="class-name" type="{http://geode.apache.org/schema/cache}class-name-type"/>    *       </sequence>    *     </restriction>    *   </complexContent>    * </complexType>    *     *    *    */   @XmlAccessorType(XmlAccessType.FIELD)   @XmlType(name = "", propOrder = {"className"})   public static class Serializer {      @XmlElement(name = "class-name", namespace = "http://geode.apache.org/schema/cache",         required = true)     protected String className;      /**      * Gets the value of the className property.      *      * possible object is      * {@link String }      *      */     public String getClassName() {       return className;     }      /**      * Sets the value of the className property.      *      * allowed object is      * {@link String }      *      */     public void setClassName(String value) {       this.className = value;     }    }  };data class;blob, data class;t;t;t;blob;;0;9689;https://github.com/apache/geode/blob/8fd839e8b73e40bd2dfd14f331b587431bd35a66/geode-management/src/main/java/org/apache/geode/cache/configuration/SerializationRegistrationType.java/#L81-L286;2;1083;9689
1097;   {     "message": "YES, I found bad smells",     "bad smells are": [       "Blob",       "Long Method"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class ComponentRenderInfo extends BaseRenderInfo {    public static final String LAYOUT_DIFFING_ENABLED = "layout_diffing_enabled";   public static final String PERSISTENCE_ENABLED = "is_persistence_enabled";    private final Component mComponent;   @Nullable private final EventHandler mRenderCompleteEventHandler;    public static Builder create() {     return new Builder();   }    private ComponentRenderInfo(Builder builder) {     super(builder);      if (builder.mComponent == null) {       throw new IllegalStateException("Component must be provided.");     }      mComponent = builder.mComponent;     mRenderCompleteEventHandler = builder.mRenderCompleteEventEventHandler;   }    /** Create empty {@link ComponentRenderInfo}. */   public static RenderInfo createEmpty() {     return create().component(new EmptyComponent()).build();   }    @Override   public Component getComponent() {     return mComponent;   }    @Override   @Nullable   public EventHandler getRenderCompleteEventHandler() {     return mRenderCompleteEventHandler;   }    @Override   public boolean rendersComponent() {     return true;   }    @Override   public String getName() {     return mComponent.getSimpleName();   }    public static class Builder extends BaseRenderInfo.Builder {     private Component mComponent;     private EventHandler mRenderCompleteEventEventHandler;      /** Specify {@link Component} that will be rendered as an item of the list. */     public Builder component(Component component) {       this.mComponent = component;       return this;     }      public Builder renderCompleteHandler(         EventHandler renderCompleteEventHandler) {       this.mRenderCompleteEventEventHandler = renderCompleteEventHandler;       return this;     }      public Builder component(Component.Builder builder) {       return component(builder.build());     }      public ComponentRenderInfo build() {       return new ComponentRenderInfo(this);     }   }    private static class EmptyComponent extends Component {      protected EmptyComponent() {       super("EmptyComponent");     }      @Override     protected Component onCreateLayout(ComponentContext c) {       return Column.create(c).build();     }      @Override     public boolean isEquivalentTo(Component other) {       return EmptyComponent.this == other           || (other != null && EmptyComponent.this.getClass() == other.getClass());     }   } };data class;blob, long method;t;t;f;blob,  long method;data class;0;9800;https://github.com/facebook/litho/blob/19503b819b97e17d02f584633508dca8c646911a/litho-widget/src/main/java/com/facebook/litho/widget/ComponentRenderInfo.java/#L27-L118;2;1097;9800
1098;   {     "message": "YES I found bad smells",     "bad smells are": ["Blob", "Long Method"]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class FileSinkOptionsMetadata implements ProfileNamesProvider {  	private static final String USE_SPEL_PROFILE = "use-expression";  	private static final String USE_LITERAL_STRING_PROFILE = "use-string";  	private boolean binary = false;  	private String charset = "UTF-8";  	private String dir = "/tmp/xd/output/";  	private String name = XD_STREAM_NAME;  	private String suffix = "out";  	private Mode mode = APPEND;  	private String nameExpression;  	private String dirExpression;  	@NotNull 	public Mode getMode() { 		return mode; 	}  	@ModuleOption("what to do if the file already exists") 	public void setMode(Mode mode) { 		this.mode = mode; 	}  	/** 	 * Return dot + suffix if suffix is set, or the empty string otherwise. 	 */ 	public String getExtensionWithDot() { 		return StringUtils.hasText(suffix) ? "." + suffix.trim() : ""; 	}   	@ModuleOption("filename extension to use") 	public void setSuffix(String suffix) { 		this.suffix = suffix; 	}  	public String getName() { 		return name; 	}  	@ModuleOption("filename pattern to use") 	public void setName(String name) { 		this.name = name; 	}  	@NotBlank 	public String getDir() { 		return dir; 	}  	@ModuleOption("the directory in which files will be created") 	public void setDir(String dir) { 		this.dir = dir; 	}  	public boolean isBinary() { 		return binary; 	}  	@ModuleOption("if false, will append a newline character at the end of each line") 	public void setBinary(boolean binary) { 		this.binary = binary; 	}  	@ModuleOption("the charset to use when writing a String payload") 	public void setCharset(String charset) { 		this.charset = charset; 	}  	@NotBlank 	public String getCharset() { 		return charset; 	}   	public String getNameExpression() { 		return nameExpression; 	}  	@ModuleOption("spring expression used to define filename") 	public void setNameExpression(String nameExpression) { 		this.nameExpression = nameExpression; 	}  	public String getDirExpression() { 		return dirExpression; 	}  	@ModuleOption("spring expression used to define directory name") 	public void setDirExpression(String dirExpression) { 		this.dirExpression = dirExpression; 	}  	public static enum Mode { 		APPEND, REPLACE, FAIL, IGNORE; 	}  	@Override 	public String[] profilesToActivate() { 		return (nameExpression != null || dirExpression != null) ? new String[] { USE_SPEL_PROFILE } 				: new String[] { USE_LITERAL_STRING_PROFILE }; 	} };data class;blob, long method;t;t;f;blob,  long method;data class;0;9825;https://github.com/spring-projects/spring-xd/blob/ec106725c51d245109b2e5055d9f65e43228ecc1/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/modules/metadata/FileSinkOptionsMetadata.java/#L37-L148;2;1098;9825
1101; 	{     "message": "YES, I found bad smells",     "detected_bad_smells": [         "Blob",         "Long Method"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    @Override     public void main(List trees) {         // complete the javac AST with a completed ceylon model         timer.startTask("prepareForTypeChecking");         prepareForTypeChecking(trees);         timer.endTask();         List javaTrees = List.nil();         List ceylonTrees = List.nil();         // split them in two sets: java and ceylon         for(JCCompilationUnit tree : trees){             if(tree instanceof CeylonCompilationUnit)                 ceylonTrees = ceylonTrees.prepend(tree);             else                 javaTrees = javaTrees.prepend(tree);         }         timer.startTask("Enter on Java trees");         boolean needsModelReset = isBootstrap;         // enter java trees first to set up their ClassSymbol objects for ceylon trees to use during type-checking         if(!javaTrees.isEmpty()){             setupImportedPackagesForJavaTrees(javaTrees);             hasJavaAndCeylonSources = true;             needsModelReset = true;         }         // this is false if we're in an APT round where we did not generate the trees         if(!compiler.isAddModuleTrees()){             setupImportedPackagesForJavaTrees(ceylonTrees);         }         if(isBootstrap || hasJavaAndCeylonSources){             super.main(trees);         }         // now we can type-check the Ceylon code         List packageInfo = completeCeylonTrees(trees);         trees = trees.prependList(packageInfo);         ceylonTrees = ceylonTrees.prependList(packageInfo);                  if(compiler.isHadRunTwiceException()){             needsModelReset = true;         }         if(needsModelReset){             // bootstrapping the language module is a bit more complex             resetAndRunEnterAgain(trees);         }else{             timer.startTask("Enter on Ceylon trees");             // and complete their new trees             try {                 sourceLanguage.push(Language.CEYLON);                 super.main(ceylonTrees);             } finally {                 sourceLanguage.pop();             }             timer.endTask();         }     };long method;blob, long method;t;t;t;blob;;0;9839;https://github.com/eclipse/ceylon/blob/d3994d6cd120c4df85952cd9432123b413cfd65a/compiler-java/src/org/eclipse/ceylon/compiler/java/loader/CeylonEnter.java/#L203-L255;2;1101;9839
1111; {"message":"YES I found bad smells","bad smells are":["1. Long method","2. Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    private IgniteFuture startRemoteListenAsync(BinaryRawReaderEx reader, IgniteMessaging messaging) {         Object nativeFilter = reader.readObjectDetached();          long ptr = reader.readLong();  // interop pointer          Object topic = reader.readObjectDetached();          PlatformMessageFilter filter = platformCtx.createRemoteMessageFilter(nativeFilter, ptr);          return messaging.remoteListenAsync(topic, filter);     };feature envy;1. long method, 2. blob;t;t;f;1. long method,  2. blob;feature envy;0;9888;https://github.com/apache/ignite/blob/7a7c407ea41477aae8508bfe871b4e9a67e1b277/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/messaging/PlatformMessaging.java/#L185-L195;2;1111;9888
1140;     {         "message": "YES I found bad smells",         "detected_bad_smells": [             "Blob",             "Long Method"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
	protected void transform(XtendConstructor source, JvmGenericType container) { 		JvmConstructor constructor = typesFactory.createJvmConstructor(); 		container.getMembers().add(constructor); 		associator.associatePrimary(source, constructor); 		JvmVisibility visibility = source.getVisibility(); 		constructor.setSimpleName(container.getSimpleName()); 		constructor.setVisibility(visibility); 		for (XtendParameter parameter : source.getParameters()) { 			translateParameter(constructor, parameter); 		} 		copyAndFixTypeParameters(source.getTypeParameters(), constructor); 		for (JvmTypeReference exception : source.getExceptions()) { 			constructor.getExceptions().add(jvmTypesBuilder.cloneWithProxies(exception)); 		} 		translateAnnotationsTo(source.getAnnotations(), constructor); 		setBody(constructor, source.getExpression()); 		jvmTypesBuilder.copyDocumentationTo(source, constructor); 	};long method;blob, long method;t;t;t;blob;;0;10089;https://github.com/eclipse/xtext-xtend/blob/20500a324127e3ee73cb793a13430ee140246fa7/org.eclipse.xtend.core/src/org/eclipse/xtend/core/jvmmodel/XtendJvmModelInferrer.java/#L721-L738;2;1140;10089
1169;     {         "message": "YES I found bad smells",         "bad smells are": [             "Long Method",             "Blob"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
	public static Dataset[] generateCoordinates(Dataset angles, final double[] geometricParameters) { 		if (geometricParameters.length != PARAMETERS) 			throw new IllegalArgumentException("Need " + PARAMETERS + " parameters");  		Dataset[] coords = new Dataset[2];  		DoubleDataset x = DatasetFactory.zeros(DoubleDataset.class, angles.getShape()); 		DoubleDataset y = DatasetFactory.zeros(DoubleDataset.class, angles.getShape()); 		coords[0] = x; 		coords[1] = y;  		final double ca = Math.cos(geometricParameters[2]); 		final double sa = Math.sin(geometricParameters[2]); 		final IndexIterator it = angles.getIterator();  		int i = 0; 		 		while (it.hasNext()) { 			final double t = angles.getElementDoubleAbs(it.index); 			final double ct = Math.cos(t); 			final double st = Math.sin(t); 			x.setAbs(i, geometricParameters[3] + geometricParameters[0]*ca*ct - geometricParameters[1]*sa*st); 			y.setAbs(i, geometricParameters[4] + geometricParameters[0]*sa*ct + geometricParameters[1]*ca*st); 			i++; 		} 		return coords; 	};feature envy;long method, blob;t;t;f;long method,  blob;feature envy;0;10192;https://github.com/eclipse/dawnsci/blob/1131d5c65e9e8ea98141eecee1743cf1053544f4/org.eclipse.dawnsci.analysis.dataset/src/org/eclipse/dawnsci/analysis/dataset/roi/fitting/EllipseFitter.java/#L486-L512;2;1169;10192
1195; {"message": "YES I found bad smells", "bad smells are": ["Long Method", "Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    @Override     public long exportTo(final ContentClaim claim, final Path destination, final boolean append, final long offset, final long length) throws IOException {         if (claim == null) {             if (append) {                 return 0L;             }             Files.createFile(destination);             return 0L;         }          final StandardOpenOption openOption = append ? StandardOpenOption.APPEND : StandardOpenOption.CREATE;         try (final InputStream in = read(claim);                 final OutputStream destinationStream = Files.newOutputStream(destination, openOption)) {              if (offset > 0) {                 StreamUtils.skip(in, offset);             }              StreamUtils.copy(in, destinationStream, length);             return length;         }     };feature envy;long method, blob;t;t;f;long method,  blob;feature envy;0;10266;https://github.com/apache/nifi/blob/c8eff590efa3babcda0b755009224dcac168708b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/repository/VolatileContentRepository.java/#L397-L418;2;1195;10266
1209;{     "output": "YES I found bad smells the bad smells are: 1. Long Method, 2. Blob" };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@UriEndpoint(firstVersion = "2.1.0", scheme = "quickfix", title = "QuickFix", syntax = "quickfix:configurationName", label = "messaging") public class QuickfixjEndpoint extends DefaultEndpoint implements QuickfixjEventListener, MultipleConsumersSupport {     public static final String EVENT_CATEGORY_KEY = "EventCategory";     public static final String SESSION_ID_KEY = "SessionID";     public static final String MESSAGE_TYPE_KEY = "MessageType";     public static final String DATA_DICTIONARY_KEY = "DataDictionary";      private final QuickfixjEngine engine;     private final List consumers = new CopyOnWriteArrayList<>();      @UriPath @Metadata(required = true)     private String configurationName;     @UriParam     private SessionID sessionID;     @UriParam     private boolean lazyCreateEngine;      public QuickfixjEndpoint(QuickfixjEngine engine, String uri, Component component) {         super(uri, component);         this.engine = engine;     }      public SessionID getSessionID() {         return sessionID;     }      /**      * The optional sessionID identifies a specific FIX session. The format of the sessionID is:      * (BeginString):(SenderCompID)[/(SenderSubID)[/(SenderLocationID)]]->(TargetCompID)[/(TargetSubID)[/(TargetLocationID)]]      */     public void setSessionID(SessionID sessionID) {         this.sessionID = sessionID;     }      public String getConfigurationName() {         return configurationName;     }      /**      * The configFile is the name of the QuickFIX/J configuration to use for the FIX engine (located as a resource found in your classpath).      */     public void setConfigurationName(String configurationName) {         this.configurationName = configurationName;     }      public boolean isLazyCreateEngine() {         return lazyCreateEngine;     }      /**      * This option allows to create QuickFIX/J engine on demand.      * Value true means the engine is started when first message is send or there's consumer configured in route definition.      * When false value is used, the engine is started at the endpoint creation.      * When this parameter is missing, the value of component's property lazyCreateEngines is being used.      */     public void setLazyCreateEngine(boolean lazyCreateEngine) {         this.lazyCreateEngine = lazyCreateEngine;     }      @Override     public Consumer createConsumer(Processor processor) throws Exception {         log.info("Creating QuickFIX/J consumer: {}, ExchangePattern={}", sessionID != null ? sessionID : "No Session", getExchangePattern());         QuickfixjConsumer consumer = new QuickfixjConsumer(this, processor);         configureConsumer(consumer);         consumers.add(consumer);         return consumer;     }      @Override     public Producer createProducer() throws Exception {         log.info("Creating QuickFIX/J producer: {}", sessionID != null ? sessionID : "No Session");         if (isWildcarded()) {             throw new ResolveEndpointFailedException("Cannot create consumer on wildcarded session identifier: " + sessionID);         }         return new QuickfixjProducer(this);     }      @Override     public boolean isSingleton() {         return true;     }      @Override     public void onEvent(QuickfixjEventCategory eventCategory, SessionID sessionID, Message message) throws Exception {         if (this.sessionID == null || isMatching(sessionID)) {             for (QuickfixjConsumer consumer : consumers) {                 Exchange exchange = QuickfixjConverters.toExchange(this, sessionID, message, eventCategory, getExchangePattern());                 consumer.onExchange(exchange);                 if (exchange.getException() != null) {                     throw exchange.getException();                 }             }         }     }      private boolean isMatching(SessionID sessionID) {         if (this.sessionID.equals(sessionID)) {             return true;         }         return isMatching(this.sessionID.getBeginString(), sessionID.getBeginString())             && isMatching(this.sessionID.getSenderCompID(), sessionID.getSenderCompID())             && isMatching(this.sessionID.getSenderSubID(), sessionID.getSenderSubID())             && isMatching(this.sessionID.getSenderLocationID(), sessionID.getSenderLocationID())             && isMatching(this.sessionID.getTargetCompID(), sessionID.getTargetCompID())             && isMatching(this.sessionID.getTargetSubID(), sessionID.getTargetSubID())              && isMatching(this.sessionID.getTargetLocationID(), sessionID.getTargetLocationID());     }      private boolean isMatching(String s1, String s2) {         return s1.equals("") || s1.equals("*") || s1.equals(s2);     }      private boolean isWildcarded() {         if (sessionID == null) {             return false;         }         return sessionID.getBeginString().equals("*")             || sessionID.getSenderCompID().equals("*")             || sessionID.getSenderSubID().equals("*")             || sessionID.getSenderLocationID().equals("*")             || sessionID.getTargetCompID().equals("*")             || sessionID.getTargetSubID().equals("*")             || sessionID.getTargetLocationID().equals("*");     }      @Override     public boolean isMultipleConsumersSupported() {         return true;     }      /**      * Initializing and starts the engine if it wasn't initialized so far.      */     public void ensureInitialized() throws Exception {         if (!engine.isInitialized()) {             synchronized (engine) {                 if (!engine.isInitialized()) {                     engine.initializeEngine();                     engine.start();                 }             }         }     }      public QuickfixjEngine getEngine() {         return engine;     }          @Override     protected void doStop() throws Exception {         // clear list of consumers         consumers.clear();     } };data class;1. long method, 2. blob ;t;t;f;1. long method,  2. blob ;data class;0;10306;https://github.com/apache/camel/blob/8a85a70643c4d6eec2d3abddeea44ecb06c2f486/components/camel-quickfix/src/main/java/org/apache/camel/component/quickfixj/QuickfixjEndpoint.java/#L41-L194;2;1209;10306
1215;         {             "message": "YES I found bad smells",             "detected_bad_smells": [                 "Blob",                 "Data Class"             ]         };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
        // System.out.println("        skip rewind!");         // }       }       assert length == f.prefix;       assert termOrd == f.termOrdOrig;     } else {       f.nextEnt = -1;       f.prefix = length;       f.state.termBlockOrd = 0;       f.termOrdOrig = termOrd;       // System.out.println("set termOrdOrig=" + termOrd);       f.termOrd = termOrd;       f.fpOrig = f.fp = fp;       f.lastSubFP = -1;       // if (DEBUG) {       //   final int sav = term.length;       //   term.length = length;       //   System.out.println("      push new frame ord=" + f.ord + " fp=" + f.fp + " hasTerms=" + f.hasTerms + " isFloor=" + f.isFloor + " pref=" + brToString(term));       //   term.length = sav;       // }     }      return f;   }    // asserts only   private boolean clearEOF() {     eof = false;     return true;   }    // asserts only   private boolean setEOF() {     eof = true;     return true;;long method;blob, data class;t;t;f;blob,  data class;long method;0;10318;https://github.com/apache/lucene-solr/blob/bca22d58e2d126ec6d349d375d3ea028892104e1/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java/#L174-L208;2;1215;10318
1239;{      "message": "YES I found bad smells",     "detected_bad_smells": [         "Long Method",         "Blob"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  public boolean equals(TListSentryPrivilegesRequest that) {     if (that == null)       return false;      boolean this_present_protocol_version = true;     boolean that_present_protocol_version = true;     if (this_present_protocol_version || that_present_protocol_version) {       if (!(this_present_protocol_version && that_present_protocol_version))         return false;       if (this.protocol_version != that.protocol_version)         return false;     }      boolean this_present_requestorUserName = true && this.isSetRequestorUserName();     boolean that_present_requestorUserName = true && that.isSetRequestorUserName();     if (this_present_requestorUserName || that_present_requestorUserName) {       if (!(this_present_requestorUserName && that_present_requestorUserName))         return false;       if (!this.requestorUserName.equals(that.requestorUserName))         return false;     }      boolean this_present_roleName = true && this.isSetRoleName();     boolean that_present_roleName = true && that.isSetRoleName();     if (this_present_roleName || that_present_roleName) {       if (!(this_present_roleName && that_present_roleName))         return false;       if (!this.roleName.equals(that.roleName))         return false;     }      boolean this_present_authorizableHierarchy = true && this.isSetAuthorizableHierarchy();     boolean that_present_authorizableHierarchy = true && that.isSetAuthorizableHierarchy();     if (this_present_authorizableHierarchy || that_present_authorizableHierarchy) {       if (!(this_present_authorizableHierarchy && that_present_authorizableHierarchy))         return false;       if (!this.authorizableHierarchy.equals(that.authorizableHierarchy))         return false;     }      return true;   };long method;long method, blob;t;t;t; blob;;0;10404;https://github.com/apache/incubator-sentry/blob/4643f988a5e0ce2b9749e6365edea3a16482de86/sentry-provider/sentry-provider-db/src/gen/thrift/gen-javabean/org/apache/sentry/provider/db/service/thrift/TListSentryPrivilegesRequest.java/#L360-L401;2;1239;10404
1242;   	{   		"message": "YES, I found bad smells",   		"detected_bad_smells": [   			"1. Blob",   			"2. Data Class"   		]   	};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public abstract class NexmarkQueryTransform     extends PTransform, PCollection> {    private transient PCollection> sideInput = null;    protected NexmarkQueryTransform(String name) {     super(name);   }    /** Whether this query expects a side input to be populated. Defaults to {@code false}. */   public boolean needsSideInput() {     return false;   }    /**    * Set the side input for the query.    *    * Note that due to the nature of side inputs, this instance of the query is now fixed and can    * only be safely applied in the pipeline where the side input was created.    */   public void setSideInput(PCollection> sideInput) {     this.sideInput = sideInput;   }    /** Get the side input, if any. */   public @Nullable PCollection> getSideInput() {     return sideInput;   } };data class;1. blob, 2. data class;t;t;t;1. blob;;0;10414;https://github.com/apache/beam/blob/a956ff77a8448e5f2c12f6695fec608348b5ab60/sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/NexmarkQueryTransform.java/#L34-L62;2;1242;10414
1245;{"message": "YES I found bad smells", "bad smells are": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class Ipam {   private String driver;   private List config;   private Map options;    public String getDriver() {     return driver;   }    public void setDriver(String driver) {     this.driver = driver;   }    public Ipam withDriver(String driver) {     this.driver = driver;     return this;   }    public List getConfig() {     return config;   }    public void setConfig(List config) {     this.config = config;   }    public Ipam withConfig(List config) {     this.config = config;     return this;   }    public Map getOptions() {     return options;   }    public void setOptions(Map options) {     this.options = options;   }    public Ipam withOptions(Map options) {     this.options = options;     return this;   }    @Override   public boolean equals(Object obj) {     if (this == obj) {       return true;     }     if (!(obj instanceof Ipam)) {       return false;     }     final Ipam that = (Ipam) obj;     return Objects.equals(driver, that.driver)         && getConfig().equals(that.getConfig())         && getOptions().equals(that.getOptions());   }    @Override   public int hashCode() {     int hash = 7;     hash = 31 * hash + Objects.hashCode(driver);     hash = 31 * hash + getConfig().hashCode();     hash = 31 * hash + getOptions().hashCode();     return hash;   }    @Override   public String toString() {     return "Ipam{"         + "driver='"         + driver         + '\''         + ", config="         + config         + ", options="         + options         + '}';   } };data class;blob, data class;t;t;t;blob;;0;10419;https://github.com/eclipse/che/blob/c5498c2ac562cd8a2fc79a6bb0446d291f05a201/infrastructures/docker/docker-client/src/main/java/org/eclipse/che/infrastructure/docker/client/json/network/Ipam.java/#L19-L98;2;1245;10419
1250;{     "output": "YES I found bad smells",     "bad smells are": [         "Blob",         "Data Class"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@XmlAccessorType(XmlAccessType.FIELD) @XmlType(name = "faces-config-propertyType", propOrder = {     "descriptions",     "displayNames",     "icon",     "propertyName",     "propertyClass",     "defaultValue",     "suggestedValue",     "propertyExtension" }) public class FacesProperty {      @XmlTransient     protected TextMap description = new TextMap();     @XmlTransient     protected TextMap displayName = new TextMap();     @XmlElement(name = "icon", required = true)     protected LocalCollection icon = new LocalCollection();     @XmlElement(name = "property-name", required = true)     protected java.lang.String propertyName;     @XmlElement(name = "property-class", required = true)     protected java.lang.String propertyClass;     @XmlElement(name = "default-value")     protected java.lang.String defaultValue;     @XmlElement(name = "suggested-value")     protected java.lang.String suggestedValue;     @XmlElement(name = "property-extension")     protected List propertyExtension;     @XmlAttribute     @XmlJavaTypeAdapter(CollapsedStringAdapter.class)     @XmlID     @XmlSchemaType(name = "ID")     protected java.lang.String id;      @XmlElement(name = "description", required = true)     public Text[] getDescriptions() {         return description.toArray();     }      public void setDescriptions(Text[] text) {         description.set(text);     }      public String getDescription() {         return description.get();     }      @XmlElement(name = "display-name", required = true)     public Text[] getDisplayNames() {         return displayName.toArray();     }      public void setDisplayNames(Text[] text) {         displayName.set(text);     }      public String getDisplayName() {         return displayName.get();     }      public Collection getIcons() {         if (icon == null) {             icon = new LocalCollection();         }         return icon;     }      public Map getIconMap() {         if (icon == null) {             icon = new LocalCollection();         }         return icon.toMap();     }      public Icon getIcon() {         return icon.getLocal();     }      /**      * Gets the value of the propertyName property.      *       * @return      *     possible object is      *     {@link java.lang.String }      *           */     public java.lang.String getPropertyName() {         return propertyName;     }      /**      * Sets the value of the propertyName property.      *       * @param value      *     allowed object is      *     {@link java.lang.String }      *           */     public void setPropertyName(java.lang.String value) {         this.propertyName = value;     }      /**      * Gets the value of the propertyClass property.      *       * @return      *     possible object is      *     {@link java.lang.String }      *           */     public java.lang.String getPropertyClass() {         return propertyClass;     }      /**      * Sets the value of the propertyClass property.      *       * @param value      *     allowed object is      *     {@link java.lang.String }      *           */     public void setPropertyClass(java.lang.String value) {         this.propertyClass = value;     }      /**      * Gets the value of the defaultValue property.      *       * @return      *     possible object is      *     {@link java.lang.String }      *           */     public java.lang.String getDefaultValue() {         return defaultValue;     }      /**      * Sets the value of the defaultValue property.      *       * @param value      *     allowed object is      *     {@link java.lang.String }      *           */     public void setDefaultValue(java.lang.String value) {         this.defaultValue = value;     }      /**      * Gets the value of the suggestedValue property.      *       * @return      *     possible object is      *     {@link java.lang.String }      *           */     public java.lang.String getSuggestedValue() {         return suggestedValue;     }      /**      * Sets the value of the suggestedValue property.      *       * @param value      *     allowed object is      *     {@link java.lang.String }      *           */     public void setSuggestedValue(java.lang.String value) {         this.suggestedValue = value;     }      /**      * Gets the value of the propertyExtension property.      *       *       * This accessor method returns a reference to the live list,      * not a snapshot. Therefore any modification you make to the      * returned list will be present inside the JAXB object.      * This is why there is not a set method for the propertyExtension property.      *       *       * For example, to add a new item, do as follows:      *       *    getPropertyExtension().add(newItem);      *       *       *       *       * Objects of the following type(s) are allowed in the list      * {@link FacesPropertyExtension }      *       *       */     public List getPropertyExtension() {         if (propertyExtension == null) {             propertyExtension = new ArrayList();         }         return this.propertyExtension;     }      /**      * Gets the value of the id property.      *       * @return      *     possible object is      *     {@link java.lang.String }      *           */     public java.lang.String getId() {         return id;     }      /**      * Sets the value of the id property.      *       * @param value      *     allowed object is      *     {@link java.lang.String }      *           */     public void setId(java.lang.String value) {         this.id = value;     }  };data class;blob, data class;t;t;t;blob;;0;10436;https://github.com/apache/openejb/blob/f10c077ade927d73bdbd9ed4cc28b79f58a1cd66/openejb/container/openejb-jee/src/main/java/org/apache/openejb/jee/FacesProperty.java/#L70-L298;2;1250;10436
1253;{"response": "YES, I found bad smells", "detected_bad_smells": ["Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@XmlAccessorType(XmlAccessType.FIELD) @XmlType(name = "EObject", propOrder = { "extensions" }) public class EObject {  	@XmlElement(name = "Extension", namespace = "http://www.omg.org/XMI") 	protected List extensions; 	@XmlAttribute(namespace = "http://www.omg.org/XMI") 	@XmlJavaTypeAdapter(CollapsedStringAdapter.class) 	@XmlID 	protected String id; 	@XmlAttribute(namespace = "http://www.omg.org/XMI") 	protected QName type; 	@XmlAttribute(namespace = "http://www.omg.org/XMI") 	protected String version; 	@XmlAttribute 	protected String href; 	@XmlAttribute(namespace = "http://www.omg.org/XMI") 	@XmlIDREF 	protected Object idref; 	@XmlAttribute(namespace = "http://www.omg.org/XMI") 	protected String label; 	@XmlAttribute(namespace = "http://www.omg.org/XMI") 	protected String uuid;  	/** 	 * Gets the value of the extensions property. 	 *  	 *  	 * This accessor method returns a reference to the live list, not a 	 * snapshot. Therefore any modification you make to the returned list will 	 * be present inside the JAXB object. This is why there is not a 	 * set method for the extensions property. 	 *  	 *  	 * For example, to add a new item, do as follows: 	 *  	 *  	 * getExtensions().add(newItem); 	 *  	 *  	 *  	 *  	 * Objects of the following type(s) are allowed in the list 	 * {@link Extension } 	 *  	 *  	 */ 	public List getExtensions() { 		if (extensions == null) { 			extensions = new ArrayList(); 		} 		return this.extensions; 	}  	/** 	 * Gets the value of the id property. 	 *  	 * @return possible object is {@link String } 	 *  	 */ 	public String getId() { 		return id; 	}  	/** 	 * Sets the value of the id property. 	 *  	 * @param value 	 *            allowed object is {@link String } 	 *  	 */ 	public void setId(String value) { 		this.id = value; 	}  	/** 	 * Gets the value of the type property. 	 *  	 * @return possible object is {@link QName } 	 *  	 */ 	public QName getType() { 		return type; 	}  	/** 	 * Sets the value of the type property. 	 *  	 * @param value 	 *            allowed object is {@link QName } 	 *  	 */ 	public void setType(QName value) { 		this.type = value; 	}  	/** 	 * Gets the value of the version property. 	 *  	 * @return possible object is {@link String } 	 *  	 */ 	public String getVersion() { 		if (version == null) { 			return "2.0"; 		} else { 			return version; 		} 	}  	/** 	 * Sets the value of the version property. 	 *  	 * @param value 	 *            allowed object is {@link String } 	 *  	 */ 	public void setVersion(String value) { 		this.version = value; 	}  	/** 	 * Gets the value of the href property. 	 *  	 * @return possible object is {@link String } 	 *  	 */ 	public String getHref() { 		return href; 	}  	/** 	 * Sets the value of the href property. 	 *  	 * @param value 	 *            allowed object is {@link String } 	 *  	 */ 	public void setHref(String value) { 		this.href = value; 	}  	/** 	 * Gets the value of the idref property. 	 *  	 * @return possible object is {@link Object } 	 *  	 */ 	public Object getIdref() { 		return idref; 	}  	/** 	 * Sets the value of the idref property. 	 *  	 * @param value 	 *            allowed object is {@link Object } 	 *  	 */ 	public void setIdref(Object value) { 		this.idref = value; 	}  	/** 	 * Gets the value of the label property. 	 *  	 * @return possible object is {@link String } 	 *  	 */ 	public String getLabel() { 		return label; 	}  	/** 	 * Sets the value of the label property. 	 *  	 * @param value 	 *            allowed object is {@link String } 	 *  	 */ 	public void setLabel(String value) { 		this.label = value; 	}  	/** 	 * Gets the value of the uuid property. 	 *  	 * @return possible object is {@link String } 	 *  	 */ 	public String getUuid() { 		return uuid; 	}  	/** 	 * Sets the value of the uuid property. 	 *  	 * @param value 	 *            allowed object is {@link String } 	 *  	 */ 	public void setUuid(String value) { 		this.uuid = value; 	}  };data class;blob;t;t;f;blob;data class;0;10456;https://github.com/apache/openejb/blob/f10c077ade927d73bdbd9ed4cc28b79f58a1cd66/openejb/container/openejb-jee/src/main/java/org/apache/openejb/jee/was/v6/ecore/EObject.java/#L57-L262;2;1253;10456
1257;{     "output": "YES I found bad smells",     "bad smells are": [         "Blob",         "Data Class"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@XmlAccessorType(XmlAccessType.FIELD) @XmlType(name = "faces-config-propertyType", propOrder = {     "descriptions",     "displayNames",     "icon",     "propertyName",     "propertyClass",     "defaultValue",     "suggestedValue",     "propertyExtension" }) public class FacesProperty {      @XmlTransient     protected TextMap description = new TextMap();     @XmlTransient     protected TextMap displayName = new TextMap();     @XmlElement(name = "icon", required = true)     protected LocalCollection icon = new LocalCollection();     @XmlElement(name = "property-name", required = true)     protected java.lang.String propertyName;     @XmlElement(name = "property-class", required = true)     protected java.lang.String propertyClass;     @XmlElement(name = "default-value")     protected java.lang.String defaultValue;     @XmlElement(name = "suggested-value")     protected java.lang.String suggestedValue;     @XmlElement(name = "property-extension")     protected List propertyExtension;     @XmlAttribute     @XmlJavaTypeAdapter(CollapsedStringAdapter.class)     @XmlID     @XmlSchemaType(name = "ID")     protected java.lang.String id;      @XmlElement(name = "description", required = true)     public Text[] getDescriptions() {         return description.toArray();     }      public void setDescriptions(Text[] text) {         description.set(text);     }      public String getDescription() {         return description.get();     }      @XmlElement(name = "display-name", required = true)     public Text[] getDisplayNames() {         return displayName.toArray();     }      public void setDisplayNames(Text[] text) {         displayName.set(text);     }      public String getDisplayName() {         return displayName.get();     }      public Collection getIcons() {         if (icon == null) {             icon = new LocalCollection();         }         return icon;     }      public Map getIconMap() {         if (icon == null) {             icon = new LocalCollection();         }         return icon.toMap();     }      public Icon getIcon() {         return icon.getLocal();     }      /**      * Gets the value of the propertyName property.      *       * @return      *     possible object is      *     {@link java.lang.String }      *           */     public java.lang.String getPropertyName() {         return propertyName;     }      /**      * Sets the value of the propertyName property.      *       * @param value      *     allowed object is      *     {@link java.lang.String }      *           */     public void setPropertyName(java.lang.String value) {         this.propertyName = value;     }      /**      * Gets the value of the propertyClass property.      *       * @return      *     possible object is      *     {@link java.lang.String }      *           */     public java.lang.String getPropertyClass() {         return propertyClass;     }      /**      * Sets the value of the propertyClass property.      *       * @param value      *     allowed object is      *     {@link java.lang.String }      *           */     public void setPropertyClass(java.lang.String value) {         this.propertyClass = value;     }      /**      * Gets the value of the defaultValue property.      *       * @return      *     possible object is      *     {@link java.lang.String }      *           */     public java.lang.String getDefaultValue() {         return defaultValue;     }      /**      * Sets the value of the defaultValue property.      *       * @param value      *     allowed object is      *     {@link java.lang.String }      *           */     public void setDefaultValue(java.lang.String value) {         this.defaultValue = value;     }      /**      * Gets the value of the suggestedValue property.      *       * @return      *     possible object is      *     {@link java.lang.String }      *           */     public java.lang.String getSuggestedValue() {         return suggestedValue;     }      /**      * Sets the value of the suggestedValue property.      *       * @param value      *     allowed object is      *     {@link java.lang.String }      *           */     public void setSuggestedValue(java.lang.String value) {         this.suggestedValue = value;     }      /**      * Gets the value of the propertyExtension property.      *       *       * This accessor method returns a reference to the live list,      * not a snapshot. Therefore any modification you make to the      * returned list will be present inside the JAXB object.      * This is why there is not a set method for the propertyExtension property.      *       *       * For example, to add a new item, do as follows:      *       *    getPropertyExtension().add(newItem);      *       *       *       *       * Objects of the following type(s) are allowed in the list      * {@link FacesPropertyExtension }      *       *       */     public List getPropertyExtension() {         if (propertyExtension == null) {             propertyExtension = new ArrayList();         }         return this.propertyExtension;     }      /**      * Gets the value of the id property.      *       * @return      *     possible object is      *     {@link java.lang.String }      *           */     public java.lang.String getId() {         return id;     }      /**      * Sets the value of the id property.      *       * @param value      *     allowed object is      *     {@link java.lang.String }      *           */     public void setId(java.lang.String value) {         this.id = value;     }  };data class;blob, data class;t;t;t;blob;;0;10498;https://github.com/apache/openejb/blob/f10c077ade927d73bdbd9ed4cc28b79f58a1cd66/openejb/container/openejb-jee/src/main/java/org/apache/openejb/jee/FacesProperty.java/#L70-L298;2;1257;10498
1260;   {     "message": "YES I found bad smells",     "bad smells are": [       "Blob",       "Data Class"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  @XmlAccessorType(XmlAccessType.FIELD)   @XmlType(name = "", propOrder = {"gateways"})   public static class GatewayHub {      @XmlElement(name = "gateway", namespace = "http://geode.apache.org/schema/cache")     protected List gateways;     @XmlAttribute(name = "id", required = true)     protected String id;     @XmlAttribute(name = "bind-address")     protected String bindAddress;     @XmlAttribute(name = "maximum-time-between-pings")     protected String maximumTimeBetweenPings;     @XmlAttribute(name = "port")     protected String port;     @XmlAttribute(name = "socket-buffer-size")     protected String socketBufferSize;     @XmlAttribute(name = "startup-policy")     protected String startupPolicy;     @XmlAttribute(name = "manual-start")     protected Boolean manualStart;     @XmlAttribute(name = "max-connections")     protected BigInteger maxConnections;      /**      * Gets the value of the gateway property.      *      *       * This accessor method returns a reference to the live list,      * not a snapshot. Therefore any modification you make to the      * returned list will be present inside the JAXB object.      * This is why there is not a set method for the gateway property.      *      *       * For example, to add a new item, do as follows:      *      *       * getGateway().add(newItem);      *       *      *      *       * Objects of the following type(s) are allowed in the list      * {@link CacheConfig.GatewayHub.Gateway }      *      *      */     public List getGateway() {       if (gateways == null) {         gateways = new ArrayList();       }       return this.gateways;     }      /**      * Gets the value of the id property.      *      * possible object is      * {@link String }      *      */     public String getId() {       return id;     }      /**      * Sets the value of the id property.      *      * allowed object is      * {@link String }      *      */     public void setId(String value) {       this.id = value;     }      /**      * Gets the value of the bindAddress property.      *      * possible object is      * {@link String }      *      */     public String getBindAddress() {       return bindAddress;     }      /**      * Sets the value of the bindAddress property.      *      * allowed object is      * {@link String }      *      */     public void setBindAddress(String value) {       this.bindAddress = value;     }      /**      * Gets the value of the maximumTimeBetweenPings property.      *      * possible object is      * {@link String }      *      */     public String getMaximumTimeBetweenPings() {       return maximumTimeBetweenPings;     }      /**      * Sets the value of the maximumTimeBetweenPings property.      *      * allowed object is      * {@link String }      *      */     public void setMaximumTimeBetweenPings(String value) {       this.maximumTimeBetweenPings = value;     }      /**      * Gets the value of the port property.      *      * possible object is      * {@link String }      *      */     public String getPort() {       return port;     }      /**      * Sets the value of the port property.      *      * allowed object is      * {@link String }      *      */     public void setPort(String value) {       this.port = value;     }      /**      * Gets the value of the socketBufferSize property.      *      * possible object is      * {@link String }      *      */     public String getSocketBufferSize() {       return socketBufferSize;     }      /**      * Sets the value of the socketBufferSize property.      *      * allowed object is      * {@link String }      *      */     public void setSocketBufferSize(String value) {       this.socketBufferSize = value;     }      /**      * Gets the value of the startupPolicy property.      *      * possible object is      * {@link String }      *      */     public String getStartupPolicy() {       return startupPolicy;     }      /**      * Sets the value of the startupPolicy property.      *      * allowed object is      * {@link String }      *      */     public void setStartupPolicy(String value) {       this.startupPolicy = value;     }      /**      * Gets the value of the manualStart property.      *      * possible object is      * {@link Boolean }      *      */     public Boolean isManualStart() {       return manualStart;     }      /**      * Sets the value of the manualStart property.      *      * allowed object is      * {@link Boolean }      *      */     public void setManualStart(Boolean value) {       this.manualStart = value;     }      /**      * Gets the value of the maxConnections property.      *      * possible object is      * {@link BigInteger }      *      */     public BigInteger getMaxConnections() {       return maxConnections;     }      /**      * Sets the value of the maxConnections property.      *      * allowed object is      * {@link BigInteger }      *      */     public void setMaxConnections(BigInteger value) {       this.maxConnections = value;     }       /**      *       * Java class for anonymous complex type.      *      *       * The following schema fragment specifies the expected content contained within this class.      *      *       * <complexType>      *   <complexContent>      *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">      *       <sequence>      *         <choice>      *           <element name="gateway-endpoint" maxOccurs="unbounded">      *             <complexType>      *               <complexContent>      *                 <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">      *                   <attribute name="host" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />      *                   <attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />      *                   <attribute name="port" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />      *                 </restriction>      *               </complexContent>      *             </complexType>      *           </element>      *           <element name="gateway-listener" maxOccurs="unbounded">      *             <complexType>      *               <complexContent>      *                 <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">      *                   <sequence>      *                     <element name="class-name" type="{http://geode.apache.org/schema/cache}class-name-type"/>      *                     <element name="parameter" type="{http://geode.apache.org/schema/cache}parameter-type" maxOccurs="unbounded" minOccurs="0"/>      *                   </sequence>      *                 </restriction>      *               </complexContent>      *             </complexType>      *           </element>      *         </choice>      *         <element name="gateway-queue" minOccurs="0">      *           <complexType>      *             <complexContent>      *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">      *                 <attribute name="alert-threshold" type="{http://www.w3.org/2001/XMLSchema}string" />      *                 <attribute name="batch-conflation" type="{http://www.w3.org/2001/XMLSchema}boolean" />      *                 <attribute name="batch-size" type="{http://www.w3.org/2001/XMLSchema}string" />      *                 <attribute name="batch-time-interval" type="{http://www.w3.org/2001/XMLSchema}string" />      *                 <attribute name="enable-persistence" type="{http://www.w3.org/2001/XMLSchema}boolean" />      *                 <attribute name="disk-store-name" type="{http://www.w3.org/2001/XMLSchema}string" />      *                 <attribute name="roll-oplogs" type="{http://www.w3.org/2001/XMLSchema}boolean" />      *                 <attribute name="maximum-queue-memory" type="{http://www.w3.org/2001/XMLSchema}string" />      *                 <attribute name="overflow-directory" type="{http://www.w3.org/2001/XMLSchema}string" />      *               </restriction>      *             </complexContent>      *           </complexType>      *         </element>      *       </sequence>      *       <attribute name="early-ack" type="{http://www.w3.org/2001/XMLSchema}boolean" />      *       <attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />      *       <attribute name="socket-buffer-size" type="{http://www.w3.org/2001/XMLSchema}string" />      *       <attribute name="socket-read-timeout" type="{http://www.w3.org/2001/XMLSchema}string" />      *       <attribute name="concurrency-level" type="{http://www.w3.org/2001/XMLSchema}string" />      *       <attribute name="order-policy" type="{http://www.w3.org/2001/XMLSchema}string" />      *     </restriction>      *   </complexContent>      * </complexType>      *       *      *      */     @XmlAccessorType(XmlAccessType.FIELD)     @XmlType(name = "", propOrder = {"gatewayEndpoints", "gatewayListeners", "gatewayQueue"})     public static class Gateway {        @XmlElement(name = "gateway-endpoint", namespace = "http://geode.apache.org/schema/cache")       protected List gatewayEndpoints;       @XmlElement(name = "gateway-listener", namespace = "http://geode.apache.org/schema/cache")       protected List gatewayListeners;       @XmlElement(name = "gateway-queue", namespace = "http://geode.apache.org/schema/cache")       protected CacheConfig.GatewayHub.Gateway.GatewayQueue gatewayQueue;       @XmlAttribute(name = "early-ack")       protected Boolean earlyAck;       @XmlAttribute(name = "id", required = true)       protected String id;       @XmlAttribute(name = "socket-buffer-size")       protected String socketBufferSize;       @XmlAttribute(name = "socket-read-timeout")       protected String socketReadTimeout;       @XmlAttribute(name = "concurrency-level")       protected String concurrencyLevel;       @XmlAttribute(name = "order-policy")       protected String orderPolicy;        /**        * Gets the value of the gatewayEndpoints property.        *        *         * This accessor method returns a reference to the live list,        * not a snapshot. Therefore any modification you make to the        * returned list will be present inside the JAXB object.        * This is why there is not a set method for the gatewayEndpoints property.        *        *         * For example, to add a new item, do as follows:        *        *         * getGatewayEndpoints().add(newItem);        *         *        *        *         * Objects of the following type(s) are allowed in the list        * {@link CacheConfig.GatewayHub.Gateway.GatewayEndpoint }        *        *        */       public List getGatewayEndpoints() {         if (gatewayEndpoints == null) {           gatewayEndpoints = new ArrayList();         }         return this.gatewayEndpoints;       }        /**        * Gets the value of the gatewayListeners property.        *        *         * This accessor method returns a reference to the live list,        * not a snapshot. Therefore any modification you make to the        * returned list will be present inside the JAXB object.        * This is why there is not a set method for the gatewayListeners property.        *        *         * For example, to add a new item, do as follows:        *        *         * getGatewayListeners().add(newItem);        *         *        *        *         * Objects of the following type(s) are allowed in the list        * {@link DeclarableType }        *        *        */       public List getGatewayListeners() {         if (gatewayListeners == null) {           gatewayListeners = new ArrayList();         }         return this.gatewayListeners;       }        /**        * Gets the value of the gatewayQueue property.        *        * possible object is        * {@link CacheConfig.GatewayHub.Gateway.GatewayQueue }        *        */       public CacheConfig.GatewayHub.Gateway.GatewayQueue getGatewayQueue() {         return gatewayQueue;       }        /**        * Sets the value of the gatewayQueue property.        *        * allowed object is        * {@link CacheConfig.GatewayHub.Gateway.GatewayQueue }        *        */       public void setGatewayQueue(CacheConfig.GatewayHub.Gateway.GatewayQueue value) {         this.gatewayQueue = value;       }        /**        * Gets the value of the earlyAck property.        *        * possible object is        * {@link Boolean }        *        */       public Boolean isEarlyAck() {         return earlyAck;       }        /**        * Sets the value of the earlyAck property.        *        * allowed object is        * {@link Boolean }        *        */       public void setEarlyAck(Boolean value) {         this.earlyAck = value;       }        /**        * Gets the value of the id property.        *        * possible object is        * {@link String }        *        */       public String getId() {         return id;       }        /**        * Sets the value of the id property.        *        * allowed object is        * {@link String }        *        */       public void setId(String value) {         this.id = value;       }        /**        * Gets the value of the socketBufferSize property.        *        * possible object is        * {@link String }        *        */       public String getSocketBufferSize() {         return socketBufferSize;       }        /**        * Sets the value of the socketBufferSize property.        *        * allowed object is        * {@link String }        *        */       public void setSocketBufferSize(String value) {         this.socketBufferSize = value;       }        /**        * Gets the value of the socketReadTimeout property.        *        * possible object is        * {@link String }        *        */       public String getSocketReadTimeout() {         return socketReadTimeout;       }        /**        * Sets the value of the socketReadTimeout property.        *        * allowed object is        * {@link String }        *        */       public void setSocketReadTimeout(String value) {         this.socketReadTimeout = value;       }        /**        * Gets the value of the concurrencyLevel property.        *        * possible object is        * {@link String }        *        */       public String getConcurrencyLevel() {         return concurrencyLevel;       }        /**        * Sets the value of the concurrencyLevel property.        *        * allowed object is        * {@link String }        *        */       public void setConcurrencyLevel(String value) {         this.concurrencyLevel = value;       }        /**        * Gets the value of the orderPolicy property.        *        * possible object is        * {@link String }        *        */       public String getOrderPolicy() {         return orderPolicy;       }        /**        * Sets the value of the orderPolicy property.        *        * allowed object is        * {@link String }        *        */       public void setOrderPolicy(String value) {         this.orderPolicy = value;       }         /**        *         * Java class for anonymous complex type.        *        *         * The following schema fragment specifies the expected content contained within this class.        *        *         * <complexType>        *   <complexContent>        *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">        *       <attribute name="host" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />        *       <attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />        *       <attribute name="port" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />        *     </restriction>        *   </complexContent>        * </complexType>        *         *        *        */       @XmlAccessorType(XmlAccessType.FIELD)       @XmlType(name = "")       public static class GatewayEndpoint {          @XmlAttribute(name = "host", required = true)         protected String host;         @XmlAttribute(name = "id", required = true)         protected String id;         @XmlAttribute(name = "port", required = true)         protected String port;          /**          * Gets the value of the host property.          *          * possible object is          * {@link String }          *          */         public String getHost() {           return host;         }          /**          * Sets the value of the host property.          *          * allowed object is          * {@link String }          *          */         public void setHost(String value) {           this.host = value;         }          /**          * Gets the value of the id property.          *          * possible object is          * {@link String }          *          */         public String getId() {           return id;         }          /**          * Sets the value of the id property.          *          * allowed object is          * {@link String }          *          */         public void setId(String value) {           this.id = value;         }          /**          * Gets the value of the port property.          *          * possible object is          * {@link String }          *          */         public String getPort() {           return port;         }          /**          * Sets the value of the port property.          *          * allowed object is          * {@link String }          *          */         public void setPort(String value) {           this.port = value;         }        }        /**        *         * Java class for anonymous complex type.        *        *         * The following schema fragment specifies the expected content contained within this class.        *        *         * <complexType>        *   <complexContent>        *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">        *       <attribute name="alert-threshold" type="{http://www.w3.org/2001/XMLSchema}string" />        *       <attribute name="batch-conflation" type="{http://www.w3.org/2001/XMLSchema}boolean" />        *       <attribute name="batch-size" type="{http://www.w3.org/2001/XMLSchema}string" />        *       <attribute name="batch-time-interval" type="{http://www.w3.org/2001/XMLSchema}string" />        *       <attribute name="enable-persistence" type="{http://www.w3.org/2001/XMLSchema}boolean" />        *       <attribute name="disk-store-name" type="{http://www.w3.org/2001/XMLSchema}string" />        *       <attribute name="roll-oplogs" type="{http://www.w3.org/2001/XMLSchema}boolean" />        *       <attribute name="maximum-queue-memory" type="{http://www.w3.org/2001/XMLSchema}string" />        *       <attribute name="overflow-directory" type="{http://www.w3.org/2001/XMLSchema}string" />        *     </restriction>        *   </complexContent>        * </complexType>        *         *        *        */       @XmlAccessorType(XmlAccessType.FIELD)       @XmlType(name = "")       public static class GatewayQueue {          @XmlAttribute(name = "alert-threshold")         protected String alertThreshold;         @XmlAttribute(name = "batch-conflation")         protected Boolean batchConflation;         @XmlAttribute(name = "batch-size")         protected String batchSize;         @XmlAttribute(name = "batch-time-interval")         protected String batchTimeInterval;         @XmlAttribute(name = "enable-persistence")         protected Boolean enablePersistence;         @XmlAttribute(name = "disk-store-name")         protected String diskStoreName;         @XmlAttribute(name = "roll-oplogs")         protected Boolean rollOplogs;         @XmlAttribute(name = "maximum-queue-memory")         protected String maximumQueueMemory;         @XmlAttribute(name = "overflow-directory")         protected String overflowDirectory;          /**          * Gets the value of the alertThreshold property.          *          * possible object is          * {@link String }          *          */         public String getAlertThreshold() {           return alertThreshold;         }          /**          * Sets the value of the alertThreshold property.          *          * allowed object is          * {@link String }          *          */         public void setAlertThreshold(String value) {           this.alertThreshold = value;         }          /**          * Gets the value of the batchConflation property.          *          * possible object is          * {@link Boolean }          *          */         public Boolean isBatchConflation() {           return batchConflation;         }          /**          * Sets the value of the batchConflation property.          *          * allowed object is          * {@link Boolean }          *          */         public void setBatchConflation(Boolean value) {           this.batchConflation = value;         }          /**          * Gets the value of the batchSize property.          *          * possible object is          * {@link String }          *          */         public String getBatchSize() {           return batchSize;         }          /**          * Sets the value of the batchSize property.          *          * allowed object is          * {@link String }          *          */         public void setBatchSize(String value) {           this.batchSize = value;         }          /**          * Gets the value of the batchTimeInterval property.          *          * possible object is          * {@link String }          *          */         public String getBatchTimeInterval() {           return batchTimeInterval;         }          /**          * Sets the value of the batchTimeInterval property.          *          * allowed object is          * {@link String }          *          */         public void setBatchTimeInterval(String value) {           this.batchTimeInterval = value;         }          /**          * Gets the value of the enablePersistence property.          *          * possible object is          * {@link Boolean }          *          */         public Boolean isEnablePersistence() {           return enablePersistence;         }          /**          * Sets the value of the enablePersistence property.          *          * allowed object is          * {@link Boolean }          *          */         public void setEnablePersistence(Boolean value) {           this.enablePersistence = value;         }          /**          * Gets the value of the diskStoreName property.          *          * possible object is          * {@link String }          *          */         public String getDiskStoreName() {           return diskStoreName;         }          /**          * Sets the value of the diskStoreName property.          *          * allowed object is          * {@link String }          *          */         public void setDiskStoreName(String value) {           this.diskStoreName = value;         }          /**          * Gets the value of the rollOplogs property.          *          * possible object is          * {@link Boolean }          *          */         public Boolean isRollOplogs() {           return rollOplogs;         }          /**          * Sets the value of the rollOplogs property.          *          * allowed object is          * {@link Boolean }          *          */         public void setRollOplogs(Boolean value) {           this.rollOplogs = value;         }          /**          * Gets the value of the maximumQueueMemory property.          *          * possible object is          * {@link String }          *          */         public String getMaximumQueueMemory() {           return maximumQueueMemory;         }          /**          * Sets the value of the maximumQueueMemory property.          *          * allowed object is          * {@link String }          *          */         public void setMaximumQueueMemory(String value) {           this.maximumQueueMemory = value;         }          /**          * Gets the value of the overflowDirectory property.          *          * possible object is          * {@link String }          *          */         public String getOverflowDirectory() {           return overflowDirectory;         }          /**          * Sets the value of the overflowDirectory property.          *          * allowed object is          * {@link String }          *          */         public void setOverflowDirectory(String value) {           this.overflowDirectory = value;         }        }      }    };data class;blob, data class;t;t;t;blob;;0;10504;https://github.com/apache/geode/blob/8fd839e8b73e40bd2dfd14f331b587431bd35a66/geode-management/src/main/java/org/apache/geode/cache/configuration/CacheConfig.java/#L1636-L2524;2;1260;10504
1285;     {         "message": "YES I found bad smells",         "bad smells are": [             "Blob"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class SimpleMessage implements Message {      private final MessageId messageId;     private final String subType;     private final String mediaType;     private final SharedInputStream content;     private final int bodyStartOctet;     private final Date internalDate;     private final long size;     private final Long textualLineCount;     private final List properties;     private final List attachments;      public SimpleMessage(MessageId messageId, SharedInputStream content, long size, Date internalDate, String subType, String mediaType, int bodyStartOctet, Long textualLineCount, List properties, List attachments) {         this.messageId = messageId;         this.subType = subType;         this.mediaType = mediaType;         this.content = content;         this.bodyStartOctet = bodyStartOctet;         this.internalDate = internalDate;         this.size = size;         this.textualLineCount = textualLineCount;         this.properties = properties;         this.attachments = attachments;     }      public SimpleMessage(MessageId messageId, SharedInputStream content, long size, Date internalDate, String subType, String mediaType, int bodyStartOctet, Long textualLineCount, List properties) {         this(messageId, content, size, internalDate, subType, mediaType, bodyStartOctet, textualLineCount, properties, ImmutableList.of());     }      @Override     public MessageId getMessageId() {         return messageId;     }      @Override     public Date getInternalDate() {         return internalDate;     }      @Override     public InputStream getBodyContent() throws IOException {         return content.newStream(bodyStartOctet, -1);     }      @Override     public String getMediaType() {         return mediaType;     }      @Override     public String getSubType() {         return subType;     }      @Override     public long getBodyOctets() {         return getFullContentOctets() - bodyStartOctet;     }      @Override     public long getHeaderOctets() {         return bodyStartOctet;     }      @Override     public long getFullContentOctets() {         return size;     }      @Override     public Long getTextualLineCount() {         return textualLineCount;     }      @Override     public InputStream getHeaderContent() throws IOException {         long headerEnd = bodyStartOctet;         if (headerEnd < 0) {             headerEnd = 0;         }         return content.newStream(0, headerEnd);     }      @Override     public InputStream getFullContent() throws IOException {         return content.newStream(0, -1);     }      @Override     public List getProperties() {         return properties;     }      @Override     public List getAttachments() {         return attachments;     } };data class;blob;t;t;f;blob;data class;0;10608;https://github.com/apache/james-project/blob/fa24a096a5853459c3769a34ccc68feb91626bfa/mailbox/store/src/main/java/org/apache/james/mailbox/store/mail/model/impl/SimpleMessage.java/#L35-L133;2;1285;10608
1286;{"message": "YES I found bad smells", "bad smells are": ["Blob", "Feature Envy"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@APICommand(name = "extractTemplate", description = "Extracts a template", responseObject = ExtractResponse.class,         requestHasSensitiveInfo = false, responseHasSensitiveInfo = false) public class ExtractTemplateCmd extends BaseAsyncCmd {     public static final Logger s_logger = Logger.getLogger(ExtractTemplateCmd.class.getName());      private static final String s_name = "extracttemplateresponse";      /////////////////////////////////////////////////////     //////////////// API parameters /////////////////////     /////////////////////////////////////////////////////      @Parameter(name = ApiConstants.ID, type = CommandType.UUID, entityType = TemplateResponse.class, required = true, description = "the ID of the template")     private Long id;      @Parameter(name = ApiConstants.URL, type = CommandType.STRING, required = false, length = 2048, description = "the url to which the ISO would be extracted")     private String url;      @Parameter(name = ApiConstants.ZONE_ID,                type = CommandType.UUID,                entityType = ZoneResponse.class,                required = false,                description = "the ID of the zone where the ISO is originally located")     private Long zoneId;      @Parameter(name = ApiConstants.MODE, type = CommandType.STRING, required = true, description = "the mode of extraction - HTTP_DOWNLOAD or FTP_UPLOAD")     private String mode;      /////////////////////////////////////////////////////     /////////////////// Accessors ///////////////////////     /////////////////////////////////////////////////////      public Long getId() {         return id;     }      public String getUrl() {         return url;     }      public Long getZoneId() {         return zoneId;     }      public String getMode() {         return mode;     }      /////////////////////////////////////////////////////     /////////////// API Implementation///////////////////     /////////////////////////////////////////////////////      @Override     public String getCommandName() {         return s_name;     }      public static String getStaticName() {         return s_name;     }      @Override     public long getEntityOwnerId() {         VirtualMachineTemplate template = _entityMgr.findById(VirtualMachineTemplate.class, getId());         if (template != null) {             return template.getAccountId();         }          // invalid id, parent this command to SYSTEM so ERROR events are tracked         return Account.ACCOUNT_ID_SYSTEM;     }      @Override     public String getEventType() {         return EventTypes.EVENT_TEMPLATE_EXTRACT;     }      @Override     public String getEventDescription() {      return "extracting template: " + this._uuidMgr.getUuid(VirtualMachineTemplate.class, getId()) + ((getZoneId() != null) ? " from zone: " + this._uuidMgr.getUuid(DataCenter.class, getZoneId()) : "");     }      @Override     public ApiCommandJobType getInstanceType() {         return ApiCommandJobType.Template;     }      @Override     public Long getInstanceId() {         return getId();     }      @Override     public void execute() {         try {             CallContext.current().setEventDetails(getEventDescription());             String uploadUrl = _templateService.extract(this);             if (uploadUrl != null) {                 ExtractResponse response = _responseGenerator.createExtractResponse(id, zoneId, getEntityOwnerId(), mode, uploadUrl);                 response.setResponseName(getCommandName());                 this.setResponseObject(response);             } else {                 throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, "Failed to extract template");             }         } catch (InternalErrorException ex) {             s_logger.warn("Exception: ", ex);             throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());         }     } };data class;blob, feature envy;t;t;f;blob,  feature envy;data class;0;10611;https://github.com/apache/cloudstack/blob/8d3feb100aab4a45b31a789f444038b892161eec/api/src/main/java/org/apache/cloudstack/api/command/user/template/ExtractTemplateCmd.java/#L39-L147;2;1286;10611
1292;     {         "message": "YES, I found bad smells",         "bad smells are": [             "Data Class",             "Blob"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    class ColumnFamilyRegionInfo {         private RegionInfo regionInfo;         private Set familySet;          public ColumnFamilyRegionInfo(RegionInfo regionInfo, Set familySet) {             this.regionInfo = regionInfo;             this.familySet = familySet;         }          public RegionInfo getRegionInfo() {             return regionInfo;         }          public Set getFamilySet() {             return familySet;         }          @Override         public boolean equals(Object obj) {             if (obj == this) { return true; }             if (!(obj instanceof ColumnFamilyRegionInfo)) { return false; }              ColumnFamilyRegionInfo c = (ColumnFamilyRegionInfo)obj;             return c.getRegionInfo().equals(this.regionInfo) && ByteUtil.match(this.familySet, c.getFamilySet());         }          @Override         public int hashCode() {             return this.getRegionInfo().hashCode();         }     };data class;data class, blob;t;t;t; blob;;0;10621;https://github.com/apache/phoenix/blob/69e5bb0b304a53967cef40b2a4cfc66e69ecaa51/phoenix-core/src/main/java/org/apache/phoenix/schema/stats/StatisticsCollectionRunTracker.java/#L129-L159;2;1292;10621
1298;   {     "response": "YES, I found bad smells",     "detected_bad_smells": [       "Long Method",       "Blob"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  private XMLEvent expectTag(String expected, boolean allowEnd)       throws IOException {     XMLEvent ev = null;     while (true) {       try {         ev = events.nextEvent();       } catch (XMLStreamException e) {         throw new IOException("Expecting " + expected +             ", but got XMLStreamException", e);       }       switch (ev.getEventType()) {       case XMLEvent.ATTRIBUTE:         throw new IOException("Got unexpected attribute: " + ev);       case XMLEvent.CHARACTERS:         if (!ev.asCharacters().isWhiteSpace()) {           throw new IOException("Got unxpected characters while " +               "looking for " + expected + ": " +               ev.asCharacters().getData());         }         break;       case XMLEvent.END_ELEMENT:         if (!allowEnd) {           throw new IOException("Got unexpected end event " +               "while looking for " + expected);         }         return ev;       case XMLEvent.START_ELEMENT:         if (!expected.startsWith("[")) {           if (!ev.asStartElement().getName().getLocalPart().                 equals(expected)) {             throw new IOException("Failed to find <" + expected + ">; " +                 "got " + ev.asStartElement().getName().getLocalPart() +                 " instead.");           }         }         return ev;       default:         // Ignore other event types like comment, etc.         if (LOG.isTraceEnabled()) {           LOG.trace("Skipping XMLEvent of type " +               ev.getEventType() + "(" +  ev + ")");         }         break;       }     }   };long method;long method, blob;t;t;t; blob;;0;10639;https://github.com/apache/hadoop/blob/128dd91e10080bdcbcd7d555fa3c4105e55a6b51/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java/#L184-L229;2;1298;10639
1343;     {         "response": "YES I found bad smells",         "detected_bad_smells": [             "1. Long Method",             "2. Blob"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  private void grantOrRevokeRoleOnGroup(List hivePrincipals, List roles,       HivePrincipal grantorPrinc, boolean isGrant) throws HiveAuthzPluginException,       HiveAccessControlException {     try {       sentryClient = getSentryClient();       // get principals       Set groups = Sets.newHashSet();       for (HivePrincipal principal : hivePrincipals) {         if (principal.getType() != HivePrincipalType.GROUP) {           String msg =               SentryHiveConstants.GRANT_REVOKE_NOT_SUPPORTED_FOR_PRINCIPAL + principal.getType();           throw new HiveAuthzPluginException(msg);         }         groups.add(principal.getName());       }        // grant/revoke role to/from principals       for (String roleName : roles) {         if (isGrant) {           sentryClient.grantRoleToGroups(grantorPrinc.getName(), roleName, groups);         } else {           sentryClient.revokeRoleFromGroups(grantorPrinc.getName(), roleName, groups);         }       }      } catch (SentryAccessDeniedException e) {       HiveOperation hiveOp = isGrant ? HiveOperation.GRANT_ROLE : HiveOperation.REVOKE_ROLE;       executeOnFailureHooks(hiveOp, e);     } catch (SentryUserException e) {       String msg = "Error when sentryClient grant/revoke role:" + e.getMessage();       executeOnErrorHooks(msg, e);     } finally {       if (sentryClient != null) {         sentryClient.close();       }     }   };long method;1. long method, 2. blob;t;t;t; 2. blob;;0;10745;https://github.com/apache/incubator-sentry/blob/4643f988a5e0ce2b9749e6365edea3a16482de86/sentry-binding/sentry-binding-hive-v2/src/main/java/org/apache/sentry/binding/hive/v2/authorizer/DefaultSentryAccessController.java/#L479-L515;2;1343;10745
1368;     {         "message": "YES I found bad smells",         "bad smells are": [             "Blob",             "Long Method"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class GridNearAtomicSingleUpdateRequest extends GridNearAtomicAbstractSingleUpdateRequest {     /** */     private static final long serialVersionUID = 0L;      /** Key to update. */     @GridToStringInclude     protected KeyCacheObject key;      /** Value to update. */     protected CacheObject val;      /**      * Empty constructor required by {@link Externalizable}.      */     public GridNearAtomicSingleUpdateRequest() {         // No-op.     }      /**      * Constructor.      *      * @param cacheId Cache ID.      * @param nodeId Node ID.      * @param futId Future ID.      * @param topVer Topology version.      * @param syncMode Synchronization mode.      * @param op Cache update operation.      * @param subjId Subject ID.      * @param taskNameHash Task name hash code.      * @param flags Flags.      * @param addDepInfo Deployment info flag.      */     GridNearAtomicSingleUpdateRequest(         int cacheId,         UUID nodeId,         long futId,         @NotNull AffinityTopologyVersion topVer,         CacheWriteSynchronizationMode syncMode,         GridCacheOperation op,         @Nullable UUID subjId,         int taskNameHash,         byte flags,         boolean addDepInfo     ) {         super(cacheId,             nodeId,             futId,             topVer,             syncMode,             op,             subjId,             taskNameHash,             flags,             addDepInfo         );     }      /** {@inheritDoc} */     @Override public int partition() {         assert key != null;          return key.partition();     }      /**      * @param key Key to add.      * @param val Optional update value.      * @param conflictTtl Conflict TTL (optional).      * @param conflictExpireTime Conflict expire time (optional).      * @param conflictVer Conflict version (optional).      */     @Override public void addUpdateEntry(KeyCacheObject key,         @Nullable Object val,         long conflictTtl,         long conflictExpireTime,         @Nullable GridCacheVersion conflictVer) {         assert op != TRANSFORM;         assert val != null || op == DELETE;         assert conflictTtl < 0 : conflictTtl;         assert conflictExpireTime < 0 : conflictExpireTime;         assert conflictVer == null : conflictVer;          this.key = key;          if (val != null) {             assert val instanceof CacheObject : val;              this.val = (CacheObject)val;         }     }      /** {@inheritDoc} */     @Override public int size() {         assert key != null;          return key == null ? 0 : 1;     }      /** {@inheritDoc} */     @Override public List keys() {         return Collections.singletonList(key);     }      /** {@inheritDoc} */     @Override public KeyCacheObject key(int idx) {         assert idx == 0 : idx;          return key;     }      /** {@inheritDoc} */     @Override public List values() {         return Collections.singletonList(val);     }      /** {@inheritDoc} */     @Override public CacheObject value(int idx) {         assert idx == 0 : idx;          return val;     }      /** {@inheritDoc} */     @Override public EntryProcessor entryProcessor(int idx) {         assert idx == 0 : idx;          return null;     }      /** {@inheritDoc} */     @Override public CacheObject writeValue(int idx) {         assert idx == 0 : idx;          return val;     }      /** {@inheritDoc} */     @Nullable @Override public List conflictVersions() {         return null;     }      /** {@inheritDoc} */     @Nullable @Override public GridCacheVersion conflictVersion(int idx) {         assert idx == 0 : idx;          return null;     }      /** {@inheritDoc} */     @Override public long conflictTtl(int idx) {         assert idx == 0 : idx;          return CU.TTL_NOT_CHANGED;     }      /** {@inheritDoc} */     @Override public long conflictExpireTime(int idx) {         assert idx == 0 : idx;          return CU.EXPIRE_TIME_CALCULATE;     }      /** {@inheritDoc} */     @Override public void prepareMarshal(GridCacheSharedContext ctx) throws IgniteCheckedException {         super.prepareMarshal(ctx);          GridCacheContext cctx = ctx.cacheContext(cacheId);          prepareMarshalCacheObject(key, cctx);          if (val != null)             prepareMarshalCacheObject(val, cctx);     }      /** {@inheritDoc} */     @Override public void finishUnmarshal(GridCacheSharedContext ctx, ClassLoader ldr) throws IgniteCheckedException {         super.finishUnmarshal(ctx, ldr);          GridCacheContext cctx = ctx.cacheContext(cacheId);          key.finishUnmarshal(cctx.cacheObjectContext(), ldr);          if (val != null)             val.finishUnmarshal(cctx.cacheObjectContext(), ldr);     }      /** {@inheritDoc} */     @Override public boolean writeTo(ByteBuffer buf, MessageWriter writer) {         writer.setBuffer(buf);          if (!super.writeTo(buf, writer))             return false;          if (!writer.isHeaderWritten()) {             if (!writer.writeHeader(directType(), fieldsCount()))                 return false;              writer.onHeaderWritten();         }          switch (writer.state()) {             case 11:                 if (!writer.writeMessage("key", key))                     return false;                  writer.incrementState();              case 12:                 if (!writer.writeMessage("val", val))                     return false;                  writer.incrementState();          }          return true;     }      /** {@inheritDoc} */     @Override public boolean readFrom(ByteBuffer buf, MessageReader reader) {         reader.setBuffer(buf);          if (!reader.beforeMessageRead())             return false;          if (!super.readFrom(buf, reader))             return false;          switch (reader.state()) {             case 11:                 key = reader.readMessage("key");                  if (!reader.isLastRead())                     return false;                  reader.incrementState();              case 12:                 val = reader.readMessage("val");                  if (!reader.isLastRead())                     return false;                  reader.incrementState();          }          return reader.afterMessageRead(GridNearAtomicSingleUpdateRequest.class);     }      /** {@inheritDoc} */     @Override public void cleanup(boolean clearKey) {         val = null;          if (clearKey)             key = null;     }      /** {@inheritDoc} */     @Override public short directType() {         return 125;     }      /** {@inheritDoc} */     @Override public byte fieldsCount() {         return 13;     }      /** {@inheritDoc} */     @Override public String toString() {         return S.toString(GridNearAtomicSingleUpdateRequest.class, this, "parent", super.toString());     } };data class;blob, long method;t;t;f;blob,  long method;data class;0;10790;https://github.com/apache/ignite/blob/7a7c407ea41477aae8508bfe871b4e9a67e1b277/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateRequest.java/#L49-L321;2;1368;10790
1404;   {     "response": "YES I found bad smells",     "bad smells are": [       "Blob",       "Long Method"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@XmlRootElement(name="mqtt") @XmlAccessorType(XmlAccessType.FIELD) public class MqttDTO extends ProtocolDTO {      @XmlAttribute(name="max_message_length")     public Integer max_message_length;      @XmlElementRef     public List protocol_filters = new ArrayList();      @XmlAttribute(name="queue_prefix")     public String queue_prefix;      @XmlAttribute(name="path_separator")     public String path_separator;      @XmlAttribute(name="any_child_wildcard")     public String any_child_wildcard;      @XmlAttribute(name="any_descendant_wildcard")     public String any_descendant_wildcard;      @XmlAttribute(name="regex_wildcard_start")     public String regex_wildcard_start;      @XmlAttribute(name="regex_wildcard_end")     public String regex_wildcard_end;      @XmlAttribute(name="part_pattern")     public String part_pattern;      @XmlAttribute(name="die_delay")     public Long die_delay;      @Override     public boolean equals(Object o) {         if (this == o) return true;         if (o == null || getClass() != o.getClass()) return false;         if (!super.equals(o)) return false;          MqttDTO mqttDTO = (MqttDTO) o;          if (any_child_wildcard != null ? !any_child_wildcard.equals(mqttDTO.any_child_wildcard) : mqttDTO.any_child_wildcard != null)             return false;         if (any_descendant_wildcard != null ? !any_descendant_wildcard.equals(mqttDTO.any_descendant_wildcard) : mqttDTO.any_descendant_wildcard != null)             return false;         if (max_message_length != null ? !max_message_length.equals(mqttDTO.max_message_length) : mqttDTO.max_message_length != null)             return false;         if (path_separator != null ? !path_separator.equals(mqttDTO.path_separator) : mqttDTO.path_separator != null)             return false;         if (protocol_filters != null ? !protocol_filters.equals(mqttDTO.protocol_filters) : mqttDTO.protocol_filters != null)             return false;         if (queue_prefix != null ? !queue_prefix.equals(mqttDTO.queue_prefix) : mqttDTO.queue_prefix != null)             return false;         if (regex_wildcard_end != null ? !regex_wildcard_end.equals(mqttDTO.regex_wildcard_end) : mqttDTO.regex_wildcard_end != null)             return false;         if (regex_wildcard_start != null ? !regex_wildcard_start.equals(mqttDTO.regex_wildcard_start) : mqttDTO.regex_wildcard_start != null)             return false;         if (part_pattern != null ? !part_pattern.equals(mqttDTO.part_pattern) : mqttDTO.part_pattern != null)             return false;          return true;     }      @Override     public int hashCode() {         int result = super.hashCode();         result = 31 * result + (max_message_length != null ? max_message_length.hashCode() : 0);         result = 31 * result + (protocol_filters != null ? protocol_filters.hashCode() : 0);         result = 31 * result + (queue_prefix != null ? queue_prefix.hashCode() : 0);         result = 31 * result + (part_pattern != null ? part_pattern.hashCode() : 0);         result = 31 * result + (path_separator != null ? path_separator.hashCode() : 0);         result = 31 * result + (any_child_wildcard != null ? any_child_wildcard.hashCode() : 0);         result = 31 * result + (any_descendant_wildcard != null ? any_descendant_wildcard.hashCode() : 0);         result = 31 * result + (regex_wildcard_start != null ? regex_wildcard_start.hashCode() : 0);         result = 31 * result + (regex_wildcard_end != null ? regex_wildcard_end.hashCode() : 0);         return result;     } };data class;blob, long method;t;t;f;blob,  long method;data class;0;10872;https://github.com/apache/activemq-apollo/blob/8e4b134b2a5d3576aa62cd8df9905a9fe2eba2d0/apollo-mqtt/src/main/java/org/apache/activemq/apollo/mqtt/dto/MqttDTO.java/#L31-L109;2;1404;10872
1405; {"message": "YES I found bad smells", "bad_smells": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@Value public class Release {  	private final String id; 	private final ProjectKey projectKey; 	private final String name; 	private final String description; 	private final LocalDate date; };data class;Blob, Data Class;t;f;t;Blob;;0;10874;https://github.com/spring-projects/spring-data-dev-tools/blob/a25ff3ae28026f132871f7172c6ba5c3b64e1671/release-tools/src/main/java/org/springframework/data/release/model/Release.java/#L25-L33;2;1405;10874
1412;{"response": "YES I found bad smells", "the bad smells are": ["Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@Entity @Table(name="xa_access_audit") public class AuthzAuditEventDbObj implements Serializable {  	private static final Log LOG = LogFactory.getLog(AuthzAuditEventDbObj.class);  	private static final long serialVersionUID = 1L;  	static int MaxValueLengthAccessType = 255; 	static int MaxValueLengthAclEnforcer = 255; 	static int MaxValueLengthAgentId = 255; 	static int MaxValueLengthClientIp = 255; 	static int MaxValueLengthClientType = 255; 	static int MaxValueLengthRepoName = 255; 	static int MaxValueLengthResultReason = 255; 	static int MaxValueLengthSessionId = 255; 	static int MaxValueLengthRequestUser = 255; 	static int MaxValueLengthAction = 2000; 	static int MaxValueLengthRequestData = 4000; 	static int MaxValueLengthResourcePath = 4000; 	static int MaxValueLengthResourceType = 255;  	private long   auditId; 	private int    repositoryType; 	private String repositoryName; 	private String user; 	private Date   timeStamp; 	private String accessType; 	private String resourcePath; 	private String resourceType; 	private String action; 	private int    accessResult; 	private String agentId; 	private long   policyId; 	private String resultReason; 	private String aclEnforcer; 	private String sessionId; 	private String clientType; 	private String clientIP; 	private String requestData; 	private long seqNum; 	private long eventCount; 	private long eventDurationMS; 	private String tags;  	public static void init(Properties props) 	{ 		LOG.info("AuthzAuditEventDbObj.init()");  		final String AUDIT_DB_MAX_COLUMN_VALUE = "xasecure.audit.destination.db.max.column.length"; 		MaxValueLengthAccessType = MiscUtil.getIntProperty(props, AUDIT_DB_MAX_COLUMN_VALUE + "." + "access_type", MaxValueLengthAccessType); 		logMaxColumnValue("access_type", MaxValueLengthAccessType);  		MaxValueLengthAclEnforcer = MiscUtil.getIntProperty(props, AUDIT_DB_MAX_COLUMN_VALUE + "." + "acl_enforcer", MaxValueLengthAclEnforcer); 		logMaxColumnValue("acl_enforcer", MaxValueLengthAclEnforcer);  		MaxValueLengthAction = MiscUtil.getIntProperty(props, AUDIT_DB_MAX_COLUMN_VALUE + "." + "action", MaxValueLengthAction); 		logMaxColumnValue("action", MaxValueLengthAction);  		MaxValueLengthAgentId = MiscUtil.getIntProperty(props, AUDIT_DB_MAX_COLUMN_VALUE + "." + "agent_id", MaxValueLengthAgentId); 		logMaxColumnValue("agent_id", MaxValueLengthAgentId);  		MaxValueLengthClientIp = MiscUtil.getIntProperty(props, AUDIT_DB_MAX_COLUMN_VALUE + "." + "client_id", MaxValueLengthClientIp); 		logMaxColumnValue("client_id", MaxValueLengthClientIp);  		MaxValueLengthClientType = MiscUtil.getIntProperty(props, AUDIT_DB_MAX_COLUMN_VALUE + "." + "client_type", MaxValueLengthClientType); 		logMaxColumnValue("client_type", MaxValueLengthClientType);  		MaxValueLengthRepoName = MiscUtil.getIntProperty(props, AUDIT_DB_MAX_COLUMN_VALUE + "." + "repo_name", MaxValueLengthRepoName); 		logMaxColumnValue("repo_name", MaxValueLengthRepoName);  		MaxValueLengthResultReason = MiscUtil.getIntProperty(props, AUDIT_DB_MAX_COLUMN_VALUE + "." + "result_reason", MaxValueLengthResultReason); 		logMaxColumnValue("result_reason", MaxValueLengthResultReason);  		MaxValueLengthSessionId = MiscUtil.getIntProperty(props, AUDIT_DB_MAX_COLUMN_VALUE + "." + "session_id", MaxValueLengthSessionId); 		logMaxColumnValue("session_id", MaxValueLengthSessionId);  		MaxValueLengthRequestUser = MiscUtil.getIntProperty(props, AUDIT_DB_MAX_COLUMN_VALUE + "." + "request_user", MaxValueLengthRequestUser); 		logMaxColumnValue("request_user", MaxValueLengthRequestUser);  		MaxValueLengthRequestData = MiscUtil.getIntProperty(props, AUDIT_DB_MAX_COLUMN_VALUE + "." + "request_data", MaxValueLengthRequestData); 		logMaxColumnValue("request_data", MaxValueLengthRequestData);  		MaxValueLengthResourcePath = MiscUtil.getIntProperty(props, AUDIT_DB_MAX_COLUMN_VALUE + "." + "resource_path", MaxValueLengthResourcePath); 		logMaxColumnValue("resource_path", MaxValueLengthResourcePath);  		MaxValueLengthResourceType = MiscUtil.getIntProperty(props, AUDIT_DB_MAX_COLUMN_VALUE + "." + "resource_type", MaxValueLengthResourceType); 		logMaxColumnValue("resource_type", MaxValueLengthResourceType); 	}  	public static void logMaxColumnValue(String columnName, int configuredMaxValueLength) { 		LOG.info("Setting max column value for column[" + columnName + "] to [" + configuredMaxValueLength + "]."); 		if (configuredMaxValueLength == 0) { 			LOG.info("Max length of column[" + columnName + "] was 0! Column will NOT be emitted in the audit."); 		} else if (configuredMaxValueLength < 0) { 			LOG.info("Max length of column[" + columnName + "] was less than 0! Column value will never be truncated."); 		} 	}   	public AuthzAuditEventDbObj() { 		super(); 	}  	public AuthzAuditEventDbObj(AuthzAuditEvent event) { 		super(); 		Date utcDate=null; 		if(event.getEventTime()!=null){ 			utcDate=MiscUtil.getUTCDateForLocalDate(event.getEventTime()); 		}else{ 			utcDate=MiscUtil.getUTCDate(); 		} 		this.repositoryType = event.getRepositoryType(); 		this.repositoryName = event.getRepositoryName(); 		this.user           = event.getUser(); 		this.timeStamp      = utcDate; 		this.accessType     = event.getAccessType(); 		this.resourcePath   = event.getResourcePath(); 		this.resourceType   = event.getResourceType(); 		this.action         = event.getAction(); 		this.accessResult   = event.getAccessResult(); 		this.agentId        = event.getAgentId(); 		this.policyId       = event.getPolicyId(); 		this.resultReason   = event.getResultReason(); 		this.aclEnforcer    = event.getAclEnforcer(); 		this.sessionId      = event.getSessionId(); 		this.clientType     = event.getClientType(); 		this.clientIP       = event.getClientIP(); 		this.requestData    = event.getRequestData(); 		this.seqNum         = event.getSeqNum(); 		this.eventCount     = event.getEventCount(); 		this.eventDurationMS= event.getEventDurationMS(); 		this.tags           = StringUtils.join(event.getTags(), ", "); 	}  	@Id 	@SequenceGenerator(name="XA_ACCESS_AUDIT_SEQ",sequenceName="XA_ACCESS_AUDIT_SEQ",allocationSize=1) 	@GeneratedValue(strategy=GenerationType.AUTO,generator="XA_ACCESS_AUDIT_SEQ") 	@Column(name = "id", unique = true, nullable = false) 	public long getAuditId() { 		return this.auditId; 	}  	public void setAuditId(long auditId) { 		this.auditId = auditId; 	}  	@Column(name = "repo_type") 	public int getRepositoryType() { 		return this.repositoryType; 	}  	public void setRepositoryType(int repositoryType) { 		this.repositoryType = repositoryType; 	}  	@Column(name = "repo_name") 	public String getRepositoryName() { 		return truncate(this.repositoryName, MaxValueLengthRepoName, "repo_name"); 	}  	public void setRepositoryName(String repositoryName) { 		this.repositoryName = repositoryName; 	}  	@Column(name = "request_user") 	public String getUser() { 		return truncate(this.user, MaxValueLengthRequestUser, "request_user"); 	}  	public void setUser(String user) { 		this.user = user; 	}  	@Temporal(TemporalType.TIMESTAMP) 	@Column(name = "event_time") 	public Date getTimeStamp() { 		return this.timeStamp; 	}  	public void setTimeStamp(Date timeStamp) { 		this.timeStamp = timeStamp; 	}  	@Column(name = "access_type") 	public String getAccessType() { 		return truncate(this.accessType, MaxValueLengthAccessType, "access_type"); 	}  	public void setAccessType(String accessType) { 		this.accessType = accessType; 	}  	@Column(name = "resource_path") 	public String getResourcePath() { 		return truncate(this.resourcePath, MaxValueLengthResourcePath, "resource_path"); 	}  	public void setResourcePath(String resourcePath) { 		this.resourcePath = resourcePath; 	}  	@Column(name = "resource_type") 	public String getResourceType() { 		return truncate(this.resourceType, MaxValueLengthResourceType, "resource_type"); 	}  	public void setResourceType(String resourceType) { 		this.resourceType = resourceType; 	}  	@Column(name = "action") 	public String getAction() { 		return truncate(this.action, MaxValueLengthAction, "action"); 	}  	public void setAction(String action) { 		this.action = action; 	}  	@Column(name = "access_result") 	public int getAccessResult() { 		return this.accessResult; 	}  	public void setAccessResult(int accessResult) { 		this.accessResult = accessResult; 	}  	@Column(name = "agent_id") 	public String getAgentId() { 		return truncate(this.agentId, MaxValueLengthAgentId, "agent_id"); 	}  	public void setAgentId(String agentId) { 		this.agentId = agentId; 	}  	@Column(name = "policy_id") 	public long getPolicyId() { 		return this.policyId; 	}  	public void setPolicyId(long policyId) { 		this.policyId = policyId; 	}  	@Column(name = "result_reason") 	public String getResultReason() { 		return truncate(this.resultReason, MaxValueLengthResultReason, "result_reason"); 	}  	public void setResultReason(String resultReason) { 		this.resultReason = resultReason; 	}  	@Column(name = "acl_enforcer") 	public String getAclEnforcer() { 		return truncate(this.aclEnforcer, MaxValueLengthAclEnforcer, "acl_enforcer"); 	}  	public void setAclEnforcer(String aclEnforcer) { 		this.aclEnforcer = aclEnforcer; 	}  	@Column(name = "session_id") 	public String getSessionId() { 		return truncate(this.sessionId, MaxValueLengthSessionId, "session_id"); 	}  	public void setSessionId(String sessionId) { 		this.sessionId = sessionId; 	}  	@Column(name = "client_type") 	public String getClientType() { 		return truncate(this.clientType, MaxValueLengthClientType, "client_type"); 	}  	public void setClientType(String clientType) { 		this.clientType = clientType; 	}  	@Column(name = "client_ip") 	public String getClientIP() { 		return truncate(this.clientIP, MaxValueLengthClientIp, "client_ip"); 	}  	public void setClientIP(String clientIP) { 		this.clientIP = clientIP; 	}  	@Column(name = "request_data") 	public String getRequestData() { 		return truncate(this.requestData, MaxValueLengthRequestData, "request_data"); 	}  	public void setRequestData(String requestData) { 		this.requestData = requestData; 	}  	@Column(name = "seq_num") 	public long getSeqNum() { return this.seqNum; }  	public void setSeqNum(long seqNum) { this.seqNum = seqNum; }  	@Column(name = "event_count") 	public long getEventCount() { return this.eventCount; }  	public void setEventCount(long eventCount) { this.eventCount = eventCount; }  	@Column(name = "event_dur_ms") 	public long getEventDurationMS() { return this.eventDurationMS; }  	public void setEventDurationMS(long eventDurationMS) { this.eventDurationMS = eventDurationMS; }  	@Column(name = "tags") 	public String getTags() { 		return this.tags; 	}  	public void setTags(String tags) { 		this.tags = tags; 	}  	static final String TruncationMarker = "..."; 	static final int TruncationMarkerLength = TruncationMarker.length();  	protected String truncate(String value, int limit, String columnName) { 		if (LOG.isDebugEnabled()) { 			LOG.debug(String.format("==> getTrunctedValue(%s, %d, %s)", value, limit, columnName)); 		}  		String result = value; 		if (value != null) { 			if (limit < 0) { 				if (LOG.isDebugEnabled()) { 					LOG.debug(String.format("Truncation is suppressed for column[%s]: old value [%s], new value[%s]", columnName, value, result)); 				} 			} else if (limit == 0) { 				if (LOG.isDebugEnabled()) { 					LOG.debug(String.format("Column[%s] is to be excluded from audit: old value [%s], new value[%s]", columnName, value, result)); 				} 				result = null; 			} else { 				if (value.length() > limit) { 					if (limit <= TruncationMarkerLength) { 						// NOTE: If value is to be truncated to a size that is less than of equal to the Truncation Marker then we won't put the marker in!! 						result = value.substring(0, limit); 					} else { 						StringBuilder sb = new StringBuilder(value.substring(0, limit - TruncationMarkerLength)); 						sb.append(TruncationMarker); 						result = sb.toString(); 					} 					if (LOG.isDebugEnabled()) { 						LOG.debug(String.format("Truncating value for column[%s] to [%d] characters: old value [%s], new value[%s]", columnName, limit, value, result)); 					} 				} 			} 		}  		if (LOG.isDebugEnabled()) { 			LOG.debug(String.format("<== getTrunctedValue(%s, %d, %s): %s", value, limit, columnName, result)); 		} 		return result; 	} };data class;blob;t;t;f;blob;data class;0;10903;https://github.com/apache/ranger/blob/7c52a79a5d0b41bfc94caca9d531e0fefba2bfe7/agents-audit/src/main/java/org/apache/ranger/audit/entity/AuthzAuditEventDbObj.java/#L46-L412;2;1412;10903
1414;{     "response": "YES I found bad smells",     "detected_bad_smells": {         "1": "Blob",         "2": "Data Class"     } };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@Singleton public class CheProductInfoDataProvider extends ProductInfoDataProviderImpl {    private final LocalizationConstant locale;   private final Resources resources;    @Inject   public CheProductInfoDataProvider(LocalizationConstant locale, Resources resources) {     this.locale = locale;     this.resources = resources;   }    @Override   public String getName() {     return locale.getProductName();   }    @Override   public String getSupportLink() {     return locale.getSupportLink();   }    @Override   public String getDocumentTitle() {     return locale.cheTabTitle();   }    @Override   public String getDocumentTitle(String workspaceName) {     return locale.cheTabTitle(workspaceName);   }    @Override   public SVGResource getLogo() {     return resources.logo();   }    @Override   public SVGResource getWaterMarkLogo() {     return resources.waterMarkLogo();   }    @Override   public String getSupportTitle() {     return locale.supportTitle();   } };data class;1: blob, 2: data class;t;t;t;1: blob;;0;10909;https://github.com/eclipse/che/blob/c5498c2ac562cd8a2fc79a6bb0446d291f05a201/plugins/plugin-product-info/src/main/java/org/eclipse/che/plugin/product/info/client/CheProductInfoDataProvider.java/#L26-L72;2;1414;10909
1417;{"response": "YES I found bad smells", "bad smells are": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class JdbVariable implements Variable {   private final LocalVariable jdiVariable;   private final SimpleValue value;    public JdbVariable(StackFrame jdiStackFrame, LocalVariable jdiVariable) {     Value jdiValue = jdiStackFrame.getValue(jdiVariable);      this.jdiVariable = jdiVariable;     this.value = jdiValue == null ? new JdbNullValue() : new JdbValue(jdiValue, getVariablePath());   }    public JdbVariable(SimpleValue value, LocalVariable jdiVariable) {     this.jdiVariable = jdiVariable;     this.value = value;   }    @Override   public String getName() {     return jdiVariable.name();   }    @Override   public boolean isPrimitive() {     return JdbType.isPrimitive(jdiVariable.signature());   }    @Override   public SimpleValue getValue() {     return value;   }    @Override   public String getType() {     return jdiVariable.typeName();   }    @Override   public VariablePath getVariablePath() {     return new VariablePathImpl(getName());   } };data class;blob, data class;t;t;t;blob;;0;10917;https://github.com/eclipse/che/blob/c5498c2ac562cd8a2fc79a6bb0446d291f05a201/plugins/plugin-java-debugger/che-plugin-java-debugger-server/src/main/java/org/eclipse/che/plugin/jdb/server/model/JdbVariable.java/#L27-L67;2;1417;10917
1422; {     "message": "YES I found bad smells",     "the bad smells are": [         "1. Long Method",         "2. Blob",         "3. Data Class",         "4. Feature Envy"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public abstract class AbstractAzureMojo extends AbstractMojo implements TelemetryConfiguration, AuthConfiguration {     public static final String PLUGIN_NAME_KEY = "pluginName";     public static final String PLUGIN_VERSION_KEY = "pluginVersion";     public static final String INSTALLATION_ID_KEY = "installationId";     public static final String SESSION_ID_KEY = "sessionId";     public static final String SUBSCRIPTION_ID_KEY = "subscriptionId";     public static final String AUTH_TYPE = "authType";     public static final String TELEMETRY_NOT_ALLOWED = "TelemetryNotAllowed";     public static final String INIT_FAILURE = "InitFailure";     public static final String AZURE_INIT_FAIL = "Failed to authenticate with Azure. Please check your configuration.";     public static final String FAILURE_REASON = "failureReason";     private static final String CONFIGURATION_PATH = Paths.get(System.getProperty("user.home"),         ".azure", "mavenplugins.properties").toString();     private static final String FIRST_RUN_KEY = "first.run";     private static final String PRIVACY_STATEMENT = "\nData/Telemetry\n" +         "---------\n" +         "This project collects usage data and sends it to Microsoft to help improve our products and services.\n" +         "Read Microsoft's privacy statement to learn more: https://privacy.microsoft.com/en-us/privacystatement." +         "\n\nYou can change your telemetry configuration through 'allowTelemetry' property.\n" +         "For more information, please go to https://aka.ms/azure-maven-config.\n";      //region Properties      @Parameter(defaultValue = "${project}", readonly = true, required = true)     protected MavenProject project;      @Parameter(defaultValue = "${session}", readonly = true, required = true)     protected MavenSession session;      @Parameter(defaultValue = "${project.build.directory}", readonly = true, required = true)     protected File buildDirectory;      @Parameter(defaultValue = "${plugin}", readonly = true, required = true)     protected PluginDescriptor plugin;      /**      * The system settings for Maven. This is the instance resulting from      * merging global and user-level settings files.      */     @Parameter(defaultValue = "${settings}", readonly = true, required = true)     protected Settings settings;      @Component(role = MavenResourcesFiltering.class, hint = "default")     protected MavenResourcesFiltering mavenResourcesFiltering;      /**      * Authentication setting for Azure Management API.      * Below are the supported sub-elements within {@code }. You can use one of them to authenticate      * with azure      * {@code } specifies the credentials of your Azure service principal, by referencing a server definition      * in Maven's settings.xml      * {@code } specifies the absolute path of your authentication file for Azure.      *      * @since 0.1.0      */     @Parameter     protected AuthenticationSetting authentication;      /**      * Azure subscription Id. You only need to specify it when:      *       * you are using authentication file      * there are more than one subscription in the authentication file      *       *      * @since 0.1.0      */     @Parameter     protected String subscriptionId = "";      /**      * Boolean flag to turn on/off telemetry within current Maven plugin.      *      * @since 0.1.0      */     @Parameter(property = "allowTelemetry", defaultValue = "true")     protected boolean allowTelemetry;      /**      * Boolean flag to control whether throwing exception from current Maven plugin when meeting any error.      * If set to true, the exception from current Maven plugin will fail the current Maven run.      *      * @since 0.1.0      */     @Parameter(property = "failsOnError", defaultValue = "true")     protected boolean failsOnError;      /**      * Use a HTTP proxy host for the Azure Auth Client      */     @Parameter(property = "httpProxyHost", readonly = false, required = false)     protected String httpProxyHost;      /**      * Use a HTTP proxy port for the Azure Auth Client      */     @Parameter(property = "httpProxyPort", defaultValue = "80")     protected int httpProxyPort;      private AzureAuthHelper azureAuthHelper = new AzureAuthHelper(this);      private Azure azure;      private TelemetryProxy telemetryProxy;      private String sessionId = UUID.randomUUID().toString();      private String installationId = GetHashMac.getHashMac();      //endregion      //region Getter      public MavenProject getProject() {         return project;     }      public MavenSession getSession() {         return session;     }      public String getBuildDirectoryAbsolutePath() {         return buildDirectory.getAbsolutePath();     }      public MavenResourcesFiltering getMavenResourcesFiltering() {         return mavenResourcesFiltering;     }      public Settings getSettings() {         return settings;     }      public AuthenticationSetting getAuthenticationSetting() {         return authentication;     }      public String getSubscriptionId() {         return subscriptionId;     }      public boolean isTelemetryAllowed() {         return allowTelemetry;     }      public boolean isFailingOnError() {         return failsOnError;     }      public String getSessionId() {         return sessionId;     }      public String getInstallationId() {         return installationId == null ? "" : installationId;     }      public String getPluginName() {         return plugin.getArtifactId();     }      public String getPluginVersion() {         return plugin.getVersion();     }      public String getUserAgent() {         return isTelemetryAllowed() ? String.format("%s/%s %s:%s %s:%s", getPluginName(), getPluginVersion(),                         INSTALLATION_ID_KEY, getInstallationId(), SESSION_ID_KEY, getSessionId())                 : String.format("%s/%s", getPluginName(), getPluginVersion());     }      public String getHttpProxyHost() {         return httpProxyHost;     }            public int getHttpProxyPort() {         return httpProxyPort;     }       public Azure getAzureClient() throws AzureAuthFailureException {         if (azure == null) {             azure = azureAuthHelper.getAzureClient();             if (azure == null) {                 getTelemetryProxy().trackEvent(INIT_FAILURE);                 throw new AzureAuthFailureException(AZURE_INIT_FAIL);             } else {                 // Repopulate subscriptionId in case it is not configured.                 getTelemetryProxy().addDefaultProperty(SUBSCRIPTION_ID_KEY, azure.subscriptionId());             }         }         return azure;     }      public TelemetryProxy getTelemetryProxy() {         if (telemetryProxy == null) {             initTelemetry();         }         return telemetryProxy;     }      protected void initTelemetry() {         telemetryProxy = new AppInsightsProxy(this);         if (!isTelemetryAllowed()) {             telemetryProxy.trackEvent(TELEMETRY_NOT_ALLOWED);             telemetryProxy.disable();         }     }      //endregion      //region Telemetry Configuration Interface      public Map getTelemetryProperties() {         final Map map = new HashMap<>();         map.put(INSTALLATION_ID_KEY, getInstallationId());         map.put(PLUGIN_NAME_KEY, getPluginName());         map.put(PLUGIN_VERSION_KEY, getPluginVersion());         map.put(SUBSCRIPTION_ID_KEY, getSubscriptionId());         map.put(SESSION_ID_KEY, getSessionId());         map.put(AUTH_TYPE, getAuthType());         return map;     }      // TODO:     // Add AuthType ENUM and move to AzureAuthHelper.     public String getAuthType() {         final AuthenticationSetting authSetting = getAuthenticationSetting();         if (authSetting == null) {             return "AzureCLI";         }         if (StringUtils.isNotEmpty(authSetting.getServerId())) {             return "ServerId";         }         if (authSetting.getFile() != null) {             return "AuthFile";         }         return "Unknown";     }      //endregion      //region Entry Point      @Override     public void execute() throws MojoExecutionException {         try {             // Work around for Application Insights Java SDK:             // Sometimes, NoClassDefFoundError will be thrown even after Maven build is completed successfully.             // An issue has been filed at https://github.com/Microsoft/ApplicationInsights-Java/issues/416             // Before this issue is fixed, set default uncaught exception handler for all threads as work around.             Thread.setDefaultUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler());              final Properties prop = new Properties();             if (isFirstRun(prop)) {                 infoWithMultipleLines(PRIVACY_STATEMENT);                 updateConfigurationFile(prop);             }              if (isSkipMojo()) {                 info("Skip execution.");                 trackMojoSkip();             } else {                 trackMojoStart();                  doExecute();                  trackMojoSuccess();             }         } catch (Exception e) {             handleException(e);         } finally {             // When maven goal executes too quick, The HTTPClient of AI SDK may not fully initialized and will step             // into endless loop when close, we need to call it in main thread.             // Refer here for detail codes: https://github.com/Microsoft/ApplicationInsights-Java/blob/master/core/src             // /main/java/com/microsoft/applicationinsights/internal/channel/common/ApacheSender43.java#L103             ApacheSenderFactory.INSTANCE.create().close();         }     }      /**      * Sub-class can override this method to decide whether skip execution.      *      * @return Boolean to indicate whether skip execution.      */     protected boolean isSkipMojo() {         return false;     }      /**      * Entry point of sub-class. Sub-class should implement this method to do real work.      *      * @throws Exception      */     protected abstract void doExecute() throws Exception;      //endregion      //region Telemetry      protected void trackMojoSkip() {         getTelemetryProxy().trackEvent(this.getClass().getSimpleName() + ".skip");     }      protected void trackMojoStart() {         getTelemetryProxy().trackEvent(this.getClass().getSimpleName() + ".start");     }      protected void trackMojoSuccess() {         getTelemetryProxy().trackEvent(this.getClass().getSimpleName() + ".success");     }      protected void trackMojoFailure(final String message) {         final HashMap failureReason = new HashMap<>();         failureReason.put(FAILURE_REASON, message);         getTelemetryProxy().trackEvent(this.getClass().getSimpleName() + ".failure", failureReason);     }      //endregion      //region Helper methods      protected void handleException(final Exception exception) throws MojoExecutionException {         String message = exception.getMessage();         if (StringUtils.isEmpty(message)) {             message = exception.toString();         }         trackMojoFailure(message);          if (isFailingOnError()) {             throw new MojoExecutionException(message, exception);         } else {             error(message);         }     }      private boolean isFirstRun(Properties prop) {         try {             final File configurationFile = new File(CONFIGURATION_PATH);             if (configurationFile.exists()) {                 try (InputStream input = new FileInputStream(CONFIGURATION_PATH)) {                     prop.load(input);                     final String firstRunValue = prop.getProperty(FIRST_RUN_KEY);                     if (firstRunValue != null && !firstRunValue.isEmpty() && firstRunValue.equalsIgnoreCase("false")) {                         return false;                     }                 }             } else {                 configurationFile.getParentFile().mkdirs();                 configurationFile.createNewFile();             }         } catch (Exception e) {             // catch exceptions here to avoid blocking mojo execution.             debug(e.getMessage());         }         return true;     }      private void updateConfigurationFile(Properties prop) {         try (OutputStream output = new FileOutputStream(CONFIGURATION_PATH)) {             prop.setProperty(FIRST_RUN_KEY, "false");             prop.store(output, "Azure Maven Plugin configurations");         } catch (Exception e) {             // catch exceptions here to avoid blocking mojo execution.             debug(e.getMessage());         }     }      protected class DefaultUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler {         @Override         public void uncaughtException(Thread t, Throwable e) {             debug("uncaughtException: " + e);         }     }      //endregion      //region Logging      public void debug(final String message) {         getLog().debug(message);     }      public void info(final String message) {         getLog().info(message);     }      public void infoWithMultipleLines(final String messages) {         final String[] messageArray = messages.split("\\n");         for (final String line : messageArray) {             getLog().info(line);         }     }      public void warning(final String message) {         getLog().warn(message);     }      public void error(final String message) {         getLog().error(message);     }      //endregion };data class;1 Long Method, 2 Blob, 3 Data Class, 4 Feature Envy;t;f;t;1. Long Method,  2. Blob,  4. Feature Envy;;0;10932;https://github.com/Microsoft/azure-maven-plugins/blob/d3e0b6fa0e00f38c04b622589a939fb3bae2227e/azure-maven-plugin-lib/src/main/java/com/microsoft/azure/maven/AbstractAzureMojo.java/#L45-L447;2;1422;10932
1434;{"answer": "YES I found bad smells", "detected_bad_smells": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@javax.annotation.Generated(value = "OracleSDKGenerator", comments = "API Version: 20180115") @lombok.AllArgsConstructor(onConstructor = @__({@Deprecated})) @lombok.Value @com.fasterxml.jackson.databind.annotation.JsonDeserialize(     builder = CreateZoneDetails.Builder.class ) @com.fasterxml.jackson.annotation.JsonFilter(com.oracle.bmc.http.internal.ExplicitlySetFilter.NAME) public class CreateZoneDetails {     @com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder(withPrefix = "")     @lombok.experimental.Accessors(fluent = true)     public static class Builder {         @com.fasterxml.jackson.annotation.JsonProperty("name")         private String name;          public Builder name(String name) {             this.name = name;             this.__explicitlySet__.add("name");             return this;         }          @com.fasterxml.jackson.annotation.JsonProperty("zoneType")         private ZoneType zoneType;          public Builder zoneType(ZoneType zoneType) {             this.zoneType = zoneType;             this.__explicitlySet__.add("zoneType");             return this;         }          @com.fasterxml.jackson.annotation.JsonProperty("compartmentId")         private String compartmentId;          public Builder compartmentId(String compartmentId) {             this.compartmentId = compartmentId;             this.__explicitlySet__.add("compartmentId");             return this;         }          @com.fasterxml.jackson.annotation.JsonProperty("freeformTags")         private java.util.Map freeformTags;          public Builder freeformTags(java.util.Map freeformTags) {             this.freeformTags = freeformTags;             this.__explicitlySet__.add("freeformTags");             return this;         }          @com.fasterxml.jackson.annotation.JsonProperty("definedTags")         private java.util.Map> definedTags;          public Builder definedTags(                 java.util.Map> definedTags) {             this.definedTags = definedTags;             this.__explicitlySet__.add("definedTags");             return this;         }          @com.fasterxml.jackson.annotation.JsonProperty("externalMasters")         private java.util.List externalMasters;          public Builder externalMasters(java.util.List externalMasters) {             this.externalMasters = externalMasters;             this.__explicitlySet__.add("externalMasters");             return this;         }          @com.fasterxml.jackson.annotation.JsonIgnore         private final java.util.Set __explicitlySet__ = new java.util.HashSet();          public CreateZoneDetails build() {             CreateZoneDetails __instance__ =                     new CreateZoneDetails(                             name,                             zoneType,                             compartmentId,                             freeformTags,                             definedTags,                             externalMasters);             __instance__.__explicitlySet__.addAll(__explicitlySet__);             return __instance__;         }          @com.fasterxml.jackson.annotation.JsonIgnore         public Builder copy(CreateZoneDetails o) {             Builder copiedBuilder =                     name(o.getName())                             .zoneType(o.getZoneType())                             .compartmentId(o.getCompartmentId())                             .freeformTags(o.getFreeformTags())                             .definedTags(o.getDefinedTags())                             .externalMasters(o.getExternalMasters());              copiedBuilder.__explicitlySet__.retainAll(o.__explicitlySet__);             return copiedBuilder;         }     }      /**      * Create a new builder.      */     public static Builder builder() {         return new Builder();     }      /**      * The name of the zone.      **/     @com.fasterxml.jackson.annotation.JsonProperty("name")     String name;     /**      * The type of the zone. Must be either `PRIMARY` or `SECONDARY`.      *      **/     public enum ZoneType {         Primary("PRIMARY"),         Secondary("SECONDARY"),         ;          private final String value;         private static java.util.Map map;          static {             map = new java.util.HashMap<>();             for (ZoneType v : ZoneType.values()) {                 map.put(v.getValue(), v);             }         }          ZoneType(String value) {             this.value = value;         }          @com.fasterxml.jackson.annotation.JsonValue         public String getValue() {             return value;         }          @com.fasterxml.jackson.annotation.JsonCreator         public static ZoneType create(String key) {             if (map.containsKey(key)) {                 return map.get(key);             }             throw new RuntimeException("Invalid ZoneType: " + key);         }     };     /**      * The type of the zone. Must be either `PRIMARY` or `SECONDARY`.      *      **/     @com.fasterxml.jackson.annotation.JsonProperty("zoneType")     ZoneType zoneType;      /**      * The OCID of the compartment containing the zone.      **/     @com.fasterxml.jackson.annotation.JsonProperty("compartmentId")     String compartmentId;      /**      * Simple key-value pair that is applied without any predefined name, type, or scope.      * For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).      * Example: `{\"bar-key\": \"value\"}`      *      **/     @com.fasterxml.jackson.annotation.JsonProperty("freeformTags")     java.util.Map freeformTags;      /**      * Usage of predefined tag keys. These predefined keys are scoped to a namespace.      * Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`      *      **/     @com.fasterxml.jackson.annotation.JsonProperty("definedTags")     java.util.Map> definedTags;      /**      * External master servers for the zone. `externalMasters` becomes a      * required parameter when the `zoneType` value is `SECONDARY`.      *      **/     @com.fasterxml.jackson.annotation.JsonProperty("externalMasters")     java.util.List externalMasters;      @com.fasterxml.jackson.annotation.JsonIgnore     private final java.util.Set __explicitlySet__ = new java.util.HashSet(); };data class;blob, long method;t;t;f;blob,  long method;data class;0;10959;https://github.com/oracle/oci-java-sdk/blob/76e9cecd7b309d9f12e5efe96c74167c66a98872/bmc-dns/src/main/java/com/oracle/bmc/dns/model/CreateZoneDetails.java/#L19-L204;2;1434;10959
1446;{"response": "YES I found bad smells", "bad smells are": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    public void read(org.apache.thrift.protocol.TProtocol iprot, FetchRuleKeyLogsRequest struct) throws org.apache.thrift.TException {       org.apache.thrift.protocol.TField schemeField;       iprot.readStructBegin();       while (true)       {         schemeField = iprot.readFieldBegin();         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {            break;         }         switch (schemeField.id) {           case 1: // RULE_KEYS             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {               {                 org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();                 struct.ruleKeys = new java.util.ArrayList(_list184.size);                 java.lang.String _elem185;                 for (int _i186 = 0; _i186 < _list184.size; ++_i186)                 {                   _elem185 = iprot.readString();                   struct.ruleKeys.add(_elem185);                 }                 iprot.readListEnd();               }               struct.setRuleKeysIsSet(true);             } else {                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);             }             break;           case 2: // REPOSITORY             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {               struct.repository = iprot.readString();               struct.setRepositoryIsSet(true);             } else {                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);             }             break;           case 3: // SCHEDULE_TYPE             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {               struct.scheduleType = iprot.readString();               struct.setScheduleTypeIsSet(true);             } else {                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);             }             break;           case 4: // DISTRIBUTED_BUILD_MODE_ENABLED             if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {               struct.distributedBuildModeEnabled = iprot.readBool();               struct.setDistributedBuildModeEnabledIsSet(true);             } else {                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);             }             break;           default:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);         }         iprot.readFieldEnd();       }       iprot.readStructEnd();        // check for required fields of primitive type, which can't be checked in the validate method       struct.validate();     };long method;blob, long method;t;t;t;blob;;0;10983;https://github.com/facebook/buck/blob/1bc8d383ea5cb153ca9bf4f2807e6be498648523/src-gen/com/facebook/buck/distributed/thrift/FetchRuleKeyLogsRequest.java/#L547-L608;2;1446;10983
1472;{"response": "YES I found bad smells", "bad smells are": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class MultiSpinnerUI extends SpinnerUI {      /**      * The vector containing the real UIs.  This is populated      * in the call to createUI, and can be obtained by calling      * the getUIs method.  The first element is guaranteed to be the real UI      * obtained from the default look and feel.      */     protected Vector uis = new Vector<>();  //////////////////// // Common UI methods ////////////////////      /**      * Returns the list of UIs associated with this multiplexing UI.  This      * allows processing of the UIs by an application aware of multiplexing      * UIs on components.      *      * @return an array of the UI delegates      */     public ComponentUI[] getUIs() {         return MultiLookAndFeel.uisToArray(uis);     }  //////////////////// // SpinnerUI methods ////////////////////  //////////////////// // ComponentUI methods ////////////////////      /**      * Invokes the contains method on each UI handled by this object.      *      * @return the value obtained from the first UI, which is      * the UI obtained from the default LookAndFeel      */     public boolean contains(JComponent a, int b, int c) {         boolean returnValue =             uis.elementAt(0).contains(a,b,c);         for (int i = 1; i < uis.size(); i++) {             uis.elementAt(i).contains(a,b,c);         }         return returnValue;     }      /**      * Invokes the update method on each UI handled by this object.      */     public void update(Graphics a, JComponent b) {         for (int i = 0; i < uis.size(); i++) {             uis.elementAt(i).update(a,b);         }     }      /**      * Returns a multiplexing UI instance if any of the auxiliary      * LookAndFeels supports this UI.  Otherwise, just returns the      * UI object obtained from the default LookAndFeel.      *      * @param  a the component to create the UI for      * @return the UI delegate created      */     public static ComponentUI createUI(JComponent a) {         MultiSpinnerUI mui = new MultiSpinnerUI();         return MultiLookAndFeel.createUIs(mui, mui.uis, a);     }      /**      * Invokes the installUI method on each UI handled by this object.      */     public void installUI(JComponent a) {         for (int i = 0; i < uis.size(); i++) {             uis.elementAt(i).installUI(a);         }     }      /**      * Invokes the uninstallUI method on each UI handled by this object.      */     public void uninstallUI(JComponent a) {         for (int i = 0; i < uis.size(); i++) {             uis.elementAt(i).uninstallUI(a);         }     }      /**      * Invokes the paint method on each UI handled by this object.      */     public void paint(Graphics a, JComponent b) {         for (int i = 0; i < uis.size(); i++) {             uis.elementAt(i).paint(a,b);         }     }      /**      * Invokes the getPreferredSize method on each UI handled by this object.      *      * @return the value obtained from the first UI, which is      * the UI obtained from the default LookAndFeel      */     public Dimension getPreferredSize(JComponent a) {         Dimension returnValue =             uis.elementAt(0).getPreferredSize(a);         for (int i = 1; i < uis.size(); i++) {             uis.elementAt(i).getPreferredSize(a);         }         return returnValue;     }      /**      * Invokes the getMinimumSize method on each UI handled by this object.      *      * @return the value obtained from the first UI, which is      * the UI obtained from the default LookAndFeel      */     public Dimension getMinimumSize(JComponent a) {         Dimension returnValue =             uis.elementAt(0).getMinimumSize(a);         for (int i = 1; i < uis.size(); i++) {             uis.elementAt(i).getMinimumSize(a);         }         return returnValue;     }      /**      * Invokes the getMaximumSize method on each UI handled by this object.      *      * @return the value obtained from the first UI, which is      * the UI obtained from the default LookAndFeel      */     public Dimension getMaximumSize(JComponent a) {         Dimension returnValue =             uis.elementAt(0).getMaximumSize(a);         for (int i = 1; i < uis.size(); i++) {             uis.elementAt(i).getMaximumSize(a);         }         return returnValue;     }      /**      * Invokes the getAccessibleChildrenCount method on each UI handled by this object.      *      * @return the value obtained from the first UI, which is      * the UI obtained from the default LookAndFeel      */     public int getAccessibleChildrenCount(JComponent a) {         int returnValue =             uis.elementAt(0).getAccessibleChildrenCount(a);         for (int i = 1; i < uis.size(); i++) {             uis.elementAt(i).getAccessibleChildrenCount(a);         }         return returnValue;     }      /**      * Invokes the getAccessibleChild method on each UI handled by this object.      *      * @return the value obtained from the first UI, which is      * the UI obtained from the default LookAndFeel      */     public Accessible getAccessibleChild(JComponent a, int b) {         Accessible returnValue =             uis.elementAt(0).getAccessibleChild(a,b);         for (int i = 1; i < uis.size(); i++) {             uis.elementAt(i).getAccessibleChild(a,b);         }         return returnValue;     } };data class;blob, long method;t;t;f;blob,  long method;data class;0;11052;https://github.com/SAP/SapMachine/blob/6e62561730c46dc5000c39665c43951832192ceb/src/java.desktop/share/classes/javax/swing/plaf/multi/MultiSpinnerUI.java/#L43-L214;2;1472;11052
1479; {   "response": "YES I found bad smells",   "the bad smells are": [     "Blob",     "Data Class",     "Long Method"   ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@XmlTransient public abstract class PendingActionNotificationResponse     extends ImmutableObject implements ResponseData {    /** The inner name type that contains a name and the result boolean. */   @Embed   static class NameOrId extends ImmutableObject {     @XmlValue     String value;      @XmlAttribute(name = "paResult")     boolean actionResult;   }    @XmlTransient   NameOrId nameOrId;    @XmlElement(name = "paTRID")   Trid trid;    @XmlElement(name = "paDate")   DateTime processedDate;    public String getNameAsString() {     return nameOrId.value;   }    @VisibleForTesting   public Trid getTrid() {     return trid;   }    @VisibleForTesting   public boolean getActionResult() {     return nameOrId.actionResult;   }    protected static  T init(       T response, String nameOrId, boolean actionResult, Trid trid, DateTime processedDate) {     response.nameOrId = new NameOrId();     response.nameOrId.value = nameOrId;     response.nameOrId.actionResult = actionResult;     response.trid = trid;     response.processedDate = processedDate;     return response;   }    /** An adapter to output the XML in response to resolving a pending command on a domain. */   @Embed   @XmlRootElement(name = "panData", namespace = "urn:ietf:params:xml:ns:domain-1.0")   @XmlType(       propOrder = {"name", "trid", "processedDate"},       namespace = "urn:ietf:params:xml:ns:domain-1.0")   public static class DomainPendingActionNotificationResponse       extends PendingActionNotificationResponse {      @XmlElement     NameOrId getName() {       return nameOrId;     }      public static DomainPendingActionNotificationResponse create(         String fullyQualifiedDomainName, boolean actionResult, Trid trid, DateTime processedDate) {       return init(           new DomainPendingActionNotificationResponse(),           fullyQualifiedDomainName,           actionResult,           trid,           processedDate);     }   }    /** An adapter to output the XML in response to resolving a pending command on a contact. */   @Embed   @XmlRootElement(name = "panData", namespace = "urn:ietf:params:xml:ns:contact-1.0")   @XmlType(       propOrder = {"id", "trid", "processedDate"},       namespace = "urn:ietf:params:xml:ns:contact-1.0")   public static class ContactPendingActionNotificationResponse       extends PendingActionNotificationResponse {      @XmlElement     NameOrId getId() {       return nameOrId;     }      public static ContactPendingActionNotificationResponse create(         String contactId, boolean actionResult, Trid trid, DateTime processedDate) {       return init(           new ContactPendingActionNotificationResponse(),           contactId,           actionResult,           trid,           processedDate);     }   }    /** An adapter to output the XML in response to resolving a pending command on a host. */   @Embed   @XmlRootElement(name = "panData", namespace = "urn:ietf:params:xml:ns:domain-1.0")   @XmlType(     propOrder = {"name", "trid", "processedDate"},     namespace = "urn:ietf:params:xml:ns:domain-1.0"   )   public static class HostPendingActionNotificationResponse       extends PendingActionNotificationResponse {      @XmlElement     NameOrId getName() {       return nameOrId;     }      public static HostPendingActionNotificationResponse create(         String fullyQualifiedHostName, boolean actionResult, Trid trid, DateTime processedDate) {       return init(           new HostPendingActionNotificationResponse(),           fullyQualifiedHostName,           actionResult,           trid,           processedDate);     }   } };data class;blob, data class, long method;t;t;t;blob,  long method;;0;11069;https://github.com/google/nomulus/blob/2481704d00f10f6b5675dd26f9effaad434ddbea/java/google/registry/model/poll/PendingActionNotificationResponse.java/#L31-L153;2;1479;11069
1492; {"message": "YES I found bad smells", "detected_bad_smells": ["Blob", "Data Class", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
	public class TypeRefWithoutModifiersElements extends AbstractParserRuleElementFinder { 		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.n4js.ts.TypeExpressions.TypeRefWithoutModifiers"); 		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1); 		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0); 		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0); 		private final RuleCall cParameterizedTypeRefParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0); 		private final RuleCall cThisTypeRefParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1); 		private final Assignment cDynamicAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1); 		private final Keyword cDynamicPlusSignKeyword_0_1_0 = (Keyword)cDynamicAssignment_0_1.eContents().get(0); 		private final RuleCall cTypeTypeRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1); 		private final RuleCall cFunctionTypeExpressionOLDParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2); 		private final RuleCall cUnionTypeExpressionOLDParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3); 		private final RuleCall cIntersectionTypeExpressionOLDParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4); 		 		//TypeRefWithoutModifiers StaticBaseTypeRef: 		//	(ParameterizedTypeRef | ThisTypeRef) => dynamic?='+'? | TypeTypeRef 		//	| FunctionTypeExpressionOLD 		//	| UnionTypeExpressionOLD 		//	| IntersectionTypeExpressionOLD; 		@Override public ParserRule getRule() { return rule; } 		 		//(ParameterizedTypeRef | ThisTypeRef) => dynamic?='+'? | TypeTypeRef | FunctionTypeExpressionOLD | UnionTypeExpressionOLD 		//| IntersectionTypeExpressionOLD 		public Alternatives getAlternatives() { return cAlternatives; } 		 		//(ParameterizedTypeRef | ThisTypeRef) => dynamic?='+'? 		public Group getGroup_0() { return cGroup_0; } 		 		//ParameterizedTypeRef | ThisTypeRef 		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; } 		 		//ParameterizedTypeRef 		public RuleCall getParameterizedTypeRefParserRuleCall_0_0_0() { return cParameterizedTypeRefParserRuleCall_0_0_0; } 		 		//ThisTypeRef 		public RuleCall getThisTypeRefParserRuleCall_0_0_1() { return cThisTypeRefParserRuleCall_0_0_1; } 		 		//=> dynamic?='+'? 		public Assignment getDynamicAssignment_0_1() { return cDynamicAssignment_0_1; } 		 		//'+' 		public Keyword getDynamicPlusSignKeyword_0_1_0() { return cDynamicPlusSignKeyword_0_1_0; } 		 		//TypeTypeRef 		public RuleCall getTypeTypeRefParserRuleCall_1() { return cTypeTypeRefParserRuleCall_1; } 		 		//FunctionTypeExpressionOLD 		public RuleCall getFunctionTypeExpressionOLDParserRuleCall_2() { return cFunctionTypeExpressionOLDParserRuleCall_2; } 		 		//UnionTypeExpressionOLD 		public RuleCall getUnionTypeExpressionOLDParserRuleCall_3() { return cUnionTypeExpressionOLDParserRuleCall_3; } 		 		//IntersectionTypeExpressionOLD 		public RuleCall getIntersectionTypeExpressionOLDParserRuleCall_4() { return cIntersectionTypeExpressionOLDParserRuleCall_4; } 	};data class;blob, data class, long method;t;t;t;blob,  long method;;0;11118;https://github.com/eclipse/n4js/blob/f715912fce0352ab574ff878086f77d17a78c908/plugins/org.eclipse.n4js.ts/src-gen/org/eclipse/n4js/ts/services/TypeExpressionsGrammarAccess.java/#L201-L255;2;1492;11118
1519;  {"message": "YES I found bad smells", "detected_bad_smells": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
        @Override         public void startElement(final String uri, final String localName, final String qname, final Attributes attributes) throws SAXException         {             // Verify and initialize the context stack at root element.             if (contextStack.size() == 0)             {                 if (!qname.equals(rootElement))                 {                     throw new SAXConfigurationException(                             new ConfigurationException.IncorrectElement(rootElement, qname, this.source, locator.getLineNumber()),                             locator);                 }                                 String all = attributes.getValue("includeAllClasses");                 if ("true".equals(all))                     allClasses = true;                 contextStack.push(qname);                 return;             }             else             {                 if (qname.equals("classEntry"))                 {                     String path = attributes.getValue("path");                     includedClasses.add(path);                 }                 else if (qname.equals("namespaceManifestEntry"))                 {                     String manifest = attributes.getValue("manifest");                     String namespace = attributes.getValue("namespace");                     fbArgs.add("-namespace");                     fbArgs.add(namespace);                     String mf = contextPath + "/" + manifest;                     File f = new File(mf);                     if (!f.exists())                     {                         mf = contextPath + "/src/" + manifest;                     }                     fbArgs.add(mf);                     fbArgs.add("-include-namespaces");                     fbArgs.add(namespace);                                     }             }         };feature envy;Blob, Long Method;t;f;f;Blob,  Long Method;feature envy;0;11171;https://github.com/apache/royale-compiler/blob/fbd9bc3b9e48c80dbd8c1d32a6f83221e314efdd/compiler-common/src/main/java/org/apache/royale/compiler/internal/config/FlashBuilderConfigurator.java/#L468-L510;2;1519;11171
1522; 		{ 			"message": "YES I found bad smells", 			"bad smells are": [ 				"Blob", 				"Data Class", 				"Long Method" 			] 		} ;The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  public static class RowRange {     private Text startRow;     private Text endRow;      public RowRange(KeyExtent ke) {       this.startRow = ke.getPrevEndRow();       this.endRow = ke.getEndRow();     }      public RowRange(TRowRange trr) {       this.startRow = ByteBufferUtil.toText(trr.startRow);       this.endRow = ByteBufferUtil.toText(trr.endRow);     }      public RowRange(Text startRow, Text endRow) {       this.startRow = startRow;       this.endRow = endRow;     }      public Range toRange() {       return new Range(startRow, false, endRow, true);     }      public TRowRange toThrift() {       return new TRowRange(TextUtil.getByteBuffer(startRow), TextUtil.getByteBuffer(endRow));     }      public Text getStartRow() {       return startRow;     }      public Text getEndRow() {       return endRow;     }      @Override     public String toString() {       return startRow + " " + endRow;     }   };data class;Blob, Data Class, Long Method;t;f;t;Blob,  Long Method;;0;11174;https://github.com/apache/accumulo/blob/f896c98c2356a52dfa2235d2cc02ae556ab17909/core/src/main/java/org/apache/accumulo/core/summary/Gatherer.java/#L617-L656;2;1522;11174
1559;     {       "message": "YES I found bad smells",       "bad smells are": [         "Long Method",         "Blob"       ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    public float computeTableUnit(PercentBaseContext percentBaseContext, int contentAreaIPD) {          int sumCols = 0;         float factors = 0;         float unit = 0;          /* calculate the total width (specified absolute/percentages),          * and work out the total number of factors to use to distribute          * the remaining space (if any)          */         for (Object colWidth1 : colWidths) {             Length colWidth = (Length) colWidth1;             if (colWidth != null) {                 sumCols += colWidth.getValue(percentBaseContext);                 if (colWidth instanceof RelativeNumericProperty) {                     factors += ((RelativeNumericProperty) colWidth).getTableUnits();                 } else if (colWidth instanceof TableColLength) {                     factors += ((TableColLength) colWidth).getTableUnits();                 }             }         }          /* distribute the remaining space over the accumulated          * factors (if any)          */         if (factors > 0) {             if (sumCols < contentAreaIPD) {                 unit = (contentAreaIPD - sumCols) / factors;             } else {                 log.warn("No space remaining to distribute over columns.");             }         }          return unit;     };long method;Long Method, Blob;t;f;t; Blob;;0;11300;https://github.com/apache/fop/blob/caced35327f6b6d6eeac2a13543f3c458e902101/fop-core/src/main/java/org/apache/fop/layoutmgr/table/ColumnSetup.java/#L201-L235;2;1559;11300
1570;  {"message": "YES I found bad smells", "the bad smells are": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class DataBinder implements PropertyEditorRegistry, TypeConverter {  	/** Default object name used for binding: "target". */ 	public static final String DEFAULT_OBJECT_NAME = "target";  	/** Default limit for array and collection growing: 256. */ 	public static final int DEFAULT_AUTO_GROW_COLLECTION_LIMIT = 256;   	/** 	 * We'll create a lot of DataBinder instances: Let's use a static logger. 	 */ 	protected static final Log logger = LogFactory.getLog(DataBinder.class);  	@Nullable 	private final Object target;  	private final String objectName;  	@Nullable 	private AbstractPropertyBindingResult bindingResult;  	@Nullable 	private SimpleTypeConverter typeConverter;  	private boolean ignoreUnknownFields = true;  	private boolean ignoreInvalidFields = false;  	private boolean autoGrowNestedPaths = true;  	private int autoGrowCollectionLimit = DEFAULT_AUTO_GROW_COLLECTION_LIMIT;  	@Nullable 	private String[] allowedFields;  	@Nullable 	private String[] disallowedFields;  	@Nullable 	private String[] requiredFields;  	@Nullable 	private ConversionService conversionService;  	@Nullable 	private MessageCodesResolver messageCodesResolver;  	private BindingErrorProcessor bindingErrorProcessor = new DefaultBindingErrorProcessor();  	private final List validators = new ArrayList<>();   	/** 	 * Create a new DataBinder instance, with default object name. 	 * @param target the target object to bind onto (or {@code null} 	 * if the binder is just used to convert a plain parameter value) 	 * @see #DEFAULT_OBJECT_NAME 	 */ 	public DataBinder(@Nullable Object target) { 		this(target, DEFAULT_OBJECT_NAME); 	}  	/** 	 * Create a new DataBinder instance. 	 * @param target the target object to bind onto (or {@code null} 	 * if the binder is just used to convert a plain parameter value) 	 * @param objectName the name of the target object 	 */ 	public DataBinder(@Nullable Object target, String objectName) { 		this.target = ObjectUtils.unwrapOptional(target); 		this.objectName = objectName; 	}   	/** 	 * Return the wrapped target object. 	 */ 	@Nullable 	public Object getTarget() { 		return this.target; 	}  	/** 	 * Return the name of the bound object. 	 */ 	public String getObjectName() { 		return this.objectName; 	}  	/** 	 * Set whether this binder should attempt to "auto-grow" a nested path that contains a null value. 	 * If "true", a null path location will be populated with a default object value and traversed 	 * instead of resulting in an exception. This flag also enables auto-growth of collection elements 	 * when accessing an out-of-bounds index. 	 * Default is "true" on a standard DataBinder. Note that since Spring 4.1 this feature is supported 	 * for bean property access (DataBinder's default mode) and field access. 	 * @see #initBeanPropertyAccess() 	 * @see org.springframework.beans.BeanWrapper#setAutoGrowNestedPaths 	 */ 	public void setAutoGrowNestedPaths(boolean autoGrowNestedPaths) { 		Assert.state(this.bindingResult == null, 				"DataBinder is already initialized - call setAutoGrowNestedPaths before other configuration methods"); 		this.autoGrowNestedPaths = autoGrowNestedPaths; 	}  	/** 	 * Return whether "auto-growing" of nested paths has been activated. 	 */ 	public boolean isAutoGrowNestedPaths() { 		return this.autoGrowNestedPaths; 	}  	/** 	 * Specify the limit for array and collection auto-growing. 	 * Default is 256, preventing OutOfMemoryErrors in case of large indexes. 	 * Raise this limit if your auto-growing needs are unusually high. 	 * @see #initBeanPropertyAccess() 	 * @see org.springframework.beans.BeanWrapper#setAutoGrowCollectionLimit 	 */ 	public void setAutoGrowCollectionLimit(int autoGrowCollectionLimit) { 		Assert.state(this.bindingResult == null, 				"DataBinder is already initialized - call setAutoGrowCollectionLimit before other configuration methods"); 		this.autoGrowCollectionLimit = autoGrowCollectionLimit; 	}  	/** 	 * Return the current limit for array and collection auto-growing. 	 */ 	public int getAutoGrowCollectionLimit() { 		return this.autoGrowCollectionLimit; 	}  	/** 	 * Initialize standard JavaBean property access for this DataBinder. 	 * This is the default; an explicit call just leads to eager initialization. 	 * @see #initDirectFieldAccess() 	 * @see #createBeanPropertyBindingResult() 	 */ 	public void initBeanPropertyAccess() { 		Assert.state(this.bindingResult == null, 				"DataBinder is already initialized - call initBeanPropertyAccess before other configuration methods"); 		this.bindingResult = createBeanPropertyBindingResult(); 	}  	/** 	 * Create the {@link AbstractPropertyBindingResult} instance using standard 	 * JavaBean property access. 	 * @since 4.2.1 	 */ 	protected AbstractPropertyBindingResult createBeanPropertyBindingResult() { 		BeanPropertyBindingResult result = new BeanPropertyBindingResult(getTarget(), 				getObjectName(), isAutoGrowNestedPaths(), getAutoGrowCollectionLimit());  		if (this.conversionService != null) { 			result.initConversion(this.conversionService); 		} 		if (this.messageCodesResolver != null) { 			result.setMessageCodesResolver(this.messageCodesResolver); 		}  		return result; 	}  	/** 	 * Initialize direct field access for this DataBinder, 	 * as alternative to the default bean property access. 	 * @see #initBeanPropertyAccess() 	 * @see #createDirectFieldBindingResult() 	 */ 	public void initDirectFieldAccess() { 		Assert.state(this.bindingResult == null, 				"DataBinder is already initialized - call initDirectFieldAccess before other configuration methods"); 		this.bindingResult = createDirectFieldBindingResult(); 	}  	/** 	 * Create the {@link AbstractPropertyBindingResult} instance using direct 	 * field access. 	 * @since 4.2.1 	 */ 	protected AbstractPropertyBindingResult createDirectFieldBindingResult() { 		DirectFieldBindingResult result = new DirectFieldBindingResult(getTarget(), 				getObjectName(), isAutoGrowNestedPaths());  		if (this.conversionService != null) { 			result.initConversion(this.conversionService); 		} 		if (this.messageCodesResolver != null) { 			result.setMessageCodesResolver(this.messageCodesResolver); 		}  		return result; 	}  	/** 	 * Return the internal BindingResult held by this DataBinder, 	 * as an AbstractPropertyBindingResult. 	 */ 	protected AbstractPropertyBindingResult getInternalBindingResult() { 		if (this.bindingResult == null) { 			initBeanPropertyAccess(); 		} 		return this.bindingResult; 	}  	/** 	 * Return the underlying PropertyAccessor of this binder's BindingResult. 	 */ 	protected ConfigurablePropertyAccessor getPropertyAccessor() { 		return getInternalBindingResult().getPropertyAccessor(); 	}  	/** 	 * Return this binder's underlying SimpleTypeConverter. 	 */ 	protected SimpleTypeConverter getSimpleTypeConverter() { 		if (this.typeConverter == null) { 			this.typeConverter = new SimpleTypeConverter(); 			if (this.conversionService != null) { 				this.typeConverter.setConversionService(this.conversionService); 			} 		} 		return this.typeConverter; 	}  	/** 	 * Return the underlying TypeConverter of this binder's BindingResult. 	 */ 	protected PropertyEditorRegistry getPropertyEditorRegistry() { 		if (getTarget() != null) { 			return getInternalBindingResult().getPropertyAccessor(); 		} 		else { 			return getSimpleTypeConverter(); 		} 	}  	/** 	 * Return the underlying TypeConverter of this binder's BindingResult. 	 */ 	protected TypeConverter getTypeConverter() { 		if (getTarget() != null) { 			return getInternalBindingResult().getPropertyAccessor(); 		} 		else { 			return getSimpleTypeConverter(); 		} 	}  	/** 	 * Return the BindingResult instance created by this DataBinder. 	 * This allows for convenient access to the binding results after 	 * a bind operation. 	 * @return the BindingResult instance, to be treated as BindingResult 	 * or as Errors instance (Errors is a super-interface of BindingResult) 	 * @see Errors 	 * @see #bind 	 */ 	public BindingResult getBindingResult() { 		return getInternalBindingResult(); 	}   	/** 	 * Set whether to ignore unknown fields, that is, whether to ignore bind 	 * parameters that do not have corresponding fields in the target object. 	 * Default is "true". Turn this off to enforce that all bind parameters 	 * must have a matching field in the target object. 	 * Note that this setting only applies to binding operations 	 * on this DataBinder, not to retrieving values via its 	 * {@link #getBindingResult() BindingResult}. 	 * @see #bind 	 */ 	public void setIgnoreUnknownFields(boolean ignoreUnknownFields) { 		this.ignoreUnknownFields = ignoreUnknownFields; 	}  	/** 	 * Return whether to ignore unknown fields when binding. 	 */ 	public boolean isIgnoreUnknownFields() { 		return this.ignoreUnknownFields; 	}  	/** 	 * Set whether to ignore invalid fields, that is, whether to ignore bind 	 * parameters that have corresponding fields in the target object which are 	 * not accessible (for example because of null values in the nested path). 	 * Default is "false". Turn this on to ignore bind parameters for 	 * nested objects in non-existing parts of the target object graph. 	 * Note that this setting only applies to binding operations 	 * on this DataBinder, not to retrieving values via its 	 * {@link #getBindingResult() BindingResult}. 	 * @see #bind 	 */ 	public void setIgnoreInvalidFields(boolean ignoreInvalidFields) { 		this.ignoreInvalidFields = ignoreInvalidFields; 	}  	/** 	 * Return whether to ignore invalid fields when binding. 	 */ 	public boolean isIgnoreInvalidFields() { 		return this.ignoreInvalidFields; 	}  	/** 	 * Register fields that should be allowed for binding. Default is all 	 * fields. Restrict this for example to avoid unwanted modifications 	 * by malicious users when binding HTTP request parameters. 	 * Supports "xxx*", "*xxx" and "*xxx*" patterns. More sophisticated matching 	 * can be implemented by overriding the {@code isAllowed} method. 	 * Alternatively, specify a list of disallowed fields. 	 * @param allowedFields array of field names 	 * @see #setDisallowedFields 	 * @see #isAllowed(String) 	 */ 	public void setAllowedFields(@Nullable String... allowedFields) { 		this.allowedFields = PropertyAccessorUtils.canonicalPropertyNames(allowedFields); 	}  	/** 	 * Return the fields that should be allowed for binding. 	 * @return array of field names 	 */ 	@Nullable 	public String[] getAllowedFields() { 		return this.allowedFields; 	}  	/** 	 * Register fields that should not be allowed for binding. Default is none. 	 * Mark fields as disallowed for example to avoid unwanted modifications 	 * by malicious users when binding HTTP request parameters. 	 * Supports "xxx*", "*xxx" and "*xxx*" patterns. More sophisticated matching 	 * can be implemented by overriding the {@code isAllowed} method. 	 * Alternatively, specify a list of allowed fields. 	 * @param disallowedFields array of field names 	 * @see #setAllowedFields 	 * @see #isAllowed(String) 	 */ 	public void setDisallowedFields(@Nullable String... disallowedFields) { 		this.disallowedFields = PropertyAccessorUtils.canonicalPropertyNames(disallowedFields); 	}  	/** 	 * Return the fields that should not be allowed for binding. 	 * @return array of field names 	 */ 	@Nullable 	public String[] getDisallowedFields() { 		return this.disallowedFields; 	}  	/** 	 * Register fields that are required for each binding process. 	 * If one of the specified fields is not contained in the list of 	 * incoming property values, a corresponding "missing field" error 	 * will be created, with error code "required" (by the default 	 * binding error processor). 	 * @param requiredFields array of field names 	 * @see #setBindingErrorProcessor 	 * @see DefaultBindingErrorProcessor#MISSING_FIELD_ERROR_CODE 	 */ 	public void setRequiredFields(@Nullable String... requiredFields) { 		this.requiredFields = PropertyAccessorUtils.canonicalPropertyNames(requiredFields); 		if (logger.isDebugEnabled()) { 			logger.debug("DataBinder requires binding of required fields [" + 					StringUtils.arrayToCommaDelimitedString(requiredFields) + "]"); 		} 	}  	/** 	 * Return the fields that are required for each binding process. 	 * @return array of field names 	 */ 	@Nullable 	public String[] getRequiredFields() { 		return this.requiredFields; 	}  	/** 	 * Set the strategy to use for resolving errors into message codes. 	 * Applies the given strategy to the underlying errors holder. 	 * Default is a DefaultMessageCodesResolver. 	 * @see BeanPropertyBindingResult#setMessageCodesResolver 	 * @see DefaultMessageCodesResolver 	 */ 	public void setMessageCodesResolver(@Nullable MessageCodesResolver messageCodesResolver) { 		Assert.state(this.messageCodesResolver == null, "DataBinder is already initialized with MessageCodesResolver"); 		this.messageCodesResolver = messageCodesResolver; 		if (this.bindingResult != null && messageCodesResolver != null) { 			this.bindingResult.setMessageCodesResolver(messageCodesResolver); 		} 	}  	/** 	 * Set the strategy to use for processing binding errors, that is, 	 * required field errors and {@code PropertyAccessException}s. 	 * Default is a DefaultBindingErrorProcessor. 	 * @see DefaultBindingErrorProcessor 	 */ 	public void setBindingErrorProcessor(BindingErrorProcessor bindingErrorProcessor) { 		Assert.notNull(bindingErrorProcessor, "BindingErrorProcessor must not be null"); 		this.bindingErrorProcessor = bindingErrorProcessor; 	}  	/** 	 * Return the strategy for processing binding errors. 	 */ 	public BindingErrorProcessor getBindingErrorProcessor() { 		return this.bindingErrorProcessor; 	}  	/** 	 * Set the Validator to apply after each binding step. 	 * @see #addValidators(Validator...) 	 * @see #replaceValidators(Validator...) 	 */ 	public void setValidator(@Nullable Validator validator) { 		assertValidators(validator); 		this.validators.clear(); 		if (validator != null) { 			this.validators.add(validator); 		} 	}  	private void assertValidators(Validator... validators) { 		Object target = getTarget(); 		for (Validator validator : validators) { 			if (validator != null && (target != null && !validator.supports(target.getClass()))) { 				throw new IllegalStateException("Invalid target for Validator [" + validator + "]: " + target); 			} 		} 	}  	/** 	 * Add Validators to apply after each binding step. 	 * @see #setValidator(Validator) 	 * @see #replaceValidators(Validator...) 	 */ 	public void addValidators(Validator... validators) { 		assertValidators(validators); 		this.validators.addAll(Arrays.asList(validators)); 	}  	/** 	 * Replace the Validators to apply after each binding step. 	 * @see #setValidator(Validator) 	 * @see #addValidators(Validator...) 	 */ 	public void replaceValidators(Validator... validators) { 		assertValidators(validators); 		this.validators.clear(); 		this.validators.addAll(Arrays.asList(validators)); 	}  	/** 	 * Return the primary Validator to apply after each binding step, if any. 	 */ 	@Nullable 	public Validator getValidator() { 		return (!this.validators.isEmpty() ? this.validators.get(0) : null); 	}  	/** 	 * Return the Validators to apply after data binding. 	 */ 	public List getValidators() { 		return Collections.unmodifiableList(this.validators); 	}   	//--------------------------------------------------------------------- 	// Implementation of PropertyEditorRegistry/TypeConverter interface 	//---------------------------------------------------------------------  	/** 	 * Specify a Spring 3.0 ConversionService to use for converting 	 * property values, as an alternative to JavaBeans PropertyEditors. 	 */ 	public void setConversionService(@Nullable ConversionService conversionService) { 		Assert.state(this.conversionService == null, "DataBinder is already initialized with ConversionService"); 		this.conversionService = conversionService; 		if (this.bindingResult != null && conversionService != null) { 			this.bindingResult.initConversion(conversionService); 		} 	}  	/** 	 * Return the associated ConversionService, if any. 	 */ 	@Nullable 	public ConversionService getConversionService() { 		return this.conversionService; 	}  	/** 	 * Add a custom formatter, applying it to all fields matching the 	 * {@link Formatter}-declared type. 	 * Registers a corresponding {@link PropertyEditor} adapter underneath the covers. 	 * @param formatter the formatter to add, generically declared for a specific type 	 * @since 4.2 	 * @see #registerCustomEditor(Class, PropertyEditor) 	 */ 	public void addCustomFormatter(Formatter formatter) { 		FormatterPropertyEditorAdapter adapter = new FormatterPropertyEditorAdapter(formatter); 		getPropertyEditorRegistry().registerCustomEditor(adapter.getFieldType(), adapter); 	}  	/** 	 * Add a custom formatter for the field type specified in {@link Formatter} class, 	 * applying it to the specified fields only, if any, or otherwise to all fields. 	 * Registers a corresponding {@link PropertyEditor} adapter underneath the covers. 	 * @param formatter the formatter to add, generically declared for a specific type 	 * @param fields the fields to apply the formatter to, or none if to be applied to all 	 * @since 4.2 	 * @see #registerCustomEditor(Class, String, PropertyEditor) 	 */ 	public void addCustomFormatter(Formatter formatter, String... fields) { 		FormatterPropertyEditorAdapter adapter = new FormatterPropertyEditorAdapter(formatter); 		Class fieldType = adapter.getFieldType(); 		if (ObjectUtils.isEmpty(fields)) { 			getPropertyEditorRegistry().registerCustomEditor(fieldType, adapter); 		} 		else { 			for (String field : fields) { 				getPropertyEditorRegistry().registerCustomEditor(fieldType, field, adapter); 			} 		} 	}  	/** 	 * Add a custom formatter, applying it to the specified field types only, if any, 	 * or otherwise to all fields matching the {@link Formatter}-declared type. 	 * Registers a corresponding {@link PropertyEditor} adapter underneath the covers. 	 * @param formatter the formatter to add (does not need to generically declare a 	 * field type if field types are explicitly specified as parameters) 	 * @param fieldTypes the field types to apply the formatter to, or none if to be 	 * derived from the given {@link Formatter} implementation class 	 * @since 4.2 	 * @see #registerCustomEditor(Class, PropertyEditor) 	 */ 	public void addCustomFormatter(Formatter formatter, Class... fieldTypes) { 		FormatterPropertyEditorAdapter adapter = new FormatterPropertyEditorAdapter(formatter); 		if (ObjectUtils.isEmpty(fieldTypes)) { 			getPropertyEditorRegistry().registerCustomEditor(adapter.getFieldType(), adapter); 		} 		else { 			for (Class fieldType : fieldTypes) { 				getPropertyEditorRegistry().registerCustomEditor(fieldType, adapter); 			} 		} 	}  	@Override 	public void registerCustomEditor(Class requiredType, PropertyEditor propertyEditor) { 		getPropertyEditorRegistry().registerCustomEditor(requiredType, propertyEditor); 	}  	@Override 	public void registerCustomEditor(@Nullable Class requiredType, @Nullable String field, PropertyEditor propertyEditor) { 		getPropertyEditorRegistry().registerCustomEditor(requiredType, field, propertyEditor); 	}  	@Override 	@Nullable 	public PropertyEditor findCustomEditor(@Nullable Class requiredType, @Nullable String propertyPath) { 		return getPropertyEditorRegistry().findCustomEditor(requiredType, propertyPath); 	}  	@Override 	@Nullable 	public  T convertIfNecessary(@Nullable Object value, @Nullable Class requiredType) throws TypeMismatchException { 		return getTypeConverter().convertIfNecessary(value, requiredType); 	}  	@Override 	@Nullable 	public  T convertIfNecessary(@Nullable Object value, @Nullable Class requiredType, 			@Nullable MethodParameter methodParam) throws TypeMismatchException {  		return getTypeConverter().convertIfNecessary(value, requiredType, methodParam); 	}  	@Override 	@Nullable 	public  T convertIfNecessary(@Nullable Object value, @Nullable Class requiredType, @Nullable Field field) 			throws TypeMismatchException {  		return getTypeConverter().convertIfNecessary(value, requiredType, field); 	}  	@Nullable 	@Override 	public  T convertIfNecessary(@Nullable Object value, @Nullable Class requiredType, 			@Nullable TypeDescriptor typeDescriptor) throws TypeMismatchException {  		return getTypeConverter().convertIfNecessary(value, requiredType, typeDescriptor); 	}   	/** 	 * Bind the given property values to this binder's target. 	 * This call can create field errors, representing basic binding 	 * errors like a required field (code "required"), or type mismatch 	 * between value and bean property (code "typeMismatch"). 	 * Note that the given PropertyValues should be a throwaway instance: 	 * For efficiency, it will be modified to just contain allowed fields if it 	 * implements the MutablePropertyValues interface; else, an internal mutable 	 * copy will be created for this purpose. Pass in a copy of the PropertyValues 	 * if you want your original instance to stay unmodified in any case. 	 * @param pvs property values to bind 	 * @see #doBind(org.springframework.beans.MutablePropertyValues) 	 */ 	public void bind(PropertyValues pvs) { 		MutablePropertyValues mpvs = (pvs instanceof MutablePropertyValues ? 				(MutablePropertyValues) pvs : new MutablePropertyValues(pvs)); 		doBind(mpvs); 	}  	/** 	 * Actual implementation of the binding process, working with the 	 * passed-in MutablePropertyValues instance. 	 * @param mpvs the property values to bind, 	 * as MutablePropertyValues instance 	 * @see #checkAllowedFields 	 * @see #checkRequiredFields 	 * @see #applyPropertyValues 	 */ 	protected void doBind(MutablePropertyValues mpvs) { 		checkAllowedFields(mpvs); 		checkRequiredFields(mpvs); 		applyPropertyValues(mpvs); 	}  	/** 	 * Check the given property values against the allowed fields, 	 * removing values for fields that are not allowed. 	 * @param mpvs the property values to be bound (can be modified) 	 * @see #getAllowedFields 	 * @see #isAllowed(String) 	 */ 	protected void checkAllowedFields(MutablePropertyValues mpvs) { 		PropertyValue[] pvs = mpvs.getPropertyValues(); 		for (PropertyValue pv : pvs) { 			String field = PropertyAccessorUtils.canonicalPropertyName(pv.getName()); 			if (!isAllowed(field)) { 				mpvs.removePropertyValue(pv); 				getBindingResult().recordSuppressedField(field); 				if (logger.isDebugEnabled()) { 					logger.debug("Field [" + field + "] has been removed from PropertyValues " + 							"and will not be bound, because it has not been found in the list of allowed fields"); 				} 			} 		} 	}  	/** 	 * Return if the given field is allowed for binding. 	 * Invoked for each passed-in property value. 	 * The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches, 	 * as well as direct equality, in the specified lists of allowed fields and 	 * disallowed fields. A field matching a disallowed pattern will not be accepted 	 * even if it also happens to match a pattern in the allowed list. 	 * Can be overridden in subclasses. 	 * @param field the field to check 	 * @return if the field is allowed 	 * @see #setAllowedFields 	 * @see #setDisallowedFields 	 * @see org.springframework.util.PatternMatchUtils#simpleMatch(String, String) 	 */ 	protected boolean isAllowed(String field) { 		String[] allowed = getAllowedFields(); 		String[] disallowed = getDisallowedFields(); 		return ((ObjectUtils.isEmpty(allowed) || PatternMatchUtils.simpleMatch(allowed, field)) && 				(ObjectUtils.isEmpty(disallowed) || !PatternMatchUtils.simpleMatch(disallowed, field))); 	}  	/** 	 * Check the given property values against the required fields, 	 * generating missing field errors where appropriate. 	 * @param mpvs the property values to be bound (can be modified) 	 * @see #getRequiredFields 	 * @see #getBindingErrorProcessor 	 * @see BindingErrorProcessor#processMissingFieldError 	 */ 	protected void checkRequiredFields(MutablePropertyValues mpvs) { 		String[] requiredFields = getRequiredFields(); 		if (!ObjectUtils.isEmpty(requiredFields)) { 			Map propertyValues = new HashMap<>(); 			PropertyValue[] pvs = mpvs.getPropertyValues(); 			for (PropertyValue pv : pvs) { 				String canonicalName = PropertyAccessorUtils.canonicalPropertyName(pv.getName()); 				propertyValues.put(canonicalName, pv); 			} 			for (String field : requiredFields) { 				PropertyValue pv = propertyValues.get(field); 				boolean empty = (pv == null || pv.getValue() == null); 				if (!empty) { 					if (pv.getValue() instanceof String) { 						empty = !StringUtils.hasText((String) pv.getValue()); 					} 					else if (pv.getValue() instanceof String[]) { 						String[] values = (String[]) pv.getValue(); 						empty = (values.length == 0 || !StringUtils.hasText(values[0])); 					} 				} 				if (empty) { 					// Use bind error processor to create FieldError. 					getBindingErrorProcessor().processMissingFieldError(field, getInternalBindingResult()); 					// Remove property from property values to bind: 					// It has already caused a field error with a rejected value. 					if (pv != null) { 						mpvs.removePropertyValue(pv); 						propertyValues.remove(field); 					} 				} 			} 		} 	}  	/** 	 * Apply given property values to the target object. 	 * Default implementation applies all of the supplied property 	 * values as bean property values. By default, unknown fields will 	 * be ignored. 	 * @param mpvs the property values to be bound (can be modified) 	 * @see #getTarget 	 * @see #getPropertyAccessor 	 * @see #isIgnoreUnknownFields 	 * @see #getBindingErrorProcessor 	 * @see BindingErrorProcessor#processPropertyAccessException 	 */ 	protected void applyPropertyValues(MutablePropertyValues mpvs) { 		try { 			// Bind request parameters onto target object. 			getPropertyAccessor().setPropertyValues(mpvs, isIgnoreUnknownFields(), isIgnoreInvalidFields()); 		} 		catch (PropertyBatchUpdateException ex) { 			// Use bind error processor to create FieldErrors. 			for (PropertyAccessException pae : ex.getPropertyAccessExceptions()) { 				getBindingErrorProcessor().processPropertyAccessException(pae, getInternalBindingResult()); 			} 		} 	}   	/** 	 * Invoke the specified Validators, if any. 	 * @see #setValidator(Validator) 	 * @see #getBindingResult() 	 */ 	public void validate() { 		Object target = getTarget(); 		Assert.state(target != null, "No target to validate"); 		BindingResult bindingResult = getBindingResult(); 		// Call each validator with the same binding result 		for (Validator validator : getValidators()) { 			validator.validate(target, bindingResult); 		} 	}  	/** 	 * Invoke the specified Validators, if any, with the given validation hints. 	 * Note: Validation hints may get ignored by the actual target Validator. 	 * @param validationHints one or more hint objects to be passed to a {@link SmartValidator} 	 * @since 3.1 	 * @see #setValidator(Validator) 	 * @see SmartValidator#validate(Object, Errors, Object...) 	 */ 	public void validate(Object... validationHints) { 		Object target = getTarget(); 		Assert.state(target != null, "No target to validate"); 		BindingResult bindingResult = getBindingResult(); 		// Call each validator with the same binding result 		for (Validator validator : getValidators()) { 			if (!ObjectUtils.isEmpty(validationHints) && validator instanceof SmartValidator) { 				((SmartValidator) validator).validate(target, bindingResult, validationHints); 			} 			else if (validator != null) { 				validator.validate(target, bindingResult); 			} 		} 	}  	/** 	 * Close this DataBinder, which may result in throwing 	 * a BindException if it encountered any errors. 	 * @return the model Map, containing target object and Errors instance 	 * @throws BindException if there were any errors in the bind operation 	 * @see BindingResult#getModel() 	 */ 	public Map close() throws BindException { 		if (getBindingResult().hasErrors()) { 			throw new BindException(getBindingResult()); 		} 		return getBindingResult().getModel(); 	}  };data class;blob, long method;t;t;f;blob,  long method;data class;0;11335;https://github.com/spring-projects/spring-framework/blob/3a0f309e2c9fdbbf7fb2d348be861528177f8555/spring-context/src/main/java/org/springframework/validation/DataBinder.java/#L110-L911;2;1570;11335
1594;{     "output": "YES I found bad smells",     "bad smells are": [         "Blob",         "Data Class"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class ConsoleProxyClientParam {     private String clientHostAddress;     private int clientHostPort;     private String clientHostPassword;     private String clientTag;     private String ticket;     private String locale;     private String clientTunnelUrl;     private String clientTunnelSession;      private String hypervHost;      private String ajaxSessionId;     private String username;     private String password;      public ConsoleProxyClientParam() {         clientHostPort = 0;     }      public String getClientHostAddress() {         return clientHostAddress;     }      public void setClientHostAddress(String clientHostAddress) {         this.clientHostAddress = clientHostAddress;     }      public int getClientHostPort() {         return clientHostPort;     }      public void setClientHostPort(int clientHostPort) {         this.clientHostPort = clientHostPort;     }      public String getClientHostPassword() {         return clientHostPassword;     }      public void setClientHostPassword(String clientHostPassword) {         this.clientHostPassword = clientHostPassword;     }      public String getClientTag() {         return clientTag;     }      public void setClientTag(String clientTag) {         this.clientTag = clientTag;     }      public String getTicket() {         return ticket;     }      public void setTicket(String ticket) {         this.ticket = ticket;     }      public String getClientTunnelUrl() {         return clientTunnelUrl;     }      public void setClientTunnelUrl(String clientTunnelUrl) {         this.clientTunnelUrl = clientTunnelUrl;     }      public String getClientTunnelSession() {         return clientTunnelSession;     }      public void setClientTunnelSession(String clientTunnelSession) {         this.clientTunnelSession = clientTunnelSession;     }      public String getAjaxSessionId() {         return ajaxSessionId;     }      public void setAjaxSessionId(String ajaxSessionId) {         this.ajaxSessionId = ajaxSessionId;     }      public String getLocale() {         return locale;     }      public void setLocale(String locale) {         this.locale = locale;     }      public String getClientMapKey() {         if (clientTag != null && !clientTag.isEmpty())             return clientTag;          return clientHostAddress + ":" + clientHostPort;     }      public void setHypervHost(String host) {         hypervHost = host;     }      public String getHypervHost() {         return hypervHost;     }      public void setUsername(String username) {         this.username = username;      }      public String getUsername() {         return username;     }      public void setPassword(String password) {         this.password = password;     }      public String getPassword() {         return password;     } };data class;Blob, Data Class;t;f;t;Blob;;0;11407;https://github.com/apache/cloudstack/blob/8d3feb100aab4a45b31a789f444038b892161eec/server/src/main/java/com/cloud/servlet/ConsoleProxyClientParam.java/#L20-L143;2;1594;11407
1617;{"answer": "YES I found bad smells", "detected_bad_smells": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    public static final class Builder extends         com.google.protobuf.GeneratedMessage.Builder implements         // @@protoc_insertion_point(builder_implements:com.alibaba.otter.canal.protocol.RowChange)         RowChangeOrBuilder {       public static final com.google.protobuf.Descriptors.Descriptor           getDescriptor() {         return CanalEntry.internal_static_com_alibaba_otter_canal_protocol_RowChange_descriptor;       }        protected FieldAccessorTable           internalGetFieldAccessorTable() {         return CanalEntry.internal_static_com_alibaba_otter_canal_protocol_RowChange_fieldAccessorTable             .ensureFieldAccessorsInitialized(                 RowChange.class, Builder.class);       }        // Construct using com.alibaba.otter.canal.protocol.CanalEntry.RowChange.newBuilder()       private Builder() {         maybeForceBuilderInitialization();       }        private Builder(           BuilderParent parent) {         super(parent);         maybeForceBuilderInitialization();       }       private void maybeForceBuilderInitialization() {         if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {           getRowDatasFieldBuilder();           getPropsFieldBuilder();         }       }       private static Builder create() {         return new Builder();       }        public Builder clear() {         super.clear();         tableId_ = 0L;         bitField0_ = (bitField0_ & ~0x00000001);         eventType_ = EventType.UPDATE;         bitField0_ = (bitField0_ & ~0x00000002);         isDdl_ = false;         bitField0_ = (bitField0_ & ~0x00000004);         sql_ = "";         bitField0_ = (bitField0_ & ~0x00000008);         if (rowDatasBuilder_ == null) {           rowDatas_ = java.util.Collections.emptyList();           bitField0_ = (bitField0_ & ~0x00000010);         } else {           rowDatasBuilder_.clear();         }         if (propsBuilder_ == null) {           props_ = java.util.Collections.emptyList();           bitField0_ = (bitField0_ & ~0x00000020);         } else {           propsBuilder_.clear();         }         ddlSchemaName_ = "";         bitField0_ = (bitField0_ & ~0x00000040);         return this;       }        public Builder clone() {         return create().mergeFrom(buildPartial());       }        public com.google.protobuf.Descriptors.Descriptor           getDescriptorForType() {         return CanalEntry.internal_static_com_alibaba_otter_canal_protocol_RowChange_descriptor;       }        public RowChange getDefaultInstanceForType() {         return RowChange.getDefaultInstance();       }        public RowChange build() {         RowChange result = buildPartial();         if (!result.isInitialized()) {           throw newUninitializedMessageException(result);         }         return result;       }        public RowChange buildPartial() {         RowChange result = new RowChange(this);         int from_bitField0_ = bitField0_;         int to_bitField0_ = 0;         if (((from_bitField0_ & 0x00000001) == 0x00000001)) {           to_bitField0_ |= 0x00000001;         }         result.tableId_ = tableId_;         if (((from_bitField0_ & 0x00000002) == 0x00000002)) {           to_bitField0_ |= 0x00000002;         }         result.eventType_ = eventType_;         if (((from_bitField0_ & 0x00000004) == 0x00000004)) {           to_bitField0_ |= 0x00000004;         }         result.isDdl_ = isDdl_;         if (((from_bitField0_ & 0x00000008) == 0x00000008)) {           to_bitField0_ |= 0x00000008;         }         result.sql_ = sql_;         if (rowDatasBuilder_ == null) {           if (((bitField0_ & 0x00000010) == 0x00000010)) {             rowDatas_ = java.util.Collections.unmodifiableList(rowDatas_);             bitField0_ = (bitField0_ & ~0x00000010);           }           result.rowDatas_ = rowDatas_;         } else {           result.rowDatas_ = rowDatasBuilder_.build();         }         if (propsBuilder_ == null) {           if (((bitField0_ & 0x00000020) == 0x00000020)) {             props_ = java.util.Collections.unmodifiableList(props_);             bitField0_ = (bitField0_ & ~0x00000020);           }           result.props_ = props_;         } else {           result.props_ = propsBuilder_.build();         }         if (((from_bitField0_ & 0x00000040) == 0x00000040)) {           to_bitField0_ |= 0x00000010;         }         result.ddlSchemaName_ = ddlSchemaName_;         result.bitField0_ = to_bitField0_;         onBuilt();         return result;       }        public Builder mergeFrom(com.google.protobuf.Message other) {         if (other instanceof RowChange) {           return mergeFrom((RowChange)other);         } else {           super.mergeFrom(other);           return this;         }       }        public Builder mergeFrom(RowChange other) {         if (other == RowChange.getDefaultInstance()) return this;         if (other.hasTableId()) {           setTableId(other.getTableId());         }         if (other.hasEventType()) {           setEventType(other.getEventType());         }         if (other.hasIsDdl()) {           setIsDdl(other.getIsDdl());         }         if (other.hasSql()) {           bitField0_ |= 0x00000008;           sql_ = other.sql_;           onChanged();         }         if (rowDatasBuilder_ == null) {           if (!other.rowDatas_.isEmpty()) {             if (rowDatas_.isEmpty()) {               rowDatas_ = other.rowDatas_;               bitField0_ = (bitField0_ & ~0x00000010);             } else {               ensureRowDatasIsMutable();               rowDatas_.addAll(other.rowDatas_);             }             onChanged();           }         } else {           if (!other.rowDatas_.isEmpty()) {             if (rowDatasBuilder_.isEmpty()) {               rowDatasBuilder_.dispose();               rowDatasBuilder_ = null;               rowDatas_ = other.rowDatas_;               bitField0_ = (bitField0_ & ~0x00000010);               rowDatasBuilder_ =                 com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?                    getRowDatasFieldBuilder() : null;             } else {               rowDatasBuilder_.addAllMessages(other.rowDatas_);             }           }         }         if (propsBuilder_ == null) {           if (!other.props_.isEmpty()) {             if (props_.isEmpty()) {               props_ = other.props_;               bitField0_ = (bitField0_ & ~0x00000020);             } else {               ensurePropsIsMutable();               props_.addAll(other.props_);             }             onChanged();           }         } else {           if (!other.props_.isEmpty()) {             if (propsBuilder_.isEmpty()) {               propsBuilder_.dispose();               propsBuilder_ = null;               props_ = other.props_;               bitField0_ = (bitField0_ & ~0x00000020);               propsBuilder_ =                 com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?                    getPropsFieldBuilder() : null;             } else {               propsBuilder_.addAllMessages(other.props_);             }           }         }         if (other.hasDdlSchemaName()) {           bitField0_ |= 0x00000040;           ddlSchemaName_ = other.ddlSchemaName_;           onChanged();         }         this.mergeUnknownFields(other.getUnknownFields());         return this;       }        public final boolean isInitialized() {         return true;       }        public Builder mergeFrom(           com.google.protobuf.CodedInputStream input,           com.google.protobuf.ExtensionRegistryLite extensionRegistry)           throws java.io.IOException {         RowChange parsedMessage = null;         try {           parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);         } catch (com.google.protobuf.InvalidProtocolBufferException e) {           parsedMessage = (RowChange) e.getUnfinishedMessage();           throw e;         } finally {           if (parsedMessage != null) {             mergeFrom(parsedMessage);           }         }         return this;       }       private int bitField0_;        private long tableId_ ;       /**        * optional int64 tableId = 1;        *        *         **tableId,由数据库产生*        *         */       public boolean hasTableId() {         return ((bitField0_ & 0x00000001) == 0x00000001);       }       /**        * optional int64 tableId = 1;        *        *         **tableId,由数据库产生*        *         */       public long getTableId() {         return tableId_;       }       /**        * optional int64 tableId = 1;        *        *         **tableId,由数据库产生*        *         */       public Builder setTableId(long value) {         bitField0_ |= 0x00000001;         tableId_ = value;         onChanged();         return this;       }       /**        * optional int64 tableId = 1;        *        *         **tableId,由数据库产生*        *         */       public Builder clearTableId() {         bitField0_ = (bitField0_ & ~0x00000001);         tableId_ = 0L;         onChanged();         return this;       }        private EventType eventType_ = EventType.UPDATE;       /**        * optional .com.alibaba.otter.canal.protocol.EventType eventType = 2 [default = UPDATE];        *        *         **数据变更类型*        *         */       public boolean hasEventType() {         return ((bitField0_ & 0x00000002) == 0x00000002);       }       /**        * optional .com.alibaba.otter.canal.protocol.EventType eventType = 2 [default = UPDATE];        *        *         **数据变更类型*        *         */       public EventType getEventType() {         return eventType_;       }       /**        * optional .com.alibaba.otter.canal.protocol.EventType eventType = 2 [default = UPDATE];        *        *         **数据变更类型*        *         */       public Builder setEventType(EventType value) {         if (value == null) {           throw new NullPointerException();         }         bitField0_ |= 0x00000002;         eventType_ = value;         onChanged();         return this;       }       /**        * optional .com.alibaba.otter.canal.protocol.EventType eventType = 2 [default = UPDATE];        *        *         **数据变更类型*        *         */       public Builder clearEventType() {         bitField0_ = (bitField0_ & ~0x00000002);         eventType_ = EventType.UPDATE;         onChanged();         return this;       }        private boolean isDdl_ ;       /**        * optional bool isDdl = 10 [default = false];        *        *         ** 标识是否是ddl语句  *        *         */       public boolean hasIsDdl() {         return ((bitField0_ & 0x00000004) == 0x00000004);       }       /**        * optional bool isDdl = 10 [default = false];        *        *         ** 标识是否是ddl语句  *        *         */       public boolean getIsDdl() {         return isDdl_;       }       /**        * optional bool isDdl = 10 [default = false];        *        *         ** 标识是否是ddl语句  *        *         */       public Builder setIsDdl(boolean value) {         bitField0_ |= 0x00000004;         isDdl_ = value;         onChanged();         return this;       }       /**        * optional bool isDdl = 10 [default = false];        *        *         ** 标识是否是ddl语句  *        *         */       public Builder clearIsDdl() {         bitField0_ = (bitField0_ & ~0x00000004);         isDdl_ = false;         onChanged();         return this;       }        private Object sql_ = "";       /**        * optional string sql = 11;        *        *         ** ddl/query的sql语句  *        *         */       public boolean hasSql() {         return ((bitField0_ & 0x00000008) == 0x00000008);       }       /**        * optional string sql = 11;        *        *         ** ddl/query的sql语句  *        *         */       public String getSql() {         Object ref = sql_;         if (!(ref instanceof String)) {           com.google.protobuf.ByteString bs =               (com.google.protobuf.ByteString) ref;           String s = bs.toStringUtf8();           if (bs.isValidUtf8()) {             sql_ = s;           }           return s;         } else {           return (String) ref;         }       }       /**        * optional string sql = 11;        *        *         ** ddl/query的sql语句  *        *         */       public com.google.protobuf.ByteString           getSqlBytes() {         Object ref = sql_;         if (ref instanceof String) {           com.google.protobuf.ByteString b =               com.google.protobuf.ByteString.copyFromUtf8(                   (String) ref);           sql_ = b;           return b;         } else {           return (com.google.protobuf.ByteString) ref;         }       }       /**        * optional string sql = 11;        *        *         ** ddl/query的sql语句  *        *         */       public Builder setSql(           String value) {         if (value == null) {     throw new NullPointerException();   }   bitField0_ |= 0x00000008;         sql_ = value;         onChanged();         return this;       }       /**        * optional string sql = 11;        *        *         ** ddl/query的sql语句  *        *         */       public Builder clearSql() {         bitField0_ = (bitField0_ & ~0x00000008);         sql_ = getDefaultInstance().getSql();         onChanged();         return this;       }       /**        * optional string sql = 11;        *        *         ** ddl/query的sql语句  *        *         */       public Builder setSqlBytes(           com.google.protobuf.ByteString value) {         if (value == null) {     throw new NullPointerException();   }   bitField0_ |= 0x00000008;         sql_ = value;         onChanged();         return this;       }        private java.util.List rowDatas_ =         java.util.Collections.emptyList();       private void ensureRowDatasIsMutable() {         if (!((bitField0_ & 0x00000010) == 0x00000010)) {           rowDatas_ = new java.util.ArrayList(rowDatas_);           bitField0_ |= 0x00000010;          }       }        private com.google.protobuf.RepeatedFieldBuilder<           RowData, RowData.Builder, RowDataOrBuilder> rowDatasBuilder_;        /**        * repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;        *        *         ** 一次数据库变更可能存在多行  *        *         */       public java.util.List getRowDatasList() {         if (rowDatasBuilder_ == null) {           return java.util.Collections.unmodifiableList(rowDatas_);         } else {           return rowDatasBuilder_.getMessageList();         }       }       /**        * repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;        *        *         ** 一次数据库变更可能存在多行  *        *         */       public int getRowDatasCount() {         if (rowDatasBuilder_ == null) {           return rowDatas_.size();         } else {           return rowDatasBuilder_.getCount();         }       }       /**        * repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;        *        *         ** 一次数据库变更可能存在多行  *        *         */       public RowData getRowDatas(int index) {         if (rowDatasBuilder_ == null) {           return rowDatas_.get(index);         } else {           return rowDatasBuilder_.getMessage(index);         }       }       /**        * repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;        *        *         ** 一次数据库变更可能存在多行  *        *         */       public Builder setRowDatas(           int index, RowData value) {         if (rowDatasBuilder_ == null) {           if (value == null) {             throw new NullPointerException();           }           ensureRowDatasIsMutable();           rowDatas_.set(index, value);           onChanged();         } else {           rowDatasBuilder_.setMessage(index, value);         }         return this;       }       /**        * repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;        *        *         ** 一次数据库变更可能存在多行  *        *         */       public Builder setRowDatas(           int index, RowData.Builder builderForValue) {         if (rowDatasBuilder_ == null) {           ensureRowDatasIsMutable();           rowDatas_.set(index, builderForValue.build());           onChanged();         } else {           rowDatasBuilder_.setMessage(index, builderForValue.build());         }         return this;       }       /**        * repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;        *        *         ** 一次数据库变更可能存在多行  *        *         */       public Builder addRowDatas(RowData value) {         if (rowDatasBuilder_ == null) {           if (value == null) {             throw new NullPointerException();           }           ensureRowDatasIsMutable();           rowDatas_.add(value);           onChanged();         } else {           rowDatasBuilder_.addMessage(value);         }         return this;       }       /**        * repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;        *        *         ** 一次数据库变更可能存在多行  *        *         */       public Builder addRowDatas(           int index, RowData value) {         if (rowDatasBuilder_ == null) {           if (value == null) {             throw new NullPointerException();           }           ensureRowDatasIsMutable();           rowDatas_.add(index, value);           onChanged();         } else {           rowDatasBuilder_.addMessage(index, value);         }         return this;       }       /**        * repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;        *        *         ** 一次数据库变更可能存在多行  *        *         */       public Builder addRowDatas(           RowData.Builder builderForValue) {         if (rowDatasBuilder_ == null) {           ensureRowDatasIsMutable();           rowDatas_.add(builderForValue.build());           onChanged();         } else {           rowDatasBuilder_.addMessage(builderForValue.build());         }         return this;       }       /**        * repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;        *        *         ** 一次数据库变更可能存在多行  *        *         */       public Builder addRowDatas(           int index, RowData.Builder builderForValue) {         if (rowDatasBuilder_ == null) {           ensureRowDatasIsMutable();           rowDatas_.add(index, builderForValue.build());           onChanged();         } else {           rowDatasBuilder_.addMessage(index, builderForValue.build());         }         return this;       }       /**        * repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;        *        *         ** 一次数据库变更可能存在多行  *        *         */       public Builder addAllRowDatas(           Iterable values) {         if (rowDatasBuilder_ == null) {           ensureRowDatasIsMutable();           com.google.protobuf.AbstractMessageLite.Builder.addAll(               values, rowDatas_);           onChanged();         } else {           rowDatasBuilder_.addAllMessages(values);         }         return this;       }       /**        * repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;        *        *         ** 一次数据库变更可能存在多行  *        *         */       public Builder clearRowDatas() {         if (rowDatasBuilder_ == null) {           rowDatas_ = java.util.Collections.emptyList();           bitField0_ = (bitField0_ & ~0x00000010);           onChanged();         } else {           rowDatasBuilder_.clear();         }         return this;       }       /**        * repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;        *        *         ** 一次数据库变更可能存在多行  *        *         */       public Builder removeRowDatas(int index) {         if (rowDatasBuilder_ == null) {           ensureRowDatasIsMutable();           rowDatas_.remove(index);           onChanged();         } else {           rowDatasBuilder_.remove(index);         }         return this;       }       /**        * repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;        *        *         ** 一次数据库变更可能存在多行  *        *         */       public RowData.Builder getRowDatasBuilder(           int index) {         return getRowDatasFieldBuilder().getBuilder(index);       }       /**        * repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;        *        *         ** 一次数据库变更可能存在多行  *        *         */       public RowDataOrBuilder getRowDatasOrBuilder(           int index) {         if (rowDatasBuilder_ == null) {           return rowDatas_.get(index);  } else {           return rowDatasBuilder_.getMessageOrBuilder(index);         }       }       /**        * repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;        *        *         ** 一次数据库变更可能存在多行  *        *         */       public java.util.List            getRowDatasOrBuilderList() {         if (rowDatasBuilder_ != null) {           return rowDatasBuilder_.getMessageOrBuilderList();         } else {           return java.util.Collections.unmodifiableList(rowDatas_);         }       }       /**        * repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;        *        *         ** 一次数据库变更可能存在多行  *        *         */       public RowData.Builder addRowDatasBuilder() {         return getRowDatasFieldBuilder().addBuilder(             RowData.getDefaultInstance());       }       /**        * repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;        *        *         ** 一次数据库变更可能存在多行  *        *         */       public RowData.Builder addRowDatasBuilder(           int index) {         return getRowDatasFieldBuilder().addBuilder(             index, RowData.getDefaultInstance());       }       /**        * repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;        *        *         ** 一次数据库变更可能存在多行  *        *         */       public java.util.List            getRowDatasBuilderList() {         return getRowDatasFieldBuilder().getBuilderList();       }       private com.google.protobuf.RepeatedFieldBuilder<           RowData, RowData.Builder, RowDataOrBuilder>           getRowDatasFieldBuilder() {         if (rowDatasBuilder_ == null) {           rowDatasBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<               RowData, RowData.Builder, RowDataOrBuilder>(                   rowDatas_,                   ((bitField0_ & 0x00000010) == 0x00000010),                   getParentForChildren(),                   isClean());           rowDatas_ = null;         }         return rowDatasBuilder_;       }        private java.util.List props_ =         java.util.Collections.emptyList();       private void ensurePropsIsMutable() {         if (!((bitField0_ & 0x00000020) == 0x00000020)) {           props_ = new java.util.ArrayList(props_);           bitField0_ |= 0x00000020;          }       }        private com.google.protobuf.RepeatedFieldBuilder<           Pair, Pair.Builder, PairOrBuilder> propsBuilder_;        /**        * repeated .com.alibaba.otter.canal.protocol.Pair props = 13;        *        *         **预留扩展*        *         */       public java.util.List getPropsList() {         if (propsBuilder_ == null) {           return java.util.Collections.unmodifiableList(props_);         } else {           return propsBuilder_.getMessageList();         }       }       /**        * repeated .com.alibaba.otter.canal.protocol.Pair props = 13;        *        *         **预留扩展*        *         */       public int getPropsCount() {         if (propsBuilder_ == null) {           return props_.size();         } else {           return propsBuilder_.getCount();         }       }       /**        * repeated .com.alibaba.otter.canal.protocol.Pair props = 13;        *        *         **预留扩展*        *         */       public Pair getProps(int index) {         if (propsBuilder_ == null) {           return props_.get(index);         } else {           return propsBuilder_.getMessage(index);         }       }       /**        * repeated .com.alibaba.otter.canal.protocol.Pair props = 13;        *        *         **预留扩展*        *         */       public Builder setProps(           int index, Pair value) {         if (propsBuilder_ == null) {           if (value == null) {             throw new NullPointerException();           }           ensurePropsIsMutable();           props_.set(index, value);           onChanged();         } else {           propsBuilder_.setMessage(index, value);         }         return this;       }       /**        * repeated .com.alibaba.otter.canal.protocol.Pair props = 13;        *        *         **预留扩展*        *         */       public Builder setProps(           int index, Pair.Builder builderForValue) {         if (propsBuilder_ == null) {           ensurePropsIsMutable();           props_.set(index, builderForValue.build());           onChanged();         } else {           propsBuilder_.setMessage(index, builderForValue.build());         }         return this;       }       /**        * repeated .com.alibaba.otter.canal.protocol.Pair props = 13;        *        *         **预留扩展*        *         */       public Builder addProps(Pair value) {         if (propsBuilder_ == null) {           if (value == null) {             throw new NullPointerException();           }           ensurePropsIsMutable();           props_.add(value);           onChanged();         } else {           propsBuilder_.addMessage(value);         }         return this;       }       /**        * repeated .com.alibaba.otter.canal.protocol.Pair props = 13;        *        *         **预留扩展*        *         */       public Builder addProps(           int index, Pair value) {         if (propsBuilder_ == null) {           if (value == null) {             throw new NullPointerException();           }           ensurePropsIsMutable();           props_.add(index, value);           onChanged();         } else {           propsBuilder_.addMessage(index, value);         }         return this;       }       /**        * repeated .com.alibaba.otter.canal.protocol.Pair props = 13;        *        *         **预留扩展*        *         */       public Builder addProps(           Pair.Builder builderForValue) {         if (propsBuilder_ == null) {           ensurePropsIsMutable();           props_.add(builderForValue.build());           onChanged();         } else {           propsBuilder_.addMessage(builderForValue.build());         }         return this;       }       /**        * repeated .com.alibaba.otter.canal.protocol.Pair props = 13;        *        *         **预留扩展*        *         */       public Builder addProps(           int index, Pair.Builder builderForValue) {         if (propsBuilder_ == null) {           ensurePropsIsMutable();           props_.add(index, builderForValue.build());           onChanged();         } else {           propsBuilder_.addMessage(index, builderForValue.build());         }         return this;       }       /**        * repeated .com.alibaba.otter.canal.protocol.Pair props = 13;        *        *         **预留扩展*        *         */       public Builder addAllProps(           Iterable values) {         if (propsBuilder_ == null) {           ensurePropsIsMutable();           com.google.protobuf.AbstractMessageLite.Builder.addAll(               values, props_);           onChanged();         } else {           propsBuilder_.addAllMessages(values);         }         return this;       }       /**        * repeated .com.alibaba.otter.canal.protocol.Pair props = 13;        *        *         **预留扩展*        *         */       public Builder clearProps() {         if (propsBuilder_ == null) {           props_ = java.util.Collections.emptyList();           bitField0_ = (bitField0_ & ~0x00000020);           onChanged();         } else {           propsBuilder_.clear();         }         return this;       }       /**        * repeated .com.alibaba.otter.canal.protocol.Pair props = 13;        *        *         **预留扩展*        *         */       public Builder removeProps(int index) {         if (propsBuilder_ == null) {           ensurePropsIsMutable();           props_.remove(index);           onChanged();         } else {           propsBuilder_.remove(index);         }         return this;       }       /**        * repeated .com.alibaba.otter.canal.protocol.Pair props = 13;        *        *         **预留扩展*        *         */       public Pair.Builder getPropsBuilder(           int index) {         return getPropsFieldBuilder().getBuilder(index);       }       /**        * repeated .com.alibaba.otter.canal.protocol.Pair props = 13;        *        *         **预留扩展*        *         */       public PairOrBuilder getPropsOrBuilder(           int index) {         if (propsBuilder_ == null) {           return props_.get(index);  } else {           return propsBuilder_.getMessageOrBuilder(index);         }       }       /**        * repeated .com.alibaba.otter.canal.protocol.Pair props = 13;        *        *         **预留扩展*        *         */       public java.util.List            getPropsOrBuilderList() {         if (propsBuilder_ != null) {           return propsBuilder_.getMessageOrBuilderList();         } else {           return java.util.Collections.unmodifiableList(props_);         }       }       /**        * repeated .com.alibaba.otter.canal.protocol.Pair props = 13;        *        *         **预留扩展*        *         */       public Pair.Builder addPropsBuilder() {         return getPropsFieldBuilder().addBuilder(             Pair.getDefaultInstance());       }       /**        * repeated .com.alibaba.otter.canal.protocol.Pair props = 13;        *        *         **预留扩展*        *         */       public Pair.Builder addPropsBuilder(           int index) {         return getPropsFieldBuilder().addBuilder(             index, Pair.getDefaultInstance());       }       /**        * repeated .com.alibaba.otter.canal.protocol.Pair props = 13;        *        *         **预留扩展*        *         */       public java.util.List            getPropsBuilderList() {         return getPropsFieldBuilder().getBuilderList();       }       private com.google.protobuf.RepeatedFieldBuilder<           Pair, Pair.Builder, PairOrBuilder>           getPropsFieldBuilder() {         if (propsBuilder_ == null) {           propsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<               Pair, Pair.Builder, PairOrBuilder>(                   props_,                   ((bitField0_ & 0x00000020) == 0x00000020),                   getParentForChildren(),                   isClean());           props_ = null;         }         return propsBuilder_;       }        private Object ddlSchemaName_ = "";       /**        * optional string ddlSchemaName = 14;        *        *         ** ddl/query的schemaName，会存在跨库ddl，需要保留执行ddl的当前schemaName  *        *         */       public boolean hasDdlSchemaName() {         return ((bitField0_ & 0x00000040) == 0x00000040);       }       /**        * optional string ddlSchemaName = 14;        *        *         ** ddl/query的schemaName，会存在跨库ddl，需要保留执行ddl的当前schemaName  *        *         */       public String getDdlSchemaName() {         Object ref = ddlSchemaName_;         if (!(ref instanceof String)) {           com.google.protobuf.ByteString bs =               (com.google.protobuf.ByteString) ref;           String s = bs.toStringUtf8();           if (bs.isValidUtf8()) {             ddlSchemaName_ = s;           }           return s;         } else {           return (String) ref;         }       }       /**        * optional string ddlSchemaName = 14;        *        *         ** ddl/query的schemaName，会存在跨库ddl，需要保留执行ddl的当前schemaName  *        *         */       public com.google.protobuf.ByteString           getDdlSchemaNameBytes() {         Object ref = ddlSchemaName_;         if (ref instanceof String) {           com.google.protobuf.ByteString b =               com.google.protobuf.ByteString.copyFromUtf8(                   (String) ref);           ddlSchemaName_ = b;           return b;         } else {           return (com.google.protobuf.ByteString) ref;         }       }       /**        * optional string ddlSchemaName = 14;        *        *         ** ddl/query的schemaName，会存在跨库ddl，需要保留执行ddl的当前schemaName  *        *         */       public Builder setDdlSchemaName(           String value) {         if (value == null) {     throw new NullPointerException();   }   bitField0_ |= 0x00000040;         ddlSchemaName_ = value;         onChanged();         return this;       }       /**        * optional string ddlSchemaName = 14;        *        *         ** ddl/query的schemaName，会存在跨库ddl，需要保留执行ddl的当前schemaName  *        *         */       public Builder clearDdlSchemaName() {         bitField0_ = (bitField0_ & ~0x00000040);         ddlSchemaName_ = getDefaultInstance().getDdlSchemaName();         onChanged();         return this;       }       /**        * optional string ddlSchemaName = 14;        *        *         ** ddl/query的schemaName，会存在跨库ddl，需要保留执行ddl的当前schemaName  *        *         */       public Builder setDdlSchemaNameBytes(           com.google.protobuf.ByteString value) {         if (value == null) {     throw new NullPointerException();   }   bitField0_ |= 0x00000040;         ddlSchemaName_ = value;         onChanged();         return this;       }        // @@protoc_insertion_point(builder_scope:com.alibaba.otter.canal.protocol.RowChange)     };data class;blob, long method;t;t;f;blob,  long method;data class;0;11475;https://github.com/alibaba/canal/blob/08167c95c767fd3c9879584c0230820a8476a7a7/protocol/src/main/java/com/alibaba/otter/canal/protocol/CanalEntry.java/#L8477-L9689;2;1617;11475
1629;   {     "message": "YES I found bad smells",     "bad smells are": ["Blob", "Long Method"]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@JacksonXmlRootElement @JsonIgnoreProperties(ignoreUnknown = true) public class User implements Serializable {      private static final long serialVersionUID = 4247427179764560935L;      private Integer id;     private String username;     private String name;     @JsonProperty("first_name")     private String firstName;     @JsonProperty("last_name")     private String lastName;     private String email;     private String url;     private String description;     private String link;     private String locale;     private String nickname;     private String slug;     @JsonProperty("registered_date")     private String registeredDate;     private List roles;     private Map capabilities;     @JsonProperty("extra_capabilities")     private Map extraCapabilities;     @JsonProperty("avatar_urls")     private Map avatarUrls;     @JsonProperty("meta")     private List> meta;      public User() {      }      public Integer getId() {         return id;     }      public void setId(Integer id) {         this.id = id;     }      public String getUsername() {         return username;     }      public void setUsername(String username) {         this.username = username;     }      public String getName() {         return name;     }      public void setName(String name) {         this.name = name;     }      public String getFirstName() {         return firstName;     }      public void setFirstName(String firstName) {         this.firstName = firstName;     }      public String getLastName() {         return lastName;     }      public void setLastName(String lastName) {         this.lastName = lastName;     }      public String getEmail() {         return email;     }      public void setEmail(String email) {         this.email = email;     }      public String getUrl() {         return url;     }      public void setUrl(String url) {         this.url = url;     }      public String getDescription() {         return description;     }      public void setDescription(String description) {         this.description = description;     }      public String getLink() {         return link;     }      public void setLink(String link) {         this.link = link;     }      public String getLocale() {         return locale;     }      public void setLocale(String locale) {         this.locale = locale;     }      public String getNickname() {         return nickname;     }      public void setNickname(String nickname) {         this.nickname = nickname;     }      public String getSlug() {         return slug;     }      public void setSlug(String slug) {         this.slug = slug;     }      public String getRegisteredDate() {         return registeredDate;     }      public void setRegisteredDate(String registeredDate) {         this.registeredDate = registeredDate;     }      public List getRoles() {         return roles;     }      public void setRoles(List roles) {         this.roles = roles;     }      public Map getCapabilities() {         return capabilities;     }      public void setCapabilities(Map capabilities) {         this.capabilities = capabilities;     }      public Map getExtraCapabilities() {         return extraCapabilities;     }      public void setExtraCapabilities(Map extraCapabilities) {         this.extraCapabilities = extraCapabilities;     }      public Map getAvatarUrls() {         return avatarUrls;     }      public void setAvatarUrls(Map avatarUrls) {         this.avatarUrls = avatarUrls;     }      public List> getMeta() {         return meta;     }      public void setMeta(List> meta) {         this.meta = meta;     }      @Override     public String toString() {         return toStringHelper(this).addValue(this.id).addValue(this.username).addValue(this.email).addValue(this.name).toString();     }  };data class;Blob, Long Method;t;f;f;Blob,  Long Method;data class;0;11503;https://github.com/apache/camel/blob/8a85a70643c4d6eec2d3abddeea44ecb06c2f486/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/model/User.java/#L29-L213;2;1629;11503
1637;   {     "message": "YES I found bad smells",     "bad smells are": [       "Long Method",       "Blob"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    private ClearCacheResponse(         com.google.protobuf.CodedInputStream input,         com.google.protobuf.ExtensionRegistryLite extensionRegistry)         throws com.google.protobuf.InvalidProtocolBufferException {       initFields();       int mutable_bitField0_ = 0;       com.google.protobuf.UnknownFieldSet.Builder unknownFields =           com.google.protobuf.UnknownFieldSet.newBuilder();       try {         boolean done = false;         while (!done) {           int tag = input.readTag();           switch (tag) {             case 0:               done = true;               break;             default: {               if (!parseUnknownField(input, unknownFields,                                      extensionRegistry, tag)) {                 done = true;               }               break;             }             case 8: {               bitField0_ |= 0x00000001;               unfreedBytes_ = input.readInt64();               break;             }           }         }       } catch (com.google.protobuf.InvalidProtocolBufferException e) {         throw e.setUnfinishedMessage(this);       } catch (java.io.IOException e) {         throw new com.google.protobuf.InvalidProtocolBufferException(             e.getMessage()).setUnfinishedMessage(this);       } finally {         this.unknownFields = unknownFields.build();         makeExtensionsImmutable();       }     };long method;Long Method, Blob;t;f;t; Blob;;0;11527;https://github.com/apache/phoenix/blob/69e5bb0b304a53967cef40b2a4cfc66e69ecaa51/phoenix-core/src/main/java/org/apache/phoenix/coprocessor/generated/MetaDataProtos.java/#L13962-L14001;2;1637;11527
1685; {"message": "YES I found bad smells", "bad smells are": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class MultiDexConfig {      private String name;      public MultiDexConfig(String name) {         this.name = name;     }      @Config(title = "Whether to enable fast", message = "Enable atlas , true/false", order = 0, group = "atlas")     private boolean fastMultiDex = false;      @Config(title = "The extra first dex class list", message = "The custom needs to be placed in the entry class in the first dex", order = 3, group = "atlas")     private Set firstDexClasses = Sets.newHashSet();     /**      * dex The number of subcontracting, 0 No restrictions, no two merges      */     @Config(title = "dexThe number of", message = "0unlimited", order = 1, group = "atlas")     private int dexCount;      public int getMainDexListCount() {         return mainDexListCount;     }      public void setMainDexListCount(int mainDexListCount) {         this.mainDexListCount = mainDexListCount;     }      private int mainDexListCount;      @Config(title = "dexSeparated rules", message = "a,b;c,d", order = 2, group = "atlas")     private String dexSplitRules;      @Config(title = "Does not enter the list of the first dex's blacklist", message = "a", order = 2, group = "atlas")     private Set mainDexBlackList = Sets.newHashSet();      public String getName() {         return name;     }      public void setName(String name) {         this.name = name;     }      public boolean isFastMultiDex() {         return fastMultiDex;     }      public void setFastMultiDex(boolean fastMultiDex) {         this.fastMultiDex = fastMultiDex;     }      public Set getMainDexBlackList() {         return mainDexBlackList;     }      public void setMainDexBlackList(Set mainDexBlackList) {         this.mainDexBlackList = mainDexBlackList;     }      public Set getFirstDexClasses() {         return firstDexClasses;     }      public void setFirstDexClasses(Set firstDexClasses) {         this.firstDexClasses = firstDexClasses;     }      public int getDexCount() {         return dexCount;     }      public void setDexCount(int dexCount) {         this.dexCount = dexCount;     }      public String getDexSplitRules() {         return dexSplitRules;     }      public void setDexSplitRules(String dexSplitRules) {         this.dexSplitRules = dexSplitRules;     } };data class;Blob, Data Class;t;f;t;Blob;;0;11686;https://github.com/alibaba/atlas/blob/e8c7b3f1ff14b2a1df64321c6992b796cae7d732/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/extension/MultiDexConfig.java/#L220-L302;2;1685;11686
1724; {   "output": "YES I found bad smells",   "bad smells are": [     "Long Method",     "Blob",     "Data Class"   ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public abstract class BinaryExpression implements Expression {     protected Expression left;     protected Expression right;      public BinaryExpression(Expression left, Expression right) {         this.left = left;         this.right = right;     }      public Expression getLeft() {         return left;     }      public Expression getRight() {         return right;     }       /**      * @see java.lang.Object#toString()      */     public String toString() {         return "(" + left.toString() + " " + getExpressionSymbol() + " " + right.toString() + ")";     }      /**      * TODO: more efficient hashCode()      *      * @see java.lang.Object#hashCode()      */     public int hashCode() {         return toString().hashCode();     }      /**      * TODO: more efficient hashCode()      *      * @see java.lang.Object#equals(java.lang.Object)      */     public boolean equals(Object o) {          if (o == null || !this.getClass().equals(o.getClass())) {             return false;         }         return toString().equals(o.toString());      }      /**      * Returns the symbol that represents this binary expression.  For example, addition is      * represented by "+"      *      * @return      */     public abstract String getExpressionSymbol();      /**      * @param expression      */     public void setRight(Expression expression) {         right = expression;     }      /**      * @param expression      */     public void setLeft(Expression expression) {         left = expression;     }      };data class;Long Method, Blob, Data Class;t;f;t;Long Method,  Blob;;0;11803;https://github.com/apache/activemq/blob/ccf56875b0660214e0a61bd2f8adc418143551fc/activemq-client/src/main/java/org/apache/activemq/filter/BinaryExpression.java/#L26-L96;2;1724;11803
1742; {     "message": "YES I found bad smells",     "bad smells are": [         "Blob",         "Long Method"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public interface ReplicatedLevelDBStoreViewMBean {      @MBeanInfo("The address of the ZooKeeper server.")     String getZkAddress();     @MBeanInfo("The path in ZooKeeper to hold master elections.")     String getZkPath();     @MBeanInfo("The ZooKeeper session timeout.")     String getZkSessionTimeout();     @MBeanInfo("The address and port the master will bind for the replication protocol.")     String getBind();     @MBeanInfo("The number of replication nodes that will be part of the replication cluster.")     int getReplicas();      @MBeanInfo("The role of this node in the replication cluster.")     String getNodeRole();      @MBeanInfo("The replication status.")     String getStatus();      @MBeanInfo("The status of the connected slaves.")     CompositeData[] getSlaves();      @MBeanInfo("The current position of the replication log.")     Long getPosition();      @MBeanInfo("When the last entry was added to the replication log.")     Long getPositionDate();      @MBeanInfo("The directory holding the data.")     String getDirectory();      @MBeanInfo("The sync strategy to use.")     String getSync();      @MBeanInfo("The node id of this replication node.")     String getNodeId(); };data class;Blob, Long Method;t;f;f;Blob,  Long Method;data class;0;11845;https://github.com/apache/activemq/blob/ccf56875b0660214e0a61bd2f8adc418143551fc/activemq-leveldb-store/src/main/java/org/apache/activemq/leveldb/replicated/ReplicatedLevelDBStoreViewMBean.java/#L30-L66;2;1742;11845
1749;{     "message": "YES I found bad smells",     "bad smells are": [         "Blob",         "Long Method"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public interface UpgradeRequest {     /**      * Add WebSocket Extension Configuration(s) to Upgrade Request.      *       * This is merely the list of requested Extensions to use, see {@link UpgradeResponse#getExtensions()} for what was      * negotiated      *      * @param configs the configuration(s) to add      */     void addExtensions(ExtensionConfig... configs);      /**      * Add WebSocket Extension Configuration(s) to request      *       * This is merely the list of requested Extensions to use, see {@link UpgradeResponse#getExtensions()} for what was      * negotiated      *      * @param configs the configuration(s) to add      */     void addExtensions(String... configs);      /**      * Remove all headers from request.      * @deprecated (no longer supported, as this can undo the required upgrade request headers)      */     @Deprecated     void clearHeaders();      /**      * Get the list of Cookies on the Upgrade request      *      * @return the list of Cookies      */     List getCookies();      /**      * Get the list of WebSocket Extension Configurations for this Upgrade Request.      *       * This is merely the list of requested Extensions to use, see {@link UpgradeResponse#getExtensions()} for what was      * negotiated      *      * @return the list of Extension configurations (in the order they were specified)      */     List getExtensions();      /**      * Get a specific Header value from Upgrade Request      *      * @param name the name of the header      * @return the value of the header (null if header does not exist)      */     String getHeader(String name);      /**      * Get the specific Header value, as an int, from the Upgrade Request.      *      * @param name the name of the header      * @return the value of the header as an int (-1 if header does not exist)      * @throws NumberFormatException if unable to parse value as an int.      */     int getHeaderInt(String name);      /**      * Get the headers as a Map of keys to value lists.      *      * @return the headers      */     Map> getHeaders();      /**      * Get the specific header values (for multi-value headers)      *      * @param name the header name      * @return the value list (null if no header exists)      */     List getHeaders(String name);      /**      * The host of the Upgrade Request URI      *      * @return host of the request URI      */     String getHost();      /**      * The HTTP version used for this Upgrade Request      *       * As of RFC6455 (December 2011) this is always      * HTTP/1.1      *      * @return the HTTP Version used      */     String getHttpVersion();      /**      * The HTTP method for this Upgrade Request.      *       * As of RFC6455 (December 2011) this is always GET      *      * @return the HTTP method used      */     String getMethod();      /**      * The WebSocket Origin of this Upgrade Request      *       * See RFC6455: Section 10.2 for details.      *       * Equivalent to {@link #getHeader(String)} passed the "Origin" header.      *      * @return the Origin header      */     String getOrigin();      /**      * Returns a map of the query parameters of the request.      *      * @return a unmodifiable map of query parameters of the request.      */     Map> getParameterMap();      /**      * Get the WebSocket Protocol Version      *       * As of RFC6455, Jetty only supports version      * 13      *      * @return the WebSocket protocol version      */     String getProtocolVersion();      /**      * Get the Query String of the request URI.      *      * @return the request uri query string      */     String getQueryString();      /**      * Get the Request URI      *      * @return the request URI      */     URI getRequestURI();      /**      * Access the Servlet HTTP Session (if present)      *       * Note: Never present on a Client UpgradeRequest.      *      * @return the Servlet HTTPSession on server side UpgradeRequests      */     Object getSession();      /**      * Get the list of offered WebSocket sub-protocols.      *      * @return the list of offered sub-protocols      */     List getSubProtocols();      /**      * Get the User Principal for this request.      *       * Only applicable when using UpgradeRequest from server side.      *      * @return the user principal      */     Principal getUserPrincipal();      /**      * Test if a specific sub-protocol is offered      *      * @param test the sub-protocol to test for      * @return true if sub-protocol exists on request      */     boolean hasSubProtocol(String test);      /**      * Test if supplied Origin is the same as the Request      *      * @param test the supplied origin      * @return true if the supplied origin matches the request origin      */     boolean isOrigin(String test);      /**      * Test if connection is secure.      *      * @return true if connection is secure.      */     boolean isSecure();      /**      * Set the list of Cookies on the request      *      * @param cookies the cookies to use      */     void setCookies(List cookies);      /**      * Set the list of WebSocket Extension configurations on the request.      * @param configs the list of extension configurations      */     void setExtensions(List configs);      /**      * Set a specific header with multi-value field      *       * Overrides any previous value for this named header      *      * @param name the name of the header      * @param values the multi-value field      */     void setHeader(String name, List values);      /**      * Set a specific header value      *       * Overrides any previous value for this named header      *      * @param name the header to set      * @param value the value to set it to      */     void setHeader(String name, String value);      /**      * Sets multiple headers on the request.      *       * Only sets those headers provided, does not remove      * headers that exist on request and are not provided in the      * parameter for this method.      *       * Convenience method vs calling {@link #setHeader(String, List)} multiple times.      *      * @param headers the headers to set      */     void setHeaders(Map> headers);      /**      * Set the HTTP Version to use.      *       * As of RFC6455 (December 2011) this should always be      * HTTP/1.1      *      * @param httpVersion the HTTP version to use.      */     void setHttpVersion(String httpVersion);      /**      * Set the HTTP method to use.      *       * As of RFC6455 (December 2011) this is always GET      *      * @param method the HTTP method to use.      */     void setMethod(String method);      /**      * Set the Request URI to use for this request.      *       * Must be an absolute URI with scheme 'ws' or 'wss'      *      * @param uri the Request URI      */     void setRequestURI(URI uri);      /**      * Set the Session associated with this request.      *       * Typically used to associate the Servlet HttpSession object.      *      * @param session the session object to associate with this request      */     void setSession(Object session);      /**      * Set the offered WebSocket Sub-Protocol list.      *      * @param protocols the offered sub-protocol list      */     void setSubProtocols(List protocols);      /**      * Set the offered WebSocket Sub-Protocol list.      *      * @param protocols the offered sub-protocol list      */     void setSubProtocols(String... protocols);  };data class;Blob, Long Method;t;f;f;Blob,  Long Method;data class;0;11857;https://github.com/eclipse/jetty.project/blob/65528f76c5ef6ddca11385f9721c8f0bc5f2eed7/jetty-websocket/websocket-api/src/main/java/org/eclipse/jetty/websocket/api/UpgradeRequest.java/#L32-L323;2;1749;11857
1779; {   "message": "YES I found bad smells",   "bad smells are": [     "Blob"   ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class DataSourceLoginService extends AbstractLoginService {     private static final Logger LOG = Log.getLogger(DataSourceLoginService.class);      private String _jndiName = "javax.sql.DataSource/default";     private DataSource _datasource;     private Server _server;     private String _userTableName = "users";     private String _userTableKey = "id";     private String _userTableUserField = "username";     private String _userTablePasswordField = "pwd";     private String _roleTableName = "roles";     private String _roleTableKey = "id";     private String _roleTableRoleField = "role";     private String _userRoleTableName = "user_roles";     private String _userRoleTableUserKey = "user_id";     private String _userRoleTableRoleKey = "role_id";     private String _userSql;     private String _roleSql;     private boolean _createTables = false;               /**      * DBUser      */     public class DBUserPrincipal extends UserPrincipal     {         private int _key;                  public DBUserPrincipal(String name, Credential credential, int key)         {             super(name, credential);             _key = key;         }                  public int getKey ()         {             return _key;         }              }      /* ------------------------------------------------------------ */     public DataSourceLoginService()     {     }      /* ------------------------------------------------------------ */     public DataSourceLoginService(String name)     {         setName(name);     }      /* ------------------------------------------------------------ */     public DataSourceLoginService(String name, IdentityService identityService)     {         setName(name);         setIdentityService(identityService);     }      /* ------------------------------------------------------------ */     public void setJndiName (String jndi)     {         _jndiName = jndi;     }      /* ------------------------------------------------------------ */     public String getJndiName ()     {         return _jndiName;     }      /* ------------------------------------------------------------ */     public void setServer (Server server)     {         _server=server;     }      /* ------------------------------------------------------------ */     public Server getServer()     {         return _server;     }      /* ------------------------------------------------------------ */     public void setCreateTables(boolean createTables)     {         _createTables = createTables;     }      /* ------------------------------------------------------------ */     public boolean getCreateTables()     {         return _createTables;     }      /* ------------------------------------------------------------ */     public void setUserTableName (String name)     {         _userTableName=name;     }      /* ------------------------------------------------------------ */     public String getUserTableName()     {         return _userTableName;     }      /* ------------------------------------------------------------ */     public String getUserTableKey()     {         return _userTableKey;     }       /* ------------------------------------------------------------ */     public void setUserTableKey(String tableKey)     {         _userTableKey = tableKey;     }       /* ------------------------------------------------------------ */     public String getUserTableUserField()     {         return _userTableUserField;     }       /* ------------------------------------------------------------ */     public void setUserTableUserField(String tableUserField)     {         _userTableUserField = tableUserField;     }       /* ------------------------------------------------------------ */     public String getUserTablePasswordField()     {         return _userTablePasswordField;     }       /* ------------------------------------------------------------ */     public void setUserTablePasswordField(String tablePasswordField)     {         _userTablePasswordField = tablePasswordField;     }       /* ------------------------------------------------------------ */     public String getRoleTableName()     {         return _roleTableName;     }       /* ------------------------------------------------------------ */     public void setRoleTableName(String tableName)     {         _roleTableName = tableName;     }       /* ------------------------------------------------------------ */     public String getRoleTableKey()     {         return _roleTableKey;     }       /* ------------------------------------------------------------ */     public void setRoleTableKey(String tableKey)     {         _roleTableKey = tableKey;     }       /* ------------------------------------------------------------ */     public String getRoleTableRoleField()     {         return _roleTableRoleField;     }       /* ------------------------------------------------------------ */     public void setRoleTableRoleField(String tableRoleField)     {         _roleTableRoleField = tableRoleField;     }       /* ------------------------------------------------------------ */     public String getUserRoleTableName()     {         return _userRoleTableName;     }       /* ------------------------------------------------------------ */     public void setUserRoleTableName(String roleTableName)     {         _userRoleTableName = roleTableName;     }       /* ------------------------------------------------------------ */     public String getUserRoleTableUserKey()     {         return _userRoleTableUserKey;     }       /* ------------------------------------------------------------ */     public void setUserRoleTableUserKey(String roleTableUserKey)     {         _userRoleTableUserKey = roleTableUserKey;     }       /* ------------------------------------------------------------ */     public String getUserRoleTableRoleKey()     {         return _userRoleTableRoleKey;     }       /* ------------------------------------------------------------ */     public void setUserRoleTableRoleKey(String roleTableRoleKey)     {         _userRoleTableRoleKey = roleTableRoleKey;     }              /* ------------------------------------------------------------ */     @Override     public UserPrincipal loadUserInfo (String username)     {         try         {             try (Connection connection = getConnection();                     PreparedStatement statement1 = connection.prepareStatement(_userSql))             {                 statement1.setObject(1, username);                 try (ResultSet rs1 = statement1.executeQuery())                 {                     if (rs1.next())                     {                         int key = rs1.getInt(_userTableKey);                         String credentials = rs1.getString(_userTablePasswordField);                                                  return new DBUserPrincipal(username, Credential.getCredential(credentials), key);                     }                 }             }         }         catch (NamingException e)         {             LOG.warn("No datasource for "+_jndiName, e);         }         catch (SQLException e)         {             LOG.warn("Problem loading user info for "+username, e);         }         return null;     }               /* ------------------------------------------------------------ */     @Override     public String[] loadRoleInfo (UserPrincipal user)     {         DBUserPrincipal dbuser = (DBUserPrincipal)user;          try         {             try (Connection connection = getConnection();                     PreparedStatement statement2 = connection.prepareStatement(_roleSql))             {                  List roles = new ArrayList();                  statement2.setInt(1, dbuser.getKey());                 try (ResultSet rs2 = statement2.executeQuery())                 {                     while (rs2.next())                     {                         roles.add(rs2.getString(_roleTableRoleField));                     }                                          return roles.toArray(new String[roles.size()]);                 }             }         }         catch (NamingException e)         {             LOG.warn("No datasource for "+_jndiName, e);         }         catch (SQLException e)         {             LOG.warn("Problem loading user info for "+user.getName(), e);         }         return null;     }             /* ------------------------------------------------------------ */     /**      * Lookup the datasource for the jndiName and formulate the      * necessary sql query strings based on the configured table      * and column names.      *      * @throws NamingException if unable to init jndi      * @throws SQLException if unable to init database      */     public void initDb() throws NamingException, SQLException     {         if (_datasource != null)             return;          @SuppressWarnings("unused")         InitialContext ic = new InitialContext();         assert ic!=null;          // TODO Should we try webapp scope too?          // try finding the datasource in the Server scope         if (_server != null)         {             try             {                 _datasource = (DataSource)NamingEntryUtil.lookup(_server, _jndiName);             }             catch (NameNotFoundException e)             {                 //next try the jvm scope             }         }           //try finding the datasource in the jvm scope         if (_datasource==null)         {             _datasource = (DataSource)NamingEntryUtil.lookup(null, _jndiName);         }          // set up the select statements based on the table and column names configured         _userSql = "select " + _userTableKey + "," + _userTablePasswordField                   + " from " + _userTableName                   + " where "+ _userTableUserField + " = ?";          _roleSql = "select r." + _roleTableRoleField                   + " from " + _roleTableName + " r, " + _userRoleTableName                   + " u where u."+ _userRoleTableUserKey + " = ?"                   + " and r." + _roleTableKey + " = u." + _userRoleTableRoleKey;          prepareTables();     }      /* ------------------------------------------------------------ */     /**      * @throws NamingException      * @throws SQLException      */     private void prepareTables()     throws NamingException, SQLException     {         if (_createTables)         {             boolean autocommit = true;             Connection connection = getConnection();             try (Statement stmt = connection.createStatement())             {                 autocommit = connection.getAutoCommit();                 connection.setAutoCommit(false);                 DatabaseMetaData metaData = connection.getMetaData();                  //check if tables exist                 String tableName = (metaData.storesLowerCaseIdentifiers()? _userTableName.toLowerCase(Locale.ENGLISH): (metaData.storesUpperCaseIdentifiers()?_userTableName.toUpperCase(Locale.ENGLISH): _userTableName));                 try (ResultSet result = metaData.getTables(null, null, tableName, null))                 {                     if (!result.next())                     {                         //user table default                         /*                          * create table _userTableName (_userTableKey integer,                          * _userTableUserField varchar(100) not null unique,                          * _userTablePasswordField varchar(20) not null, primary key(_userTableKey));                          */                         stmt.executeUpdate("create table "+_userTableName+ "("+_userTableKey+" integer,"+                                 _userTableUserField+" varchar(100) not null unique,"+                                 _userTablePasswordField+" varchar(20) not null, primary key("+_userTableKey+"))");                         if (LOG.isDebugEnabled()) LOG.debug("Created table "+_userTableName);                     }                 }                  tableName = (metaData.storesLowerCaseIdentifiers()? _roleTableName.toLowerCase(Locale.ENGLISH): (metaData.storesUpperCaseIdentifiers()?_roleTableName.toUpperCase(Locale.ENGLISH): _roleTableName));                 try (ResultSet result = metaData.getTables(null, null, tableName, null))                 {                     if (!result.next())                     {                         //role table default                         /*                          * create table _roleTableName (_roleTableKey integer,                          * _roleTableRoleField varchar(100) not null unique, primary key(_roleTableKey));                          */                         String str = "create table "+_roleTableName+" ("+_roleTableKey+" integer, "+                         _roleTableRoleField+" varchar(100) not null unique, primary key("+_roleTableKey+"))";                         stmt.executeUpdate(str);                         if (LOG.isDebugEnabled()) LOG.debug("Created table "+_roleTableName);                     }                 }                  tableName = (metaData.storesLowerCaseIdentifiers()? _userRoleTableName.toLowerCase(Locale.ENGLISH): (metaData.storesUpperCaseIdentifiers()?_userRoleTableName.toUpperCase(Locale.ENGLISH): _userRoleTableName));                 try (ResultSet result = metaData.getTables(null, null, tableName, null))                 {                     if (!result.next())                     {                         //user-role table                         /*                          * create table _userRoleTableName (_userRoleTableUserKey integer,                          * _userRoleTableRoleKey integer,                          * primary key (_userRoleTableUserKey, _userRoleTableRoleKey));                          *                          * create index idx_user_role on _userRoleTableName (_userRoleTableUserKey);                          */                         stmt.executeUpdate("create table "+_userRoleTableName+" ("+_userRoleTableUserKey+" integer, "+                                 _userRoleTableRoleKey+" integer, "+                                 "primary key ("+_userRoleTableUserKey+", "+_userRoleTableRoleKey+"))");                         stmt.executeUpdate("create index indx_user_role on "+_userRoleTableName+"("+_userRoleTableUserKey+")");                         if (LOG.isDebugEnabled()) LOG.debug("Created table "+_userRoleTableName +" and index");                     }                 }                 connection.commit();             }             finally             {                 try                 {                     connection.setAutoCommit(autocommit);                 }                 catch (SQLException e)                 {                     if (LOG.isDebugEnabled()) LOG.debug("Prepare tables", e);                 }                 finally                 {                     try                     {                         connection.close();                     }                     catch (SQLException e)                     {                         if (LOG.isDebugEnabled()) LOG.debug("Prepare tables", e);                     }                 }             }         }         else if (LOG.isDebugEnabled())         {             LOG.debug("createTables false");         }     }      /* ------------------------------------------------------------ */     /**      * @return      * @throws NamingException      * @throws SQLException      */     private Connection getConnection ()     throws NamingException, SQLException     {         initDb();         return _datasource.getConnection();     } };data class;blob;t;t;f;blob;data class;0;11959;https://github.com/eclipse/jetty.project/blob/65528f76c5ef6ddca11385f9721c8f0bc5f2eed7/jetty-plus/src/main/java/org/eclipse/jetty/plus/security/DataSourceLoginService.java/#L52-L530;2;1779;11959
1791; {"message": "YES I found bad smells", "details": {"bad_smells": ["Blob"]}};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class TransportConnectionState extends org.apache.activemq.state.ConnectionState {      private ConnectionContext context;     private TransportConnection connection;     private AtomicInteger referenceCounter = new AtomicInteger();     private final Object connectionMutex = new Object();      public TransportConnectionState(ConnectionInfo info, TransportConnection transportConnection) {         super(info);         connection = transportConnection;     }      public ConnectionContext getContext() {         return context;     }      public TransportConnection getConnection() {         return connection;     }      public void setContext(ConnectionContext context) {         this.context = context;     }      public void setConnection(TransportConnection connection) {         this.connection = connection;     }      public int incrementReference() {         return referenceCounter.incrementAndGet();     }      public int decrementReference() {         return referenceCounter.decrementAndGet();     }  	public AtomicInteger getReferenceCounter() { 		return referenceCounter; 	}  	public void setReferenceCounter(AtomicInteger referenceCounter) { 		this.referenceCounter = referenceCounter; 	}  	public Object getConnectionMutex() { 		return connectionMutex; 	} };data class;'bad_smells': 'Blob';t;t;f;{',b,a,d,_,s,m,e,l,l,s,',:," ",',B,l,o,b,'};{',b,d,_,m,',:," ",',B,o,b,'};0;11988;https://github.com/apache/activemq/blob/ccf56875b0660214e0a61bd2f8adc418143551fc/activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnectionState.java/#L27-L74;2;1791;11988
1831;{"response": "YES I found bad smells", "bad smells are": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    public static class DAOAttachment {         private final AttachmentId attachmentId;         private final BlobId blobId;         private final String type;         private final long size;          private DAOAttachment(AttachmentId attachmentId, BlobId blobId, String type, long size) {             this.attachmentId = attachmentId;             this.blobId = blobId;             this.type = type;             this.size = size;         }          public AttachmentId getAttachmentId() {             return attachmentId;         }          public BlobId getBlobId() {             return blobId;         }          public String getType() {             return type;         }          public long getSize() {             return size;         }          public Attachment toAttachment(byte[] data) {             return Attachment.builder()                 .attachmentId(attachmentId)                 .type(type)                 .bytes(data)                 .build();         }          @Override         public final boolean equals(Object o) {             if (o instanceof DAOAttachment) {                 DAOAttachment that = (DAOAttachment) o;                  return Objects.equals(this.size, that.size)                     && Objects.equals(this.attachmentId, that.attachmentId)                     && Objects.equals(this.blobId, that.blobId)                     && Objects.equals(this.type, that.type);             }             return false;         }          @Override         public final int hashCode() {             return Objects.hash(attachmentId, blobId, type, size);         }     };data class;Blob, Data Class;t;f;t;Blob;;0;12126;https://github.com/apache/james-project/blob/fa24a096a5853459c3769a34ccc68feb91626bfa/mailbox/cassandra/src/main/java/org/apache/james/mailbox/cassandra/mail/CassandraAttachmentDAOV2.java/#L50-L104;2;1831;12126
1864;{"message": "YES I found bad smells", "bad smells are": ["Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class DruidPooledCallableStatement extends DruidPooledPreparedStatement implements CallableStatement {      private CallableStatement stmt;      public DruidPooledCallableStatement(DruidPooledConnection conn, PreparedStatementHolder holder) throws SQLException{         super(conn, holder);         this.stmt = (CallableStatement) holder.statement;     }      public CallableStatement getCallableStatementRaw() {         return stmt;     }      @Override     public void registerOutParameter(int parameterIndex, int sqlType) throws SQLException {         try {             stmt.registerOutParameter(parameterIndex, sqlType);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void registerOutParameter(int parameterIndex, int sqlType, int scale) throws SQLException {         try {             stmt.registerOutParameter(parameterIndex, sqlType, scale);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public boolean wasNull() throws SQLException {         try {             return stmt.wasNull();         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public String getString(int parameterIndex) throws SQLException {         try {             return stmt.getString(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public boolean getBoolean(int parameterIndex) throws SQLException {         try {             return stmt.getBoolean(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public byte getByte(int parameterIndex) throws SQLException {         try {             return stmt.getByte(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public short getShort(int parameterIndex) throws SQLException {         try {             return stmt.getShort(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public int getInt(int parameterIndex) throws SQLException {         try {             return stmt.getInt(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public long getLong(int parameterIndex) throws SQLException {         try {             return stmt.getLong(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public float getFloat(int parameterIndex) throws SQLException {         try {             return stmt.getFloat(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public double getDouble(int parameterIndex) throws SQLException {         try {             return stmt.getDouble(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     @Deprecated     public BigDecimal getBigDecimal(int parameterIndex, int scale) throws SQLException {         try {             return stmt.getBigDecimal(parameterIndex, scale);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public byte[] getBytes(int parameterIndex) throws SQLException {         try {             return stmt.getBytes(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Date getDate(int parameterIndex) throws SQLException {         try {             return stmt.getDate(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Time getTime(int parameterIndex) throws SQLException {         try {             return stmt.getTime(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Timestamp getTimestamp(int parameterIndex) throws SQLException {         try {             return stmt.getTimestamp(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Object getObject(int parameterIndex) throws SQLException {         try {             Object obj = stmt.getObject(parameterIndex);             return wrapObject(obj);         } catch (Throwable t) {             throw checkException(t);         }     }      private Object wrapObject(Object obj) {         if (obj instanceof ResultSet) {             ResultSet rs = (ResultSet) obj;                          DruidPooledResultSet poolableResultSet = new DruidPooledResultSet(this, rs);             addResultSetTrace(poolableResultSet);                          obj = poolableResultSet;         }                  return obj;     }      @Override     public BigDecimal getBigDecimal(int parameterIndex) throws SQLException {         try {             return stmt.getBigDecimal(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Object getObject(int parameterIndex, java.util.Map> map) throws SQLException {         try {             Object obj = stmt.getObject(parameterIndex, map);             return wrapObject(obj);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Ref getRef(int parameterIndex) throws SQLException {         try {             return stmt.getRef(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Blob getBlob(int parameterIndex) throws SQLException {         try {             return stmt.getBlob(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Clob getClob(int parameterIndex) throws SQLException {         try {             return stmt.getClob(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Array getArray(int parameterIndex) throws SQLException {         try {             return stmt.getArray(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Date getDate(int parameterIndex, Calendar cal) throws SQLException {         try {             return stmt.getDate(parameterIndex, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Time getTime(int parameterIndex, Calendar cal) throws SQLException {         try {             return stmt.getTime(parameterIndex, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Timestamp getTimestamp(int parameterIndex, Calendar cal) throws SQLException {         try {             return stmt.getTimestamp(parameterIndex, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void registerOutParameter(int parameterIndex, int sqlType, String typeName) throws SQLException {         try {             stmt.registerOutParameter(parameterIndex, sqlType, typeName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void registerOutParameter(String parameterName, int sqlType) throws SQLException {         try {             stmt.registerOutParameter(parameterName, sqlType);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException {         try {             stmt.registerOutParameter(parameterName, sqlType, scale);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException {         try {             stmt.registerOutParameter(parameterName, sqlType, typeName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.net.URL getURL(int parameterIndex) throws SQLException {         try {             return stmt.getURL(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setURL(String parameterName, java.net.URL val) throws SQLException {         try {             stmt.setURL(parameterName, val);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNull(String parameterName, int sqlType) throws SQLException {         try {             stmt.setNull(parameterName, sqlType);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBoolean(String parameterName, boolean x) throws SQLException {         try {             stmt.setBoolean(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setByte(String parameterName, byte x) throws SQLException {         try {             stmt.setByte(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setShort(String parameterName, short x) throws SQLException {         try {             stmt.setShort(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setInt(String parameterName, int x) throws SQLException {         try {             stmt.setInt(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setLong(String parameterName, long x) throws SQLException {         try {             stmt.setLong(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setFloat(String parameterName, float x) throws SQLException {         try {             stmt.setFloat(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setDouble(String parameterName, double x) throws SQLException {         try {             stmt.setDouble(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBigDecimal(String parameterName, BigDecimal x) throws SQLException {         try {             stmt.setBigDecimal(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setString(String parameterName, String x) throws SQLException {         try {             stmt.setString(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBytes(String parameterName, byte x[]) throws SQLException {         try {             stmt.setBytes(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setDate(String parameterName, java.sql.Date x) throws SQLException {         try {             stmt.setDate(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setTime(String parameterName, java.sql.Time x) throws SQLException {         try {             stmt.setTime(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setTimestamp(String parameterName, java.sql.Timestamp x) throws SQLException {         try {             stmt.setTimestamp(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setAsciiStream(String parameterName, java.io.InputStream x, int length) throws SQLException {         try {             stmt.setAsciiStream(parameterName, x, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBinaryStream(String parameterName, java.io.InputStream x, int length) throws SQLException {         try {             stmt.setBinaryStream(parameterName, x, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setObject(String parameterName, Object x, int targetSqlType, int scale) throws SQLException {         try {             stmt.setObject(parameterName, x, targetSqlType, scale);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setObject(String parameterName, Object x, int targetSqlType) throws SQLException {         try {             stmt.setObject(parameterName, x, targetSqlType);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setObject(String parameterName, Object x) throws SQLException {         try {             stmt.setObject(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setCharacterStream(String parameterName, java.io.Reader reader, int length) throws SQLException {         try {             stmt.setCharacterStream(parameterName, reader, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setDate(String parameterName, java.sql.Date x, Calendar cal) throws SQLException {         try {             stmt.setDate(parameterName, x, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setTime(String parameterName, java.sql.Time x, Calendar cal) throws SQLException {         try {             stmt.setTime(parameterName, x, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setTimestamp(String parameterName, java.sql.Timestamp x, Calendar cal) throws SQLException {         try {             stmt.setTimestamp(parameterName, x, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNull(String parameterName, int sqlType, String typeName) throws SQLException {         try {             stmt.setNull(parameterName, sqlType, typeName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public String getString(String parameterName) throws SQLException {         try {             return stmt.getString(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public boolean getBoolean(String parameterName) throws SQLException {         try {             return stmt.getBoolean(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public byte getByte(String parameterName) throws SQLException {         try {             return stmt.getByte(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public short getShort(String parameterName) throws SQLException {         try {             return stmt.getShort(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public int getInt(String parameterName) throws SQLException {         try {             return stmt.getInt(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public long getLong(String parameterName) throws SQLException {         try {             return stmt.getLong(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public float getFloat(String parameterName) throws SQLException {         try {             return stmt.getFloat(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public double getDouble(String parameterName) throws SQLException {         try {             return stmt.getDouble(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public byte[] getBytes(String parameterName) throws SQLException {         try {             return stmt.getBytes(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Date getDate(String parameterName) throws SQLException {         try {             return stmt.getDate(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Time getTime(String parameterName) throws SQLException {         try {             return stmt.getTime(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Timestamp getTimestamp(String parameterName) throws SQLException {         try {             return stmt.getTimestamp(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Object getObject(String parameterName) throws SQLException {         try {             Object obj = stmt.getObject(parameterName);             return wrapObject(obj);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public BigDecimal getBigDecimal(String parameterName) throws SQLException {         try {             return stmt.getBigDecimal(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Object getObject(String parameterName, java.util.Map> map) throws SQLException {         try {             Object obj = stmt.getObject(parameterName, map);             return wrapObject(obj);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Ref getRef(String parameterName) throws SQLException {         try {             return stmt.getRef(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Blob getBlob(String parameterName) throws SQLException {         try {             return stmt.getBlob(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Clob getClob(String parameterName) throws SQLException {         try {             return stmt.getClob(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Array getArray(String parameterName) throws SQLException {         try {             return stmt.getArray(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Date getDate(String parameterName, Calendar cal) throws SQLException {         try {             return stmt.getDate(parameterName, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Time getTime(String parameterName, Calendar cal) throws SQLException {         try {             return stmt.getTime(parameterName, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException {         try {             return stmt.getTimestamp(parameterName, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.net.URL getURL(String parameterName) throws SQLException {         try {             return stmt.getURL(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public RowId getRowId(int parameterIndex) throws SQLException {         try {             return stmt.getRowId(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public RowId getRowId(String parameterName) throws SQLException {         try {             return stmt.getRowId(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setRowId(String parameterName, RowId x) throws SQLException {         try {             stmt.setRowId(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNString(String parameterName, String value) throws SQLException {         try {             stmt.setNString(parameterName, value);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNCharacterStream(String parameterName, Reader value, long length) throws SQLException {         try {             stmt.setNCharacterStream(parameterName, value, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNClob(String parameterName, NClob value) throws SQLException {         try {             stmt.setNClob(parameterName, value);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setClob(String parameterName, Reader reader, long length) throws SQLException {         try {             stmt.setClob(parameterName, reader, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBlob(String parameterName, InputStream inputStream, long length) throws SQLException {         try {             stmt.setBlob(parameterName, inputStream, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNClob(String parameterName, Reader reader, long length) throws SQLException {         try {             stmt.setNClob(parameterName, reader, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public NClob getNClob(int parameterIndex) throws SQLException {         try {             return stmt.getNClob(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public NClob getNClob(String parameterName) throws SQLException {         try {             return stmt.getNClob(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setSQLXML(String parameterName, SQLXML xmlObject) throws SQLException {         try {             stmt.setSQLXML(parameterName, xmlObject);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public SQLXML getSQLXML(int parameterIndex) throws SQLException {         try {             return stmt.getSQLXML(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public SQLXML getSQLXML(String parameterName) throws SQLException {         try {             return stmt.getSQLXML(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public String getNString(int parameterIndex) throws SQLException {         try {             return stmt.getNString(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public String getNString(String parameterName) throws SQLException {         try {             return stmt.getNString(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.io.Reader getNCharacterStream(int parameterIndex) throws SQLException {         try {             return stmt.getNCharacterStream(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.io.Reader getNCharacterStream(String parameterName) throws SQLException {         try {             return stmt.getNCharacterStream(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.io.Reader getCharacterStream(int parameterIndex) throws SQLException {         try {             return stmt.getCharacterStream(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.io.Reader getCharacterStream(String parameterName) throws SQLException {         try {             return stmt.getCharacterStream(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBlob(String parameterName, Blob x) throws SQLException {         try {             stmt.setBlob(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setClob(String parameterName, Clob x) throws SQLException {         try {             stmt.setClob(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setAsciiStream(String parameterName, java.io.InputStream x, long length) throws SQLException {         try {             stmt.setAsciiStream(parameterName, x, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBinaryStream(String parameterName, java.io.InputStream x, long length) throws SQLException {         try {             stmt.setBinaryStream(parameterName, x, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setCharacterStream(String parameterName, java.io.Reader reader, long length) throws SQLException {         try {             stmt.setCharacterStream(parameterName, reader, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setAsciiStream(String parameterName, java.io.InputStream x) throws SQLException {         try {             stmt.setAsciiStream(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBinaryStream(String parameterName, java.io.InputStream x) throws SQLException {         try {             stmt.setBinaryStream(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setCharacterStream(String parameterName, java.io.Reader reader) throws SQLException {         try {             stmt.setCharacterStream(parameterName, reader);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNCharacterStream(String parameterName, Reader value) throws SQLException {         try {             stmt.setNCharacterStream(parameterName, value);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setClob(String parameterName, Reader reader) throws SQLException {         try {             stmt.setClob(parameterName, reader);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBlob(String parameterName, InputStream inputStream) throws SQLException {         try {             stmt.setBlob(parameterName, inputStream);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNClob(String parameterName, Reader reader) throws SQLException {         try {             stmt.setNClob(parameterName, reader);         } catch (Throwable t) {             throw checkException(t);         }     }      public  T getObject(int parameterIndex, Class type) throws SQLException {         throw new SQLFeatureNotSupportedException();     }      public  T getObject(String parameterName, Class type) throws SQLException {         throw new SQLFeatureNotSupportedException();     }      @SuppressWarnings("unchecked")     public  T unwrap(Class iface) throws SQLException {         if (iface == CallableStatement.class || iface == PreparedStatement.class) {             if (stmt instanceof CallableStatementProxy) {                 return stmt.unwrap(iface);             }             return (T) stmt;         }                  return super.unwrap(iface);     } };data class;blob;t;t;f;blob;data class;0;12232;https://github.com/alibaba/druid/blob/768469fe4d1340efe1036453366a58c9ab7e30d1/src/main/java/com/alibaba/druid/pool/DruidPooledCallableStatement.java/#L40-L1089;2;1864;12232
1885;     {         "message": "YES I found bad smells",         "bad smells are": [             "Long Method",             "Blob"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    @Override     public boolean isExists(Object identifier) throws AppCatalogException {         HashMap ids;         if (identifier instanceof Map) {             ids = (HashMap) identifier;         } else {             logger.error("Identifier should be a map with the field name and it's value");             throw new AppCatalogException("Identifier should be a map with the field name and it's value");         }          EntityManager em = null;         try {             em = AppCatalogJPAUtils.getEntityManager();             ComputeResourcePreference existingPreference = em.find(ComputeResourcePreference.class,                     new ComputeResourcePreferencePK(ids.get(ComputeResourcePreferenceConstants.GATEWAY_ID),                             ids.get(ComputeResourcePreferenceConstants.RESOURCE_ID)));             if (em.isOpen()) {                 if (em.getTransaction().isActive()){                     em.getTransaction().rollback();                 }                 em.close();             }             return existingPreference != null;         }catch (Exception e) {             logger.error(e.getMessage(), e);             throw new AppCatalogException(e);         } finally {             if (em != null && em.isOpen()) {                 if (em.getTransaction().isActive()) {                     em.getTransaction().rollback();                 }                 em.close();             }         }     };long method;long method, blob;t;t;t; blob;;0;12293;https://github.com/apache/airavata/blob/391843a00eefa7b6213e845f2f044b4e042894d5/modules/registry/registry-core/src/main/java/org/apache/airavata/registry/core/app/catalog/resources/ComputeHostPreferenceResource.java/#L522-L556;2;1885;12293
1887;  {     "message": "YES I found bad smells",     "detected_bad_smells": [         "Blob",         "Long Method"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    TreeNodeChildren(final TreeNode parent, final Object metadata, final PropertyAccessor accessor) {         this.parent   = parent;         this.metadata = metadata;         this.accessor = accessor;         this.children = new TreeNode[accessor.count()];         /*          * Search for something that looks like the main property, to be associated with the parent node          * instead than provided as a child. The intent is to have more compact and easy to read trees.          * That property shall be a singleton for a simple value (not another metadata object).          */         if (parent.table.valuePolicy == ValueExistencePolicy.COMPACT) {             TitleProperty an = accessor.implementation.getAnnotation(TitleProperty.class);             if (an == null) {                 Class implementation = parent.table.standard.getImplementation(accessor.type);                 if (implementation != null) {                     an = implementation.getAnnotation(TitleProperty.class);                 }             }             if (an != null) {                 final int index = accessor.indexOf(an.name(), false);                 final Class type = accessor.type(index, TypeValuePolicy.ELEMENT_TYPE);                 if (type != null && !parent.isMetadata(type) && type == accessor.type(index, TypeValuePolicy.PROPERTY_TYPE)) {                     titleProperty = index;                     return;                 }             }         }         titleProperty = -1;     };long method;blob, long method;t;t;t;blob;;0;12299;https://github.com/apache/sis/blob/002121abc9b9826fbd51fac7150b3ee0c02cc88b/core/sis-metadata/src/main/java/org/apache/sis/metadata/TreeNodeChildren.java/#L137-L165;2;1887;12299
1909;{     "output": "YES I found bad smells",     "bad smells are": [         "Blob",         "Long Method"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
	public class GroupMultiplicitiesElements extends AbstractParserRuleElementFinder { 		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.validation.ConcreteSyntaxValidationTestLanguage.GroupMultiplicities"); 		private final Group cGroup = (Group)rule.eContents().get(1); 		private final Keyword cNumberSignDigitFourKeyword_0 = (Keyword)cGroup.eContents().get(0); 		private final Assignment cVal1Assignment_1 = (Assignment)cGroup.eContents().get(1); 		private final RuleCall cVal1IDTerminalRuleCall_1_0 = (RuleCall)cVal1Assignment_1.eContents().get(0); 		private final Keyword cKw1Keyword_2 = (Keyword)cGroup.eContents().get(2); 		private final Group cGroup_3 = (Group)cGroup.eContents().get(3); 		private final Assignment cVal2Assignment_3_0 = (Assignment)cGroup_3.eContents().get(0); 		private final RuleCall cVal2IDTerminalRuleCall_3_0_0 = (RuleCall)cVal2Assignment_3_0.eContents().get(0); 		private final Assignment cVal3Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1); 		private final RuleCall cVal3IDTerminalRuleCall_3_1_0 = (RuleCall)cVal3Assignment_3_1.eContents().get(0); 		private final Keyword cKw2Keyword_4 = (Keyword)cGroup.eContents().get(4); 		private final Group cGroup_5 = (Group)cGroup.eContents().get(5); 		private final Assignment cVal4Assignment_5_0 = (Assignment)cGroup_5.eContents().get(0); 		private final RuleCall cVal4IDTerminalRuleCall_5_0_0 = (RuleCall)cVal4Assignment_5_0.eContents().get(0); 		private final Assignment cVal5Assignment_5_1 = (Assignment)cGroup_5.eContents().get(1); 		private final RuleCall cVal5IDTerminalRuleCall_5_1_0 = (RuleCall)cVal5Assignment_5_1.eContents().get(0); 		private final Keyword cKw3Keyword_6 = (Keyword)cGroup.eContents().get(6); 		private final Group cGroup_7 = (Group)cGroup.eContents().get(7); 		private final Assignment cVal6Assignment_7_0 = (Assignment)cGroup_7.eContents().get(0); 		private final RuleCall cVal6IDTerminalRuleCall_7_0_0 = (RuleCall)cVal6Assignment_7_0.eContents().get(0); 		private final Assignment cVal7Assignment_7_1 = (Assignment)cGroup_7.eContents().get(1); 		private final RuleCall cVal7IDTerminalRuleCall_7_1_0 = (RuleCall)cVal7Assignment_7_1.eContents().get(0); 		 		//GroupMultiplicities: 		//	"#4" val1=ID "kw1" (val2=ID val3=ID)? "kw2" (val4+=ID val5+=ID)+ "kw3" (val6+=ID val7+=ID)*; 		@Override public ParserRule getRule() { return rule; } 		 		//"#4" val1=ID "kw1" (val2=ID val3=ID)? "kw2" (val4+=ID val5+=ID)+ "kw3" (val6+=ID val7+=ID)* 		public Group getGroup() { return cGroup; } 		 		//"#4" 		public Keyword getNumberSignDigitFourKeyword_0() { return cNumberSignDigitFourKeyword_0; } 		 		//val1=ID 		public Assignment getVal1Assignment_1() { return cVal1Assignment_1; } 		 		//ID 		public RuleCall getVal1IDTerminalRuleCall_1_0() { return cVal1IDTerminalRuleCall_1_0; } 		 		//"kw1" 		public Keyword getKw1Keyword_2() { return cKw1Keyword_2; } 		 		//(val2=ID val3=ID)? 		public Group getGroup_3() { return cGroup_3; } 		 		//val2=ID 		public Assignment getVal2Assignment_3_0() { return cVal2Assignment_3_0; } 		 		//ID 		public RuleCall getVal2IDTerminalRuleCall_3_0_0() { return cVal2IDTerminalRuleCall_3_0_0; } 		 		//val3=ID 		public Assignment getVal3Assignment_3_1() { return cVal3Assignment_3_1; } 		 		//ID 		public RuleCall getVal3IDTerminalRuleCall_3_1_0() { return cVal3IDTerminalRuleCall_3_1_0; } 		 		//"kw2" 		public Keyword getKw2Keyword_4() { return cKw2Keyword_4; } 		 		//(val4+=ID val5+=ID)+ 		public Group getGroup_5() { return cGroup_5; } 		 		//val4+=ID 		public Assignment getVal4Assignment_5_0() { return cVal4Assignment_5_0; } 		 		//ID 		public RuleCall getVal4IDTerminalRuleCall_5_0_0() { return cVal4IDTerminalRuleCall_5_0_0; } 		 		//val5+=ID 		public Assignment getVal5Assignment_5_1() { return cVal5Assignment_5_1; } 		 		//ID 		public RuleCall getVal5IDTerminalRuleCall_5_1_0() { return cVal5IDTerminalRuleCall_5_1_0; } 		 		//"kw3" 		public Keyword getKw3Keyword_6() { return cKw3Keyword_6; } 		 		//(val6+=ID val7+=ID)* 		public Group getGroup_7() { return cGroup_7; } 		 		//val6+=ID 		public Assignment getVal6Assignment_7_0() { return cVal6Assignment_7_0; } 		 		//ID 		public RuleCall getVal6IDTerminalRuleCall_7_0_0() { return cVal6IDTerminalRuleCall_7_0_0; } 		 		//val7+=ID 		public Assignment getVal7Assignment_7_1() { return cVal7Assignment_7_1; } 		 		//ID 		public RuleCall getVal7IDTerminalRuleCall_7_1_0() { return cVal7IDTerminalRuleCall_7_1_0; } 	};data class;blob, long method;t;t;f;blob,  long method;data class;0;12397;https://github.com/eclipse/xtext-core/blob/e04964e4c2a3e0338c0079bd8333688835e77c31/org.eclipse.xtext.tests/src-gen/org/eclipse/xtext/validation/services/ConcreteSyntaxValidationTestLanguageGrammarAccess.java/#L414-L508;2;1909;12397
1912;     {         "output": "YES I found bad smells",         "the bad smells are": ["Blob", "Data Class", "Long Method"]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class SetOrderReferenceDetailsRequest extends DelegateRequest implements Serializable {      @Override     protected SetOrderReferenceDetailsRequest getThis() {         return this;     }      //required parameters     private String amazonOrderReferenceId;     private String orderAmount;     private CurrencyCode orderCurrencyCode;      //optional parameters     private String platformId;     private String sellerNote;     private String sellerOrderId;     private String storeName;     private String supplementaryData;     private String customInformation;     private Boolean requestPaymentAuthorization;      /**      *      * @param amazonOrderReferenceId      *              This value is retrieved from the Amazon Button widget      *              after the buyer has successfully authenticated with Amazon.      *      * @param orderAmount      *              Specifies the total amount of the order represented by this order reference.      */     public SetOrderReferenceDetailsRequest(String amazonOrderReferenceId, String orderAmount) {         this.amazonOrderReferenceId = amazonOrderReferenceId;         this.orderAmount = orderAmount;     }      /**      * Overrides the Client's currency code with specified currency code in SetOrderReferenceDetailsRequest      *      * @param currencyCode      *              A three-digit currency code, formatted based on the ISO 4217 standard.      *      * @return currenyCode      */     public SetOrderReferenceDetailsRequest setOrderCurrencyCode(CurrencyCode currencyCode) {         this.orderCurrencyCode = currencyCode;         return this;     }      /**      * Represents the SellerId of the Solution Provider that developed the platform.      * This value should only be provided by Solution Providers. It should not be      * provided by merchants creating their own custom integration.      *      * @param platformId Represents the SellerId of the Solution Provider that developed the platform.      *                   This value should only be provided by Solution Providers. It should      *                   not be provided by merchants creating their own custom integration.      *      * @return Returns a reference to this object so that methods can be chained together.      */     public SetOrderReferenceDetailsRequest setPlatformId(String platformId) {         this.platformId = platformId;         return this;     }      /**      * Represents a description of the order that is displayed in emails to the buyer.      *      * @param sellerNote Represents a description of the order that is displayed in emails to the buyer.      *      * @return Returns a reference to this object so that methods can be chained together.      */     public SetOrderReferenceDetailsRequest setSellerNote(String sellerNote) {         this.sellerNote = sellerNote;         return this;     }      /**      * The merchant-specified identifier of this order. This is displayed to the      * buyer in their emails and transaction history on the Amazon Pay website.      *      * @param sellerOrderId merchant-specified identifier of the order.      *      * @return the Seller Order ID      */     public SetOrderReferenceDetailsRequest setSellerOrderId(String sellerOrderId) {         this.sellerOrderId = sellerOrderId;         return this;     }      /**      * The identifier of the store from which the order was placed. This overrides      * the default value in Seller Central under Settings > Account Settings. It is      * displayed to the buyer in their emails and transaction history on the      * Amazon Pay website.      *      * @param storeName the identifier of the store from which the order was placed.      *      * @return the Store Name      */     public SetOrderReferenceDetailsRequest setStoreName(String storeName) {         this.storeName = storeName;         return this;     }      /**      * Set the trusted authorization supplementary data.      * Use only as directed by Amazon Pay.      *      * @param supplementaryData Trusted authorization supplementary data (JSON string)      *      * @return Request object      */     public SetOrderReferenceDetailsRequest setSupplementaryData(final String supplementaryData) {         this.supplementaryData = supplementaryData;         return this;     }      /**      * Any additional information that you want to include with this order reference.      *      * @param customInformation Additional information that merchant wants to pass for the order.      *      * @return Custom Information      */     public SetOrderReferenceDetailsRequest setCustomInformation(String customInformation) {         this.customInformation = customInformation;         return this;     }      /**      *      * @return AmazonOrderReferenceId      */     public String getAmazonOrderReferenceId() {         return amazonOrderReferenceId;     }      /**      *      * @return OrderAmount      */     public String getOrderAmount() {         return orderAmount;     }      /**      *      * @return OrderCurrencyCode      */     public CurrencyCode getOrderCurrencyCode() {         return orderCurrencyCode;     }      /**      *      * @return PlatformId      */     public String getPlatformId() {         return platformId;     }      /**      *      * @return SellerNote      */     public String getSellerNote() {         return sellerNote;     }      /**      *      * @return SellerOrderId      */     public String getSellerOrderId() {         return sellerOrderId;     }      /**      *      * @return StoreName      */     public String getStoreName() {         return storeName;     }      /**      * Returns the trusted authorization supplementary data.      *      * @return supplementaryData as a JSON string      */     public String getSupplementaryData() {         return supplementaryData;     }      /**      *      * @return CustomInformation      */     public String getCustomInformation() {         return customInformation;     }      /**      *Check if payment authorization has been requested or not      *      * @return Value of the requestPaymentAuthorization      */     public Boolean getRequestPaymentAuthorization() {         return requestPaymentAuthorization;     }      /**      * Specifies if the merchants want their buyers to go through multi-factor authentication      *      * @param requestPaymentAuthorization flag exposed to merchants using which merchants      *                                    can enforce their buyers to through multi-factor authentication      *      * @return Value of the requestPaymentAuthorization      */     public SetOrderReferenceDetailsRequest setRequestPaymentAuthorization(Boolean requestPaymentAuthorization) {         this.requestPaymentAuthorization = requestPaymentAuthorization;         return this;     }      /**      * Returns a string representation of this object; useful for testing and      * debugging.      *      * @return A string representation of this object.      *      * @see java.lang.Object#toString()      */     @Override     public String toString() {         return "SetOrderReferenceDetailsRequest{"                 + "amazonOrderReferenceId=" + amazonOrderReferenceId                 + ", orderAmount=" + orderAmount                 + ", orderCurrencyCode=" + orderCurrencyCode                 + ", platformId=" + platformId                 + ", sellerNote=" + sellerNote                 + ", sellerOrderId=" + sellerOrderId                 + ", storeName=" + storeName                 + ", supplementaryData=" + supplementaryData                 + ", customInformation=" + customInformation                 + ", mwsAuthToken=" + getMwsAuthToken() + '}';     }  };data class;blob, data class, long method;t;t;f;blob,  long method;data class;0;12401;https://github.com/amzn/amazon-pay-sdk-java/blob/5a3547d00c796aab8f0c8ac12e0310f7a5c4678a/src/com/amazon/pay/request/SetOrderReferenceDetailsRequest.java/#L25-L272;2;1912;12401
1928; {"message": "YES I found bad smells", "detected_bad_smells": ["Long Method", "Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    boolean increaseConnectionWindow(int amount) {         List> candidates = null;         controllerLock.lock();         try {             int size = connectionWindowSize;             size += amount;             if (size < 0)                 return false;             connectionWindowSize = size;             if (debug.on())                 debug.log("Connection window size is now %d (amount added %d)",                           size, amount);              // Notify waiting streams, until the new increased window size is             // effectively exhausted.             Iterator,Integer>>> iter =                     pending.entrySet().iterator();              while (iter.hasNext() && size > 0) {                 Map.Entry,Integer>> item = iter.next();                 Integer streamSize = streams.get(item.getKey());                 if (streamSize == null) {                     iter.remove();                 } else {                     Map.Entry,Integer> e = item.getValue();                     int requestedAmount = e.getValue();                     // only wakes up the pending streams for which there is                     // at least 1 byte of space in both windows                     int minAmount = 1;                     if (size >= minAmount && streamSize >= minAmount) {                         size -= Math.min(streamSize, requestedAmount);                         iter.remove();                         if (candidates == null)                             candidates = new ArrayList<>();                         candidates.add(e.getKey());                     }                 }             }         } finally {             controllerLock.unlock();         }         if (candidates != null) {             candidates.forEach(Stream::signalWindowUpdate);         }         return true;     };long method;Long Method, Blob;t;f;t; Blob;;0;12445;https://github.com/SAP/SapMachine/blob/6e62561730c46dc5000c39665c43951832192ceb/src/java.net.http/share/classes/jdk/internal/net/http/WindowController.java/#L181-L226;2;1928;12445
1950; { "message": "YES, I found bad smells", "bad smells are": ["Blob", "Data Class"] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@XmlRootElement public class Book {      private int id;     private String name;      public Book() {}      public Book(int bookId, String name) {         this.id = bookId;         this.name = name;     }      public int getId() {         return id;     }      public void setId(int id) {         this.id = id;     }      public String getName() {         return name;     }      public void setName(String name) {         this.name = name;     } };data class;blob, data class;t;t;f;blob;data class;0;12530;https://github.com/apache/tomee/blob/d21933b313aff812fe5188b57bf572a9ad649148/examples/mp-rest-client/src/main/java/org/superbiz/rest/Book.java/#L22-L50;2;1950;12530
1957;   {     "message": "YES I found bad smells",     "bad smells are": [       "Blob",       "Feature Envy",       "Long Method"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  private void validateArrayStep(String arrStep)     throws QueryException   {     boolean wildAllowed  = true;    // * is allowed initially     boolean digitAllowed = true;    // Digit is allowed as next char     boolean commaAllowed = false;   // Comma is allowed as next char      boolean afterDigit    = false;  // Last non-space was a digit     boolean toAllowed     = false;  // Any space after digit allows "to"     boolean afterTo       = false;  // After "to" expecting range end     boolean toInProgress  = false;  // Prior char was 't' in "to"     boolean spaceRequired = false;  // A whitespace is required (after "to")     boolean digitRequired = false;  // Digit required after comma or "to"      for (int i = 1; i < arrStep.length() - 1; ++i)     {       char currentChar = arrStep.charAt(i);        if (currentChar == '*')       {         if (!wildAllowed)           throwArrayException(arrStep);          wildAllowed  = false;  // We've seen the only allowed wildcard         digitAllowed = false;  // Only whitespace is allowed afterward       }       else if (currentChar == ',')       {         if (!commaAllowed)           throwArrayException(arrStep);          commaAllowed  = false;         toAllowed     = false;         afterDigit    = false;         afterTo       = false;         digitRequired = true;  // Next non-space must be a digit       }       else if ("0123456789".indexOf(currentChar) >= 0)       {         if (!digitAllowed)           throwArrayException(arrStep);          wildAllowed   = false; // Wildcard no longer allowed         commaAllowed  = true;         afterDigit    = true;         digitRequired = false;       }       else if (" \t\n\r".indexOf(currentChar) >= 0)       {         // Whitespace not allowed when parsing "to"         if (toInProgress)           throwArrayException(arrStep);          if (afterDigit)         {           // Last non-space was a digit - next non-space is "to" or comma           digitAllowed = false;           toAllowed    = !afterTo;           commaAllowed = true;         }         else if (spaceRequired)         {           // This is the whitespace required after "to"           digitAllowed  = true;           spaceRequired = false;           digitRequired = true;  // At least one digit must follow         }       }       else if (currentChar == 't')       {         if (!toAllowed)           throwArrayException(arrStep);          toInProgress = true;  // Next char must be the 'o' in "to"         commaAllowed = false;         afterDigit   = false;       }       else if (currentChar == 'o')       {         if (!toInProgress)           throwArrayException(arrStep);          toInProgress  = false;         toAllowed     = false;         afterTo       = true;         spaceRequired = true;  // "to" must be followed by whitespace       }       else       {         // Invalid character         throwArrayException(arrStep);       }     }      // Empty array or only whitespace found     if (wildAllowed)       throwArrayException(arrStep);      // Incomplete "to" or comma sequence at end of subscript     if (toInProgress || spaceRequired || digitRequired)       throwArrayException(arrStep);   };long method;blob, feature envy, long method;t;t;f;blob,  feature envy;long method;0;12568;https://github.com/oracle/soda-for-java/blob/352634e26b5a0d9d529d5436f7a4c8e21ed1dbf0/src/oracle/json/parser/PathParser.java/#L138-L239;2;1957;12568
1963;     {         "message": "YES I found bad smells",         "detected_bad_smells": {             "1. Long Method": {},             "2. Blob": {}         }     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    public AsyncContextEvent(Context context,AsyncContextState asyncContext, HttpChannelState state, Request baseRequest, ServletRequest request, ServletResponse response)     {         super(null,request,response,null);         _context=context;         _asyncContext=asyncContext;         _state=state;          // If we haven't been async dispatched before         if (baseRequest.getAttribute(AsyncContext.ASYNC_REQUEST_URI)==null)         {             // We are setting these attributes during startAsync, when the spec implies that             // they are only available after a call to AsyncContext.dispatch(...);              // have we been forwarded before?             String uri=(String)baseRequest.getAttribute(RequestDispatcher.FORWARD_REQUEST_URI);             if (uri!=null)             {                 baseRequest.setAttribute(AsyncContext.ASYNC_REQUEST_URI,uri);                 baseRequest.setAttribute(AsyncContext.ASYNC_CONTEXT_PATH,baseRequest.getAttribute(RequestDispatcher.FORWARD_CONTEXT_PATH));                 baseRequest.setAttribute(AsyncContext.ASYNC_SERVLET_PATH,baseRequest.getAttribute(RequestDispatcher.FORWARD_SERVLET_PATH));                 baseRequest.setAttribute(AsyncContext.ASYNC_PATH_INFO,baseRequest.getAttribute(RequestDispatcher.FORWARD_PATH_INFO));                 baseRequest.setAttribute(AsyncContext.ASYNC_QUERY_STRING,baseRequest.getAttribute(RequestDispatcher.FORWARD_QUERY_STRING));             }             else             {                 baseRequest.setAttribute(AsyncContext.ASYNC_REQUEST_URI,baseRequest.getRequestURI());                 baseRequest.setAttribute(AsyncContext.ASYNC_CONTEXT_PATH,baseRequest.getContextPath());                 baseRequest.setAttribute(AsyncContext.ASYNC_SERVLET_PATH,baseRequest.getServletPath());                 baseRequest.setAttribute(AsyncContext.ASYNC_PATH_INFO,baseRequest.getPathInfo());                 baseRequest.setAttribute(AsyncContext.ASYNC_QUERY_STRING,baseRequest.getQueryString());             }         }     };feature envy;1. long method: , 2. blob: ;t;t;f;1. long method: ,  2. blob: ;feature envy;0;12587;https://github.com/eclipse/jetty.project/blob/65528f76c5ef6ddca11385f9721c8f0bc5f2eed7/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncContextEvent.java/#L42-L74;2;1963;12587
2008;    {     "response": "YES I found bad smells",     "detected_bad_smells": [       "1. Long Method",       "2. Blob"     ]   }   ;The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@XmlRootElement(name = "realm") @XmlType public class RealmTO implements EntityTO, TemplatableTO {      private static final long serialVersionUID = 516330662956254391L;      private String key;      private String name;      private String parent;      private String fullPath;      private String accountPolicy;      private String passwordPolicy;      private final List actions = new ArrayList<>();      @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)     private final Map templates = new HashMap<>();      private final Set resources = new HashSet<>();      @Override     public String getKey() {         return key;     }      @Override     public void setKey(final String key) {         this.key = key;     }      public String getName() {         return name;     }      public void setName(final String name) {         this.name = name;     }      public String getParent() {         return parent;     }      public void setParent(final String parent) {         this.parent = parent;     }      public String getFullPath() {         return fullPath;     }      @PathParam("fullPath")     public void setFullPath(final String fullPath) {         this.fullPath = fullPath;     }      public String getAccountPolicy() {         return accountPolicy;     }      public void setAccountPolicy(final String accountPolicy) {         this.accountPolicy = accountPolicy;     }      public String getPasswordPolicy() {         return passwordPolicy;     }      public void setPasswordPolicy(final String passwordPolicy) {         this.passwordPolicy = passwordPolicy;     }      @XmlElementWrapper(name = "actions")     @XmlElement(name = "action")     @JsonProperty("actions")     public List getActions() {         return actions;     }      @JsonProperty     @Override     public Map getTemplates() {         return templates;     }      @XmlElementWrapper(name = "resources")     @XmlElement(name = "resource")     @JsonProperty("resources")     public Set getResources() {         return resources;     }  };data class;1. long method, 2. blob;t;t;f;1. long method,  2. blob;data class;0;12738;https://github.com/apache/syncope/blob/114c412afbfba24ffb4fbc804e5308a823a16a78/common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/RealmTO.java/#L36-L132;2;2008;12738
2023;   {     "response": "YES I found bad smells",     "detected_bad_smells": [       "Long Method",       "Blob"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
		void cleanup() { 			for (final BundleWire requiredWire : requiredWires.getAllValues()) { 				final ConciergeBundleWiring bw = ((ConciergeBundleWire) requiredWire).providerWiring; 				if (bw != null) { 					bw.inUseSet.remove(revision); 				} 			} 			for (final BundleWire hostWire : providedWires 					.lookup(HostNamespace.HOST_NAMESPACE)) { 				final ConciergeBundleWiring bw = ((ConciergeBundleWire) hostWire).requirerWiring; 				if (bw != null) { 					bw.inUseSet.remove(revision); 				} 			} 		};feature envy;long method, blob;t;t;f;long method,  blob;feature envy;0;12796;https://github.com/eclipse/concierge/blob/4c73cacebc5ecbdef24d4256ab506359294f7a55/framework/org.eclipse.concierge/src/org/eclipse/concierge/Resources.java/#L626-L640;2;2023;12796
2038;{"response": "YES I found bad smells", "detected_bad_smells": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@Table(name = "clusters") @NamedQueries({     @NamedQuery(name = "clusterByName", query =         "SELECT cluster " +             "FROM ClusterEntity cluster " +             "WHERE cluster.clusterName=:clusterName"),     @NamedQuery(name = "allClusters", query =         "SELECT clusters " +             "FROM ClusterEntity clusters"),     @NamedQuery(name = "clusterByResourceId", query =         "SELECT cluster " +             "FROM ClusterEntity cluster " +             "WHERE cluster.resource.id=:resourceId") }) @Entity @TableGenerator(name = "cluster_id_generator",     table = "ambari_sequences", pkColumnName = "sequence_name", valueColumnName = "sequence_value"     , pkColumnValue = "cluster_id_seq"     , initialValue = 1 ) public class ClusterEntity {    @Id   @Column(name = "cluster_id", nullable = false, insertable = true, updatable = true)   @GeneratedValue(strategy = GenerationType.TABLE, generator = "cluster_id_generator")   private Long clusterId;    @Basic   @Column(name = "cluster_name", nullable = false, insertable = true,       updatable = true, unique = true, length = 100)   private String clusterName;    @Basic   @Enumerated(value = EnumType.STRING)   @Column(name = "provisioning_state", insertable = true, updatable = true)   private State provisioningState = State.INIT;    @Basic   @Enumerated(value = EnumType.STRING)   @Column(name = "security_type", nullable = false, insertable = true, updatable = true)   private SecurityType securityType = SecurityType.NONE;    @Basic   @Column(name = "desired_cluster_state", insertable = true, updatable = true)   private String desiredClusterState = "";    @Basic   @Column(name = "cluster_info", insertable = true, updatable = true)   private String clusterInfo = "";    /**    * Unidirectional one-to-one association to {@link StackEntity}    */   @OneToOne   @JoinColumn(name = "desired_stack_id", unique = false, nullable = false, insertable = true, updatable = true)   private StackEntity desiredStack;    @OneToMany(mappedBy = "clusterEntity")   private Collection clusterServiceEntities;    @OneToOne(mappedBy = "clusterEntity", cascade = CascadeType.REMOVE)   private ClusterStateEntity clusterStateEntity;    @ManyToMany(mappedBy = "clusterEntities")   private Collection hostEntities;    @OneToMany(mappedBy = "clusterEntity", cascade = CascadeType.ALL)   private Collection configEntities;    @OneToMany(mappedBy = "clusterEntity", cascade = CascadeType.ALL)   private Collection configGroupEntities;    @OneToMany(mappedBy = "clusterEntity", cascade = CascadeType.ALL)   private Collection requestScheduleEntities;    @OneToMany(mappedBy = "clusterEntity", cascade = CascadeType.REMOVE)   private Collection serviceConfigEntities;    @OneToMany(mappedBy = "clusterEntity", cascade = CascadeType.REMOVE, fetch = FetchType.LAZY)   private Collection alertDefinitionEntities;    @OneToMany(mappedBy = "clusterEntity", cascade = CascadeType.REMOVE, fetch = FetchType.LAZY)   private Collection widgetEntities;    @OneToMany(mappedBy = "clusterEntity", cascade = CascadeType.REMOVE, fetch = FetchType.LAZY)   private Collection widgetLayoutEntities;    @OneToOne(cascade = CascadeType.ALL)   @JoinColumns({       @JoinColumn(name = "resource_id", referencedColumnName = "resource_id", nullable = false)   })   private ResourceEntity resource;    @Basic   @Column(name = "upgrade_id", nullable = true, insertable = false, updatable = false)   private Long upgradeId;    /**    * {@code null} when there is no upgrade/downgrade in progress.    */   @OneToOne(cascade = CascadeType.REMOVE)   @JoinColumn(       name = "upgrade_id",       referencedColumnName = "upgrade_id",       nullable = true,       insertable = false,       updatable = true)   private UpgradeEntity upgradeEntity = null;    public Long getClusterId() {     return clusterId;   }    public void setClusterId(Long clusterId) {     this.clusterId = clusterId;   }    public String getClusterName() {     return clusterName;   }    public void setClusterName(String clusterName) {     this.clusterName = clusterName;   }    public String getDesiredClusterState() {     return defaultString(desiredClusterState);   }    public void setDesiredClusterState(String desiredClusterState) {     this.desiredClusterState = desiredClusterState;   }    public String getClusterInfo() {     return defaultString(clusterInfo);   }    public void setClusterInfo(String clusterInfo) {     this.clusterInfo = clusterInfo;   }    public StackEntity getDesiredStack() {     return desiredStack;   }    public void setDesiredStack(StackEntity desiredStack) {     this.desiredStack = desiredStack;   }    /**    * Gets whether the cluster is still initializing or has finished with its    * deployment requests.    *    * @return either {@link State#INIT} or {@link State#INSTALLED},    * never {@code null}.    */   public State getProvisioningState(){     return provisioningState;   }    /**    * Sets whether the cluster is still initializing or has finished with its    * deployment requests.    *    * @param provisioningState either {@link State#INIT} or    * {@link State#INSTALLED}, never {@code null}.    */   public void setProvisioningState(State provisioningState){     this.provisioningState = provisioningState;   }    /**    * Gets this ClusterEntity's security type.    *    * @return the current SecurityType    */   public SecurityType getSecurityType() {     return securityType;   }    /**    * Set's this ClusterEntity's security type    *    * @param securityType the new SecurityType    */   public void setSecurityType(SecurityType securityType) {     this.securityType = securityType;   }    @Override   public boolean equals(Object o) {     if (this == o) {       return true;     }     if (o == null || getClass() != o.getClass()) {       return false;     }      ClusterEntity that = (ClusterEntity) o;      if (!clusterId.equals(that.clusterId)) {       return false;     }     if (!clusterName.equals(that.clusterName)) {       return false;     }      return true;   }    @Override   public int hashCode() {     int result = null == clusterId ? 0 : clusterId.hashCode();     result = 31 * result + clusterName.hashCode();     return result;   }    public Collection getClusterServiceEntities() {     return clusterServiceEntities;   }    public void setClusterServiceEntities(Collection clusterServiceEntities) {     this.clusterServiceEntities = clusterServiceEntities;   }    public ClusterStateEntity getClusterStateEntity() {     return clusterStateEntity;   }    public void setClusterStateEntity(ClusterStateEntity clusterStateEntity) {     this.clusterStateEntity = clusterStateEntity;   }    public Collection getHostEntities() {     return hostEntities;   }    public void setHostEntities(Collection hostEntities) {     this.hostEntities = hostEntities;   }    public Collection getClusterConfigEntities() {     return configEntities;   }    public void setClusterConfigEntities(Collection entities) {     configEntities = entities;   }    public Collection getConfigGroupEntities() {     return configGroupEntities;   }    public void setConfigGroupEntities(Collection configGroupEntities) {     this.configGroupEntities = configGroupEntities;   }    public Collection getRequestScheduleEntities() {     return requestScheduleEntities;   }    public void setRequestScheduleEntities(Collection requestScheduleEntities) {     this.requestScheduleEntities = requestScheduleEntities;   }    public Collection getServiceConfigEntities() {     return serviceConfigEntities;   }    public void setServiceConfigEntities(Collection serviceConfigEntities) {     this.serviceConfigEntities = serviceConfigEntities;   }    public Collection getAlertDefinitionEntities() {     return alertDefinitionEntities;   }    /**    * Get the admin resource entity.    *    * @return the resource entity    */   public ResourceEntity getResource() {     return resource;   }    /**    * Set the admin resource entity.    *    * @param resource  the resource entity    */   public void setResource(ResourceEntity resource) {     this.resource = resource;   }    public UpgradeEntity getUpgradeEntity() {     return upgradeEntity;   }    public void setUpgradeEntity(UpgradeEntity upgradeEntity) {     this.upgradeEntity = upgradeEntity;   } };data class;blob, long method;t;t;f;blob,  long method;data class;0;12843;https://github.com/apache/ambari/blob/2bc4779a1e6aabe638101fc8b0e28cd1963d6b13/ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java/#L48-L350;2;2038;12843
2040;   {     "message": "YES I found bad smells",     "detected_bad_smells": [       "Long Method",       "Blob"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    @Override     public boolean isValidSyntax( Object value )     {         String strValue;          if ( value == null )         {             if ( LOG.isDebugEnabled() )             {                 LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, "null" ) );             }                          return false;         }          if ( value instanceof String )         {             strValue = ( String ) value;         }         else if ( value instanceof byte[] )         {             strValue = Strings.utf8ToString( ( byte[] ) value );         }         else         {             strValue = value.toString();         }          // We must have at least '(cp)', '(xr)' or '(ca)'         if ( strValue.length() < 4 )         {             if ( LOG.isDebugEnabled() )             {                 LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, value ) );             }                          return false;         }          // Check the opening and closing parenthesis         if ( ( strValue.charAt( 0 ) != '(' )             || ( strValue.charAt( strValue.length() - 1 ) != ')' ) )         {             if ( LOG.isDebugEnabled() )             {                 LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, value ) );             }                          return false;         }          Set keywords = new HashSet<>();         int len = strValue.length() - 1;         boolean needKeyword = true;          //          for ( int i = 1; i < len; /* */)         {             // Skip spaces             while ( ( i < len ) && ( strValue.charAt( i ) == ' ' ) )             {                 i++;             }              int pos = i;              // Search for a keyword             while ( ( i < len ) && Chars.isAlphaASCII( strValue, pos ) )             {                 pos++;             }              if ( pos == i )             {                 // No keyword : error                 if ( LOG.isDebugEnabled() )                 {                     LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, value ) );                 }                                  return false;             }              String keyword = strValue.substring( i, pos );             i = pos;              if ( !DSE_BITS.contains( keyword ) )             {                 // Unknown keyword                 if ( LOG.isDebugEnabled() )                 {                     LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, value ) );                 }                                  return false;             }              // Check that the keyword has not been met             if ( keywords.contains( keyword ) )             {                 if ( LOG.isDebugEnabled() )                 {                     LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, value ) );                 }                                  return false;             }              keywords.add( keyword );             needKeyword = false;              // Skip spaces             while ( ( i < len ) && ( strValue.charAt( i ) == ' ' ) )             {                 i++;             }              // Do we have another keyword ?             if ( ( i < len ) && ( strValue.charAt( i ) == '$' ) )             {                 // yes                 i++;                 needKeyword = true;             }         }          // We are done         if ( LOG.isDebugEnabled() )         {             if ( needKeyword )             {                 LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, value ) );             }             else             {                 LOG.debug( I18n.msg( I18n.MSG_13701_SYNTAX_VALID, value ) );             }         }          return !needKeyword;     };long method;long method, blob;t;t;t; blob;;0;12850;https://github.com/apache/directory-ldap-api/blob/5b93e102556ad2191b5d30411708410d1b1a9d71/ldap/model/src/main/java/org/apache/directory/api/ldap/model/schema/syntaxCheckers/DseTypeSyntaxChecker.java/#L133-L273;2;2040;12850
2041; {"message": "YES, I found bad smells", "bad smells are": ["Blob", "Data Class", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
        private static class GridMBeanServerData {             /** Set of grid names for selected MBeanServer. */             private Collection igniteInstanceNames = new HashSet<>();              /** */             private ObjectName mbean;              /** Count of grid instances. */             private int cnt;              /**              * Create data container.              *              * @param mbean Object name of MBean.              */             GridMBeanServerData(ObjectName mbean) {                 assert mbean != null;                  this.mbean = mbean;             }              /**              * Add Ignite instance name.              *              * @param igniteInstanceName Ignite instance name.              */             public void addIgniteInstance(String igniteInstanceName) {                 igniteInstanceNames.add(igniteInstanceName);             }              /**              * Remove Ignite instance name.              *              * @param igniteInstanceName Ignite instance name.              */             public void removeIgniteInstance(String igniteInstanceName) {                 igniteInstanceNames.remove(igniteInstanceName);             }              /**              * Returns {@code true} if data contains the specified              * Ignite instance name.              *              * @param igniteInstanceName Ignite instance name.              * @return {@code true} if data contains the specified Ignite instance name.              */             public boolean containsIgniteInstance(String igniteInstanceName) {                 return igniteInstanceNames.contains(igniteInstanceName);             }              /**              * Gets name used in MBean server.              *              * @return Object name of MBean.              */             public ObjectName getMbean() {                 return mbean;             }              /**              * Gets number of grid instances working with MBeanServer.              *              * @return Number of grid instances.              */             public int getCounter() {                 return cnt;             }              /**              * Sets number of grid instances working with MBeanServer.              *              * @param cnt Number of grid instances.              */             public void setCounter(int cnt) {                 this.cnt = cnt;             }         };data class;blob, data class, long method;t;t;f;blob,  long method;data class;0;12853;https://github.com/apache/ignite/blob/7a7c407ea41477aae8508bfe871b4e9a67e1b277/modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java/#L2796-L2872;2;2041;12853
2044;{"response": "YES I found bad smells", "detected_bad_smells": ["Blob", "Data Class", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class DebugInfoDecoder {     /** encoded debug info */     private final byte[] encoded;      /** positions decoded */     private final ArrayList positions;      /** locals decoded */     private final ArrayList locals;      /** size of code block in code units */     private final int codesize;      /** indexed by register, the last local variable live in a reg */     private final LocalEntry[] lastEntryForReg;      /** method descriptor of method this debug info is for */     private final Prototype desc;      /** true if method is static */     private final boolean isStatic;      /** dex file this debug info will be stored in */     private final DexFile file;      /**      * register size, in register units, of the register space      * used by this method      */     private final int regSize;      /** current decoding state: line number */     private int line = 1;      /** current decoding state: bytecode address */     private int address = 0;      /** string index of the string "this" */     private final int thisStringIdx;      /**      * Constructs an instance.      *      * @param encoded encoded debug info      * @param codesize size of code block in code units      * @param regSize register size, in register units, of the register space      * used by this method      * @param isStatic true if method is static      * @param ref method descriptor of method this debug info is for      * @param file dex file this debug info will be stored in      */     DebugInfoDecoder(byte[] encoded, int codesize, int regSize,             boolean isStatic, CstMethodRef ref, DexFile file) {         if (encoded == null) {             throw new NullPointerException("encoded == null");         }          this.encoded = encoded;         this.isStatic = isStatic;         this.desc = ref.getPrototype();         this.file = file;         this.regSize = regSize;          positions = new ArrayList();         locals = new ArrayList();         this.codesize = codesize;         lastEntryForReg = new LocalEntry[regSize];          int idx = -1;          try {             idx = file.getStringIds().indexOf(new CstString("this"));         } catch (IllegalArgumentException ex) {             /*              * Silently tolerate not finding "this". It just means that              * no method has local variable info that looks like              * a standard instance method.              */         }          thisStringIdx = idx;     }      /**      * An entry in the resulting postions table      */     static private class PositionEntry {         /** bytecode address */         public int address;          /** line number */         public int line;          public PositionEntry(int address, int line) {             this.address = address;             this.line = line;         }     }      /**      * An entry in the resulting locals table      */     static private class LocalEntry {         /** address of event */         public int address;          /** {@code true} iff it's a local start */         public boolean isStart;          /** register number */         public int reg;          /** index of name in strings table */         public int nameIndex;          /** index of type in types table */         public int typeIndex;          /** index of type signature in strings table */         public int signatureIndex;          public LocalEntry(int address, boolean isStart, int reg, int nameIndex,                 int typeIndex, int signatureIndex) {             this.address        = address;             this.isStart        = isStart;             this.reg            = reg;             this.nameIndex      = nameIndex;             this.typeIndex      = typeIndex;             this.signatureIndex = signatureIndex;         }          public String toString() {             return String.format("[%x %s v%d %04x %04x %04x]",                     address, isStart ? "start" : "end", reg,                     nameIndex, typeIndex, signatureIndex);         }     }      /**      * Gets the decoded positions list.      * Valid after calling {@code decode}.      *      * @return positions list in ascending address order.      */     public List getPositionList() {         return positions;     }      /**      * Gets the decoded locals list, in ascending start-address order.      * Valid after calling {@code decode}.      *      * @return locals list in ascending address order.      */     public List getLocals() {         return locals;     }      /**      * Decodes the debug info sequence.      */     public void decode() {         try {             decode0();         } catch (Exception ex) {             throw ExceptionWithContext.withContext(ex,                     "...while decoding debug info");         }     }      /**      * Reads a string index. String indicies are offset by 1, and a 0 value      * in the stream (-1 as returned by this method) means "null"      *      * @return index into file's string ids table, -1 means null      * @throws IOException      */     private int readStringIndex(ByteInput bs) throws IOException {         int offsetIndex = Leb128.readUnsignedLeb128(bs);          return offsetIndex - 1;     }      /**      * Gets the register that begins the method's parameter range (including      * the 'this' parameter for non-static methods). The range continues until      * {@code regSize}      *      * @return register as noted above.      */     private int getParamBase() {         return regSize                 - desc.getParameterTypes().getWordCount() - (isStatic? 0 : 1);     }      private void decode0() throws IOException {         ByteInput bs = new ByteArrayByteInput(encoded);          line = Leb128.readUnsignedLeb128(bs);         int szParams = Leb128.readUnsignedLeb128(bs);         StdTypeList params = desc.getParameterTypes();         int curReg = getParamBase();          if (szParams != params.size()) {             throw new RuntimeException(                     "Mismatch between parameters_size and prototype");         }          if (!isStatic) {             // Start off with implicit 'this' entry             LocalEntry thisEntry =                 new LocalEntry(0, true, curReg, thisStringIdx, 0, 0);             locals.add(thisEntry);             lastEntryForReg[curReg] = thisEntry;             curReg++;         }          for (int i = 0; i < szParams; i++) {             Type paramType = params.getType(i);             LocalEntry le;              int nameIdx = readStringIndex(bs);              if (nameIdx == -1) {                 /*                  * Unnamed parameter; often but not always filled in by an                  * extended start op after the prologue                  */                 le = new LocalEntry(0, true, curReg, -1, 0, 0);             } else {                 // TODO: Final 0 should be idx of paramType.getDescriptor().                 le = new LocalEntry(0, true, curReg, nameIdx, 0, 0);             }              locals.add(le);             lastEntryForReg[curReg] = le;             curReg += paramType.getCategory();         }          for (;;) {             int opcode = bs.readByte() & 0xff;              switch (opcode) {                 case DBG_START_LOCAL: {                     int reg = Leb128.readUnsignedLeb128(bs);                     int nameIdx = readStringIndex(bs);                     int typeIdx = readStringIndex(bs);                     LocalEntry le = new LocalEntry(                             address, true, reg, nameIdx, typeIdx, 0);                      locals.add(le);                     lastEntryForReg[reg] = le;                 }                 break;                  case DBG_START_LOCAL_EXTENDED: {                     int reg = Leb128.readUnsignedLeb128(bs);                     int nameIdx = readStringIndex(bs);                     int typeIdx = readStringIndex(bs);                     int sigIdx = readStringIndex(bs);                     LocalEntry le = new LocalEntry(                             address, true, reg, nameIdx, typeIdx, sigIdx);                      locals.add(le);                     lastEntryForReg[reg] = le;                 }                 break;                  case DBG_RESTART_LOCAL: {                     int reg = Leb128.readUnsignedLeb128(bs);                     LocalEntry prevle;                     LocalEntry le;                      try {                         prevle = lastEntryForReg[reg];                          if (prevle.isStart) {                             throw new RuntimeException("nonsensical "                                     + "RESTART_LOCAL on live register v"                                     + reg);                         }                          le = new LocalEntry(address, true, reg,                                 prevle.nameIndex, prevle.typeIndex, 0);                     } catch (NullPointerException ex) {                         throw new RuntimeException(                                 "Encountered RESTART_LOCAL on new v" + reg);                     }                      locals.add(le);                     lastEntryForReg[reg] = le;                 }                 break;                  case DBG_END_LOCAL: {                     int reg = Leb128.readUnsignedLeb128(bs);                     LocalEntry prevle;                     LocalEntry le;                      try {                         prevle = lastEntryForReg[reg];                          if (!prevle.isStart) {                             throw new RuntimeException("nonsensical "                                     + "END_LOCAL on dead register v" + reg);                         }                          le = new LocalEntry(address, false, reg,                                 prevle.nameIndex, prevle.typeIndex,                                 prevle.signatureIndex);                     } catch (NullPointerException ex) {                         throw new RuntimeException(                                 "Encountered END_LOCAL on new v" + reg);                     }                      locals.add(le);                     lastEntryForReg[reg] = le;                 }                 break;                  case DBG_END_SEQUENCE:                     // all done                 return;                  case DBG_ADVANCE_PC:                     address += Leb128.readUnsignedLeb128(bs);                 break;                  case DBG_ADVANCE_LINE:                     line += Leb128.readSignedLeb128(bs);                 break;                  case DBG_SET_PROLOGUE_END:                     //TODO do something with this.                 break;                  case DBG_SET_EPILOGUE_BEGIN:                     //TODO do something with this.                 break;                  case DBG_SET_FILE:                     //TODO do something with this.                 break;                  default:                     if (opcode < DBG_FIRST_SPECIAL) {                         throw new RuntimeException(                                 "Invalid extended opcode encountered "                                         + opcode);                     }                      int adjopcode = opcode - DBG_FIRST_SPECIAL;                      address += adjopcode / DBG_LINE_RANGE;                     line += DBG_LINE_BASE + (adjopcode % DBG_LINE_RANGE);                      positions.add(new PositionEntry(address, line));                 break;              }         }     }      /**      * Validates an encoded debug info stream against data used to encode it,      * throwing an exception if they do not match. Used to validate the      * encoder.      *      * @param info encoded debug info      * @param file {@code non-null;} file to refer to during decoding      * @param ref {@code non-null;} method whose info is being decoded      * @param code {@code non-null;} original code object that was encoded      * @param isStatic whether the method is static      */     public static void validateEncode(byte[] info, DexFile file,             CstMethodRef ref, DalvCode code, boolean isStatic) {         PositionList pl = code.getPositions();         LocalList ll = code.getLocals();         DalvInsnList insns = code.getInsns();         int codeSize = insns.codeSize();         int countRegisters = insns.getRegistersSize();          try {             validateEncode0(info, codeSize, countRegisters,                     isStatic, ref, file, pl, ll);         } catch (RuntimeException ex) {             System.err.println("instructions:");             insns.debugPrint(System.err, "  ", true);             System.err.println("local list:");             ll.debugPrint(System.err, "  ");             throw ExceptionWithContext.withContext(ex,                     "while processing " + ref.toHuman());         }     }      private static void validateEncode0(byte[] info, int codeSize,             int countRegisters, boolean isStatic, CstMethodRef ref,             DexFile file, PositionList pl, LocalList ll) {         DebugInfoDecoder decoder                 = new DebugInfoDecoder(info, codeSize, countRegisters,                     isStatic, ref, file);          decoder.decode();          /*          * Go through the decoded position entries, matching up          * with original entries.          */          List decodedEntries = decoder.getPositionList();          if (decodedEntries.size() != pl.size()) {             throw new RuntimeException(                     "Decoded positions table not same size was "                     + decodedEntries.size() + " expected " + pl.size());         }          for (PositionEntry entry : decodedEntries) {             boolean found = false;             for (int i = pl.size() - 1; i >= 0; i--) {                 PositionList.Entry ple = pl.get(i);                  if (entry.line == ple.getPosition().getLine()                         && entry.address == ple.getAddress()) {                     found = true;                     break;                 }             }              if (!found) {                 throw new RuntimeException ("Could not match position entry: "                         + entry.address + ", " + entry.line);             }         }          /*          * Go through the original local list, in order, matching up          * with decoded entries.          */          List decodedLocals = decoder.getLocals();         int thisStringIdx = decoder.thisStringIdx;         int decodedSz = decodedLocals.size();         int paramBase = decoder.getParamBase();          /*          * Preflight to fill in any parameters that were skipped in          * the prologue (including an implied "this") but then          * identified by full signature.          */         for (int i = 0; i < decodedSz; i++) {             LocalEntry entry = decodedLocals.get(i);             int idx = entry.nameIndex;              if ((idx < 0) || (idx == thisStringIdx)) {                 for (int j = i + 1; j < decodedSz; j++) {                     LocalEntry e2 = decodedLocals.get(j);                     if (e2.address != 0) {                         break;                     }                     if ((entry.reg == e2.reg) && e2.isStart) {                         decodedLocals.set(i, e2);                         decodedLocals.remove(j);                         decodedSz--;                         break;                     }                 }             }         }          int origSz = ll.size();         int decodeAt = 0;         boolean problem = false;          for (int i = 0; i < origSz; i++) {             LocalList.Entry origEntry = ll.get(i);              if (origEntry.getDisposition()                     == LocalList.Disposition.END_REPLACED) {                 /*                  * The encoded list doesn't represent replacements, so                  * ignore them for the sake of comparison.                  */                 continue;             }              LocalEntry decodedEntry;              do {                 decodedEntry = decodedLocals.get(decodeAt);                 if (decodedEntry.nameIndex >= 0) {                     break;                 }                 /*                  * A negative name index means this is an anonymous                  * parameter, and we shouldn't expect to see it in the                  * original list. So, skip it.                  */                 decodeAt++;             } while (decodeAt < decodedSz);              int decodedAddress = decodedEntry.address;              if (decodedEntry.reg != origEntry.getRegister()) {                 System.err.println("local register mismatch at orig " + i +                         " / decoded " + decodeAt);                 problem = true;                 break;             }              if (decodedEntry.isStart != origEntry.isStart()) {                 System.err.println("local start/end mismatch at orig " + i +                         " / decoded " + decodeAt);                 problem = true;                 break;             }              /*              * The secondary check here accounts for the fact that a              * parameter might not be marked as starting at 0 in the              * original list.              */             if ((decodedAddress != origEntry.getAddress())                     && !((decodedAddress == 0)                             && (decodedEntry.reg >= paramBase))) {                 System.err.println("local address mismatch at orig " + i +                         " / decoded " + decodeAt);                 problem = true;                 break;             }              decodeAt++;         }          if (problem) {             System.err.println("decoded locals:");             for (LocalEntry e : decodedLocals) {                 System.err.println("  " + e);             }             throw new RuntimeException("local table problem");         }     } };data class;blob, data class, long method;t;t;t;blob,  long method;;0;12869;https://github.com/facebook/buck/blob/1bc8d383ea5cb153ca9bf4f2807e6be498648523/third-party/java/dx/src/com/android/dx/dex/file/DebugInfoDecoder.java/#L54-L596;2;2044;12869
2059;{"response": "YES I found bad smells", "detected_bad_smells": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class Header {     @SerializedName("typ")     public String type;     @SerializedName("alg")     public String algorithm;     @SerializedName("cty")     public String contentType; };data class;blob, data class;t;t;f;blob;data class;0;12962;https://github.com/vmware/xenon/blob/b6fb48b745985af2efc59b7ee0e5e7d69a289fbc/xenon-common/src/main/java/com/vmware/xenon/common/jwt/Header.java/#L23-L30;2;2059;12962
2084; {"answer": "YES I found bad smells",  "bad smells are": ["Blob", "Data Class", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  private static class FieldMetaData {     public final FieldInfo fieldInfo;     public final long numTerms;     public final long sumTotalTermFreq;     public final long sumDocFreq;     public final int docCount;     public final int longsSize;     public final FST dict;      public FieldMetaData(FieldInfo fieldInfo, long numTerms, long sumTotalTermFreq, long sumDocFreq, int docCount, int longsSize, FST fst) {       this.fieldInfo = fieldInfo;       this.numTerms = numTerms;       this.sumTotalTermFreq = sumTotalTermFreq;       this.sumDocFreq = sumDocFreq;       this.docCount = docCount;       this.longsSize = longsSize;       this.dict = fst;     }   };data class;blob, data class, long method;t;t;t;blob,  long method;;0;13082;https://github.com/apache/lucene-solr/blob/bca22d58e2d126ec6d349d375d3ea028892104e1/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.java/#L229-L247;2;2084;13082
2089;{ "message": "YES I found bad smells", "detected_bad_smells": [ "1. Blob", "2. Long Method" ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    private void resizeInstructions() {         byte[] b = code.data; // bytecode of the method         int u, v, label; // indexes in b         int i, j; // loop indexes         /*          * 1st step: As explained above, resizing an instruction may require to          * resize another one, which may require to resize yet another one, and          * so on. The first step of the algorithm consists in finding all the          * instructions that need to be resized, without modifying the code.          * This is done by the following "fix point" algorithm:          *           * Parse the code to find the jump instructions whose offset will need          * more than 2 bytes to be stored (the future offset is computed from          * the current offset and from the number of bytes that will be inserted          * or removed between the source and target instructions). For each such          * instruction, adds an entry in (a copy of) the indexes and sizes          * arrays (if this has not already been done in a previous iteration!).          *           * If at least one entry has been added during the previous step, go          * back to the beginning, otherwise stop.          *           * In fact the real algorithm is complicated by the fact that the size          * of TABLESWITCH and LOOKUPSWITCH instructions depends on their          * position in the bytecode (because of padding). In order to ensure the          * convergence of the algorithm, the number of bytes to be added or          * removed from these instructions is over estimated during the previous          * loop, and computed exactly only after the loop is finished (this          * requires another pass to parse the bytecode of the method).          */         int[] allIndexes = new int[0]; // copy of indexes         int[] allSizes = new int[0]; // copy of sizes         boolean[] resize; // instructions to be resized         int newOffset; // future offset of a jump instruction          resize = new boolean[code.length];          // 3 = loop again, 2 = loop ended, 1 = last pass, 0 = done         int state = 3;         do {             if (state == 3) {                 state = 2;             }             u = 0;             while (u < b.length) {                 int opcode = b[u] & 0xFF; // opcode of current instruction                 int insert = 0; // bytes to be added after this instruction                  switch (ClassWriter.TYPE[opcode]) {                 case ClassWriter.NOARG_INSN:                 case ClassWriter.IMPLVAR_INSN:                     u += 1;                     break;                 case ClassWriter.LABEL_INSN:                     if (opcode > 201) {                         // converts temporary opcodes 202 to 217, 218 and                         // 219 to IFEQ ... JSR (inclusive), IFNULL and                         // IFNONNULL                         opcode = opcode < 218 ? opcode - 49 : opcode - 20;                         label = u + readUnsignedShort(b, u + 1);                     } else {                         label = u + readShort(b, u + 1);                     }                     newOffset = getNewOffset(allIndexes, allSizes, u, label);                     if (newOffset < Short.MIN_VALUE                             || newOffset > Short.MAX_VALUE) {                         if (!resize[u]) {                             if (opcode == Opcodes.GOTO || opcode == Opcodes.JSR) {                                 // two additional bytes will be required to                                 // replace this GOTO or JSR instruction with                                 // a GOTO_W or a JSR_W                                 insert = 2;                             } else {                                 // five additional bytes will be required to                                 // replace this IFxxx  instruction with                                 // IFNOTxxx  GOTO_W , where IFNOTxxx                                 // is the "opposite" opcode of IFxxx (i.e.,                                 // IFNE for IFEQ) and where  designates                                 // the instruction just after the GOTO_W.                                 insert = 5;                             }                             resize[u] = true;                         }                     }                     u += 3;                     break;                 case ClassWriter.LABELW_INSN:                     u += 5;                     break;                 case ClassWriter.TABL_INSN:                     if (state == 1) {                         // true number of bytes to be added (or removed)                         // from this instruction = (future number of padding                         // bytes - current number of padding byte) -                         // previously over estimated variation =                         // = ((3 - newOffset%4) - (3 - u%4)) - u%4                         // = (-newOffset%4 + u%4) - u%4                         // = -(newOffset & 3)                         newOffset = getNewOffset(allIndexes, allSizes, 0, u);                         insert = -(newOffset & 3);                     } else if (!resize[u]) {                         // over estimation of the number of bytes to be                         // added to this instruction = 3 - current number                         // of padding bytes = 3 - (3 - u%4) = u%4 = u & 3                         insert = u & 3;                         resize[u] = true;                     }                     // skips instruction                     u = u + 4 - (u & 3);                     u += 4 * (readInt(b, u + 8) - readInt(b, u + 4) + 1) + 12;                     break;                 case ClassWriter.LOOK_INSN:                     if (state == 1) {                         // like TABL_INSN                         newOffset = getNewOffset(allIndexes, allSizes, 0, u);                         insert = -(newOffset & 3);                     } else if (!resize[u]) {                         // like TABL_INSN                         insert = u & 3;                         resize[u] = true;                     }                     // skips instruction                     u = u + 4 - (u & 3);                     u += 8 * readInt(b, u + 4) + 8;                     break;                 case ClassWriter.WIDE_INSN:                     opcode = b[u + 1] & 0xFF;                     if (opcode == Opcodes.IINC) {                         u += 6;                     } else {                         u += 4;                     }                     break;                 case ClassWriter.VAR_INSN:                 case ClassWriter.SBYTE_INSN:                 case ClassWriter.LDC_INSN:                     u += 2;                     break;                 case ClassWriter.SHORT_INSN:                 case ClassWriter.LDCW_INSN:                 case ClassWriter.FIELDORMETH_INSN:                 case ClassWriter.TYPE_INSN:                 case ClassWriter.IINC_INSN:                     u += 3;                     break;                 case ClassWriter.ITFMETH_INSN:                 case ClassWriter.INDYMETH_INSN:                     u += 5;                     break;                 // case ClassWriter.MANA_INSN:                 default:                     u += 4;                     break;                 }                 if (insert != 0) {                     // adds a new (u, insert) entry in the allIndexes and                     // allSizes arrays                     int[] newIndexes = new int[allIndexes.length + 1];                     int[] newSizes = new int[allSizes.length + 1];                     System.arraycopy(allIndexes, 0, newIndexes, 0,                             allIndexes.length);                     System.arraycopy(allSizes, 0, newSizes, 0, allSizes.length);                     newIndexes[allIndexes.length] = u;                     newSizes[allSizes.length] = insert;                     allIndexes = newIndexes;                     allSizes = newSizes;                     if (insert > 0) {                         state = 3;                     }                 }             }             if (state < 3) {                 --state;             }         } while (state != 0);          // 2nd step:         // copies the bytecode of the method into a new bytevector, updates the         // offsets, and inserts (or removes) bytes as requested.          ByteVector newCode = new ByteVector(code.length);          u = 0;         while (u < code.length) {             int opcode = b[u] & 0xFF;             switch (ClassWriter.TYPE[opcode]) {             case ClassWriter.NOARG_INSN:             case ClassWriter.IMPLVAR_INSN:                 newCode.putByte(opcode);                 u += 1;                 break;             case ClassWriter.LABEL_INSN:                 if (opcode > 201) {                     // changes temporary opcodes 202 to 217 (inclusive), 218                     // and 219 to IFEQ ... JSR (inclusive), IFNULL and                     // IFNONNULL                     opcode = opcode < 218 ? opcode - 49 : opcode - 20;                     label = u + readUnsignedShort(b, u + 1);                 } else {                     label = u + readShort(b, u + 1);                 }                 newOffset = getNewOffset(allIndexes, allSizes, u, label);                 if (resize[u]) {                     // replaces GOTO with GOTO_W, JSR with JSR_W and IFxxx                     //  with IFNOTxxx  GOTO_W , where IFNOTxxx is                     // the "opposite" opcode of IFxxx (i.e., IFNE for IFEQ)                     // and where  designates the instruction just after                     // the GOTO_W.                     if (opcode == Opcodes.GOTO) {                         newCode.putByte(200); // GOTO_W                     } else if (opcode == Opcodes.JSR) {                         newCode.putByte(201); // JSR_W                     } else {                         newCode.putByte(opcode <= 166 ? ((opcode + 1) ^ 1) - 1                                 : opcode ^ 1);                         newCode.putShort(8); // jump offset                         newCode.putByte(200); // GOTO_W                         // newOffset now computed from start of GOTO_W                         newOffset -= 3;                     }                     newCode.putInt(newOffset);                 } else {                     newCode.putByte(opcode);                     newCode.putShort(newOffset);                 }                 u += 3;                 break;             case ClassWriter.LABELW_INSN:                 label = u + readInt(b, u + 1);                 newOffset = getNewOffset(allIndexes, allSizes, u, label);                 newCode.putByte(opcode);                 newCode.putInt(newOffset);                 u += 5;                 break;             case ClassWriter.TABL_INSN:                 // skips 0 to 3 padding bytes                 v = u;                 u = u + 4 - (v & 3);                 // reads and copies instruction                 newCode.putByte(Opcodes.TABLESWITCH);                 newCode.putByteArray(null, 0, (4 - newCode.length % 4) % 4);                 label = v + readInt(b, u);                 u += 4;                 newOffset = getNewOffset(allIndexes, allSizes, v, label);                 newCode.putInt(newOffset);                 j = readInt(b, u);                 u += 4;                 newCode.putInt(j);                 j = readInt(b, u) - j + 1;                 u += 4;                 newCode.putInt(readInt(b, u - 4));                 for (; j > 0; --j) {                     label = v + readInt(b, u);                     u += 4;                     newOffset = getNewOffset(allIndexes, allSizes, v, label);                     newCode.putInt(newOffset);                 }                 break;             case ClassWriter.LOOK_INSN:                 // skips 0 to 3 padding bytes                 v = u;                 u = u + 4 - (v & 3);                 // reads and copies instruction                 newCode.putByte(Opcodes.LOOKUPSWITCH);                 newCode.putByteArray(null, 0, (4 - newCode.length % 4) % 4);                 label = v + readInt(b, u);                 u += 4;                 newOffset = getNewOffset(allIndexes, allSizes, v, label);                 newCode.putInt(newOffset);                 j = readInt(b, u);                 u += 4;                 newCode.putInt(j);                 for (; j > 0; --j) {                     newCode.putInt(readInt(b, u));                     u += 4;                     label = v + readInt(b, u);                     u += 4;                     newOffset = getNewOffset(allIndexes, allSizes, v, label);                     newCode.putInt(newOffset);                 }                 break;             case ClassWriter.WIDE_INSN:                 opcode = b[u + 1] & 0xFF;                 if (opcode == Opcodes.IINC) {                     newCode.putByteArray(b, u, 6);                     u += 6;                 } else {                     newCode.putByteArray(b, u, 4);                     u += 4;                 }                 break;             case ClassWriter.VAR_INSN:             case ClassWriter.SBYTE_INSN:             case ClassWriter.LDC_INSN:                 newCode.putByteArray(b, u, 2);                 u += 2;                 break;             case ClassWriter.SHORT_INSN:             case ClassWriter.LDCW_INSN:             case ClassWriter.FIELDORMETH_INSN:             case ClassWriter.TYPE_INSN:             case ClassWriter.IINC_INSN:                 newCode.putByteArray(b, u, 3);                 u += 3;                 break;             case ClassWriter.ITFMETH_INSN:             case ClassWriter.INDYMETH_INSN:                 newCode.putByteArray(b, u, 5);                 u += 5;                 break;             // case MANA_INSN:             default:                 newCode.putByteArray(b, u, 4);                 u += 4;                 break;             }         }          // recomputes the stack map frames         if (frameCount > 0) {             if (compute == FRAMES) {                 frameCount = 0;                 stackMap = null;                 previousFrame = null;                 frame = null;                 Frame f = new Frame();                 f.owner = labels;                 Type[] args = Type.getArgumentTypes(descriptor);                 f.initInputFrame(cw, access, args, maxLocals);                 visitFrame(f);                 Label l = labels;                 while (l != null) {                     /*                      * here we need the original label position. getNewOffset                      * must therefore never have been called for this label.                      */                     u = l.position - 3;                     if ((l.status & Label.STORE) != 0 || (u >= 0 && resize[u])) {                         getNewOffset(allIndexes, allSizes, l);                         // TODO update offsets in UNINITIALIZED values                         visitFrame(l.frame);                     }                     l = l.successor;                 }             } else {                 /*                  * Resizing an existing stack map frame table is really hard.                  * Not only the table must be parsed to update the offets, but                  * new frames may be needed for jump instructions that were                  * inserted by this method. And updating the offsets or                  * inserting frames can change the format of the following                  * frames, in case of packed frames. In practice the whole table                  * must be recomputed. For this the frames are marked as                  * potentially invalid. This will cause the whole class to be                  * reread and rewritten with the COMPUTE_FRAMES option (see the                  * ClassWriter.toByteArray method). This is not very efficient                  * but is much easier and requires much less code than any other                  * method I can think of.                  */                 cw.invalidFrames = true;             }         }         // updates the exception handler block labels         Handler h = firstHandler;         while (h != null) {             getNewOffset(allIndexes, allSizes, h.start);             getNewOffset(allIndexes, allSizes, h.end);             getNewOffset(allIndexes, allSizes, h.handler);             h = h.next;         }         // updates the instructions addresses in the         // local var and line number tables         for (i = 0; i < 2; ++i) {             ByteVector bv = i == 0 ? localVar : localVarType;             if (bv != null) {                 b = bv.data;                 u = 0;                 while (u < bv.length) {                     label = readUnsignedShort(b, u);                     newOffset = getNewOffset(allIndexes, allSizes, 0, label);                     writeShort(b, u, newOffset);                     label += readUnsignedShort(b, u + 2);                     newOffset = getNewOffset(allIndexes, allSizes, 0, label)                             - newOffset;                     writeShort(b, u + 2, newOffset);                     u += 10;                 }             }         }         if (lineNumber != null) {             b = lineNumber.data;             u = 0;             while (u < lineNumber.length) {                 writeShort(                         b,                         u,                         getNewOffset(allIndexes, allSizes, 0,                                 readUnsignedShort(b, u)));                 u += 4;             }         }         // updates the labels of the other attributes         Attribute attr = cattrs;         while (attr != null) {             Label[] labels = attr.getLabels();             if (labels != null) {                 for (i = labels.length - 1; i >= 0; --i) {                     getNewOffset(allIndexes, allSizes, labels[i]);                 }             }             attr = attr.next;         }          // replaces old bytecodes with new ones         code = newCode;     };long method;1. blob, 2. long method;t;t;t;1. blob;;0;13117;https://github.com/apache/tajo/blob/fb326195083959014c82c10187cb46de91ece33f/tajo-thirdparty/asm/src/main/java/org/apache/tajo/org/objectweb/asm/MethodWriter.java/#L2145-L2559;2;2089;13117
2122;{ 	"message": "YES I found bad smells", 	"detected_bad_smells": [ 		"Blob", 		"Data Class", 		"Long Method" 	] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class LuceneIndexForPartitionedRegion extends LuceneIndexImpl {   protected Region fileAndChunkRegion;   protected final FileSystemStats fileSystemStats;    public static final String FILES_REGION_SUFFIX = ".files";    private final ExecutorService waitingThreadPoolFromDM;    public LuceneIndexForPartitionedRegion(String indexName, String regionPath, InternalCache cache) {     super(indexName, regionPath, cache);     this.waitingThreadPoolFromDM = cache.getDistributionManager().getWaitingThreadPool();      final String statsName = indexName + "-" + regionPath;     this.fileSystemStats = new FileSystemStats(cache.getDistributedSystem(), statsName);   }    @Override   protected RepositoryManager createRepositoryManager(LuceneSerializer luceneSerializer) {     LuceneSerializer mapper = luceneSerializer;     if (mapper == null) {       mapper = new HeterogeneousLuceneSerializer();     }     PartitionedRepositoryManager partitionedRepositoryManager =         new PartitionedRepositoryManager(this, mapper, this.waitingThreadPoolFromDM);     return partitionedRepositoryManager;   }    @Override   public boolean isIndexingInProgress() {     PartitionedRegion userRegion = (PartitionedRegion) cache.getRegion(this.getRegionPath());     Set fileRegionPrimaryBucketIds =         this.getFileAndChunkRegion().getDataStore().getAllLocalPrimaryBucketIds();     for (Integer bucketId : fileRegionPrimaryBucketIds) {       BucketRegion userBucket = userRegion.getDataStore().getLocalBucketById(bucketId);       if (!userBucket.isEmpty() && !this.isIndexAvailable(bucketId)) {         return true;       }     }     return false;   }    @Override   protected void createLuceneListenersAndFileChunkRegions(       PartitionedRepositoryManager partitionedRepositoryManager) {     partitionedRepositoryManager.setUserRegionForRepositoryManager((PartitionedRegion) dataRegion);     RegionShortcut regionShortCut;     final boolean withPersistence = withPersistence();     RegionAttributes regionAttributes = dataRegion.getAttributes();     final boolean withStorage = regionAttributes.getPartitionAttributes().getLocalMaxMemory() > 0;      // TODO: 1) dataRegion should be withStorage     // 2) Persistence to Persistence     // 3) Replicate to Replicate, Partition To Partition     // 4) Offheap to Offheap     if (!withStorage) {       regionShortCut = RegionShortcut.PARTITION_PROXY;     } else if (withPersistence) {       // TODO: add PartitionedRegionAttributes instead       regionShortCut = RegionShortcut.PARTITION_PERSISTENT;     } else {       regionShortCut = RegionShortcut.PARTITION;     }      // create PR fileAndChunkRegion, but not to create its buckets for now     final String fileRegionName = createFileRegionName();     PartitionAttributes partitionAttributes = dataRegion.getPartitionAttributes();     DistributionManager dm = this.cache.getInternalDistributedSystem().getDistributionManager();     LuceneBucketListener lucenePrimaryBucketListener =         new LuceneBucketListener(partitionedRepositoryManager, dm);      if (!fileRegionExists(fileRegionName)) {       fileAndChunkRegion = createRegion(fileRegionName, regionShortCut, this.regionPath,           partitionAttributes, regionAttributes, lucenePrimaryBucketListener);     }      fileSystemStats         .setBytesSupplier(() -> getFileAndChunkRegion().getPrStats().getDataStoreBytesInUse());    }    public PartitionedRegion getFileAndChunkRegion() {     return (PartitionedRegion) fileAndChunkRegion;   }    public FileSystemStats getFileSystemStats() {     return fileSystemStats;   }    boolean fileRegionExists(String fileRegionName) {     return cache.getRegion(fileRegionName) != null;   }    public String createFileRegionName() {     return LuceneServiceImpl.getUniqueIndexRegionName(indexName, regionPath, FILES_REGION_SUFFIX);   }    private PartitionAttributesFactory configureLuceneRegionAttributesFactory(       PartitionAttributesFactory attributesFactory,       PartitionAttributes dataRegionAttributes) {     attributesFactory.setTotalNumBuckets(dataRegionAttributes.getTotalNumBuckets());     attributesFactory.setRedundantCopies(dataRegionAttributes.getRedundantCopies());     attributesFactory.setPartitionResolver(getPartitionResolver(dataRegionAttributes));     attributesFactory.setRecoveryDelay(dataRegionAttributes.getRecoveryDelay());     attributesFactory.setStartupRecoveryDelay(dataRegionAttributes.getStartupRecoveryDelay());     return attributesFactory;   }    private PartitionResolver getPartitionResolver(PartitionAttributes dataRegionAttributes) {     if (dataRegionAttributes.getPartitionResolver() instanceof FixedPartitionResolver) {       return new BucketTargetingFixedResolver();     } else {       return new BucketTargetingResolver();     }   }    protected  Region createRegion(final String regionName,       final RegionShortcut regionShortCut, final String colocatedWithRegionName,       final PartitionAttributes partitionAttributes, final RegionAttributes regionAttributes,       PartitionListener lucenePrimaryBucketListener) {     PartitionAttributesFactory partitionAttributesFactory = new PartitionAttributesFactory();     if (lucenePrimaryBucketListener != null) {       partitionAttributesFactory.addPartitionListener(lucenePrimaryBucketListener);     }     partitionAttributesFactory.setColocatedWith(colocatedWithRegionName);     configureLuceneRegionAttributesFactory(partitionAttributesFactory, partitionAttributes);      // Create AttributesFactory based on input RegionShortcut     RegionAttributes baseAttributes = this.cache.getRegionAttributes(regionShortCut.toString());     AttributesFactory factory = new AttributesFactory(baseAttributes);     factory.setPartitionAttributes(partitionAttributesFactory.create());     if (regionAttributes.getDataPolicy().withPersistence()) {       factory.setDiskStoreName(regionAttributes.getDiskStoreName());     }     RegionAttributes attributes = factory.create();      return createRegion(regionName, attributes);   }    public void close() {}    @Override   public void dumpFiles(final String directory) {     ResultCollector results = FunctionService.onRegion(getDataRegion())         .setArguments(new String[] {directory, indexName}).execute(DumpDirectoryFiles.ID);     results.getResult();   }    @Override   public void destroy(boolean initiator) {     if (logger.isDebugEnabled()) {       logger.debug("Destroying index regionPath=" + regionPath + "; indexName=" + indexName           + "; initiator=" + initiator);     }      // Invoke super destroy to remove the extension and async event queue     super.destroy(initiator);      // Destroy index on remote members if necessary     if (initiator) {       destroyOnRemoteMembers();     }      // Destroy the file region (colocated with the application region) if necessary     // localDestroyRegion can't be used because locally destroying regions is not supported on     // colocated regions     if (initiator) {       try {         fileAndChunkRegion.destroyRegion();         if (logger.isDebugEnabled()) {           logger.debug("Destroyed fileAndChunkRegion=" + fileAndChunkRegion.getName());         }       } catch (RegionDestroyedException e) {         if (logger.isDebugEnabled()) {           logger.debug("Already destroyed fileAndChunkRegion=" + fileAndChunkRegion.getName());         }       }     }      if (logger.isDebugEnabled()) {       logger.debug("Destroyed index regionPath=" + regionPath + "; indexName=" + indexName           + "; initiator=" + initiator);     }   }    @Override   public boolean isIndexAvailable(int id) {     PartitionedRegion fileAndChunkRegion = getFileAndChunkRegion();     return (fileAndChunkRegion.get(IndexRepositoryFactory.APACHE_GEODE_INDEX_COMPLETE, id) != null         || !LuceneServiceImpl.LUCENE_REINDEX);   }    private void destroyOnRemoteMembers() {     DistributionManager dm = getDataRegion().getDistributionManager();     Set recipients = dm.getOtherNormalDistributionManagerIds();     if (!recipients.isEmpty()) {       if (logger.isDebugEnabled()) {         logger.debug("LuceneIndexForPartitionedRegion: About to send destroy message recipients="             + recipients);       }       ReplyProcessor21 processor = new ReplyProcessor21(dm, recipients);       DestroyLuceneIndexMessage message = new DestroyLuceneIndexMessage(recipients,           processor.getProcessorId(), regionPath, indexName);       dm.putOutgoing(message);       if (logger.isDebugEnabled()) {         logger.debug("LuceneIndexForPartitionedRegion: Sent message recipients=" + recipients);       }       try {         processor.waitForReplies();       } catch (ReplyException e) {         Throwable cause = e.getCause();         if (cause instanceof IllegalArgumentException) {           // If the IllegalArgumentException is index not found, then its ok; otherwise rethrow it.           String fullRegionPath =               regionPath.startsWith(Region.SEPARATOR) ? regionPath : Region.SEPARATOR + regionPath;           String indexNotFoundMessage = String.format("Lucene index %s was not found in region %s",               indexName, fullRegionPath);           if (!cause.getLocalizedMessage().equals(indexNotFoundMessage)) {             throw e;           }         } else if (!(cause instanceof CancelException)) {           throw e;         }       } catch (InterruptedException e) {         dm.getCancelCriterion().checkCancelInProgress(e);         Thread.currentThread().interrupt();       }     }   } };data class;blob, data class, long method;t;t;f;blob,  long method;data class;0;13214;https://github.com/apache/geode/blob/8fd839e8b73e40bd2dfd14f331b587431bd35a66/geode-lucene/src/main/java/org/apache/geode/cache/lucene/internal/LuceneIndexForPartitionedRegion.java/#L49-L277;2;2122;13214
2130;     {       "message": "YES I found bad smells",       "bad smells are": [         "Long Method",         "Blob"       ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    public static byte[] getIP() {         try {             Enumeration allNetInterfaces = NetworkInterface.getNetworkInterfaces();             InetAddress ip = null;             byte[] internalIP = null;             while (allNetInterfaces.hasMoreElements()) {                 NetworkInterface netInterface = (NetworkInterface) allNetInterfaces.nextElement();                 Enumeration addresses = netInterface.getInetAddresses();                 while (addresses.hasMoreElements()) {                     ip = (InetAddress) addresses.nextElement();                     if (ip != null && ip instanceof Inet4Address) {                         byte[] ipByte = ip.getAddress();                         if (ipByte.length == 4) {                             if (ipCheck(ipByte)) {                                 if (!isInternalIP(ipByte)) {                                     return ipByte;                                 } else if (internalIP == null) {                                     internalIP = ipByte;                                 }                             }                         }                     }                 }             }             if (internalIP != null) {                 return internalIP;             } else {                 throw new RuntimeException("Can not get local ip");             }         } catch (Exception e) {             throw new RuntimeException("Can not get local ip", e);         }     };long method;long method, blob;t;t;t; blob;;0;13230;https://github.com/apache/rocketmq/blob/971fa8ed8b209b39bdfe41c57cd64576d244e6bd/common/src/main/java/org/apache/rocketmq/common/UtilAll.java/#L484-L516;2;2130;13230
2152;{   "output": "YES I found bad smells",   "detected_bad_smells": [     "Blob",     "Long Method"   ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@InterfaceAudience.Public @InterfaceStability.Evolving public class Cluster {      @InterfaceStability.Evolving   public static enum JobTrackerStatus {INITIALIZING, RUNNING};      private ClientProtocolProvider clientProtocolProvider;   private ClientProtocol client;   private UserGroupInformation ugi;   private Configuration conf;   private FileSystem fs = null;   private Path sysDir = null;   private Path stagingAreaDir = null;   private Path jobHistoryDir = null;   private static final Log LOG = LogFactory.getLog(Cluster.class);    private static ServiceLoader frameworkLoader =       ServiceLoader.load(ClientProtocolProvider.class);      static {     ConfigUtil.loadResources();   }      public Cluster(Configuration conf) throws IOException {     this(null, conf);   }    public Cluster(InetSocketAddress jobTrackAddr, Configuration conf)        throws IOException {     this.conf = conf;     this.ugi = UserGroupInformation.getCurrentUser();     initialize(jobTrackAddr, conf);   }      private void initialize(InetSocketAddress jobTrackAddr, Configuration conf)       throws IOException {      synchronized (frameworkLoader) {       for (ClientProtocolProvider provider : frameworkLoader) {         LOG.debug("Trying ClientProtocolProvider : "             + provider.getClass().getName());         ClientProtocol clientProtocol = null;          try {           if (jobTrackAddr == null) {             clientProtocol = provider.create(conf);           } else {             clientProtocol = provider.create(jobTrackAddr, conf);           }            if (clientProtocol != null) {             clientProtocolProvider = provider;             client = clientProtocol;             LOG.debug("Picked " + provider.getClass().getName()                 + " as the ClientProtocolProvider");             break;           }           else {             LOG.debug("Cannot pick " + provider.getClass().getName()                 + " as the ClientProtocolProvider - returned null protocol");           }         }          catch (Exception e) {           LOG.info("Failed to use " + provider.getClass().getName()               + " due to error: " + e.getMessage());         }       }     }      if (null == clientProtocolProvider || null == client) {       throw new IOException(           "Cannot initialize Cluster. Please check your configuration for "               + MRConfig.FRAMEWORK_NAME               + " and the correspond server addresses.");     }   }    ClientProtocol getClient() {     return client;   }      Configuration getConf() {     return conf;   }      /**    * Close the Cluster.    */   public synchronized void close() throws IOException {     clientProtocolProvider.close(client);   }    private Job[] getJobs(JobStatus[] stats) throws IOException {     List jobs = new ArrayList();     for (JobStatus stat : stats) {       jobs.add(Job.getInstance(this, stat, new JobConf(stat.getJobFile())));     }     return jobs.toArray(new Job[0]);   }    /**    * Get the file system where job-specific files are stored    *     * @return object of FileSystem    * @throws IOException    * @throws InterruptedException    */   public synchronized FileSystem getFileSystem()        throws IOException, InterruptedException {     if (this.fs == null) {       try {         this.fs = ugi.doAs(new PrivilegedExceptionAction() {           public FileSystem run() throws IOException, InterruptedException {             final Path sysDir = new Path(client.getSystemDir());             return sysDir.getFileSystem(getConf());           }         });       } catch (InterruptedException e) {         throw new RuntimeException(e);       }     }     return fs;   }    /**    * Get job corresponding to jobid.    *     * @param jobId    * @return object of {@link Job}    * @throws IOException    * @throws InterruptedException    */   public Job getJob(JobID jobId) throws IOException, InterruptedException {     JobStatus status = client.getJobStatus(jobId);     if (status != null) {       JobConf conf;       try {         conf = new JobConf(status.getJobFile());       } catch (RuntimeException ex) {         // If job file doesn't exist it means we can't find the job         if (ex.getCause() instanceof FileNotFoundException) {           return null;         } else {           throw ex;         }       }       return Job.getInstance(this, status, conf);     }     return null;   }      /**    * Get all the queues in cluster.    *     * @return array of {@link QueueInfo}    * @throws IOException    * @throws InterruptedException    */   public QueueInfo[] getQueues() throws IOException, InterruptedException {     return client.getQueues();   }      /**    * Get queue information for the specified name.    *     * @param name queuename    * @return object of {@link QueueInfo}    * @throws IOException    * @throws InterruptedException    */   public QueueInfo getQueue(String name)        throws IOException, InterruptedException {     return client.getQueue(name);   }    /**    * Get log parameters for the specified jobID or taskAttemptID    * @param jobID the job id.    * @param taskAttemptID the task attempt id. Optional.    * @return the LogParams    * @throws IOException    * @throws InterruptedException    */   public LogParams getLogParams(JobID jobID, TaskAttemptID taskAttemptID)       throws IOException, InterruptedException {     return client.getLogFileParams(jobID, taskAttemptID);   }    /**    * Get current cluster status.    *     * @return object of {@link ClusterMetrics}    * @throws IOException    * @throws InterruptedException    */   public ClusterMetrics getClusterStatus() throws IOException, InterruptedException {     return client.getClusterMetrics();   }      /**    * Get all active trackers in the cluster.    *     * @return array of {@link TaskTrackerInfo}    * @throws IOException    * @throws InterruptedException    */   public TaskTrackerInfo[] getActiveTaskTrackers()        throws IOException, InterruptedException  {     return client.getActiveTrackers();   }      /**    * Get blacklisted trackers.    *     * @return array of {@link TaskTrackerInfo}    * @throws IOException    * @throws InterruptedException    */   public TaskTrackerInfo[] getBlackListedTaskTrackers()        throws IOException, InterruptedException  {     return client.getBlacklistedTrackers();   }      /**    * Get all the jobs in cluster.    *     * @return array of {@link Job}    * @throws IOException    * @throws InterruptedException    * @deprecated Use {@link #getAllJobStatuses()} instead.    */   @Deprecated   public Job[] getAllJobs() throws IOException, InterruptedException {     return getJobs(client.getAllJobs());   }    /**    * Get job status for all jobs in the cluster.    * @return job status for all jobs in cluster    * @throws IOException    * @throws InterruptedException    */   public JobStatus[] getAllJobStatuses() throws IOException, InterruptedException {     return client.getAllJobs();   }    /**    * Grab the jobtracker system directory path where     * job-specific files will  be placed.    *     * @return the system directory where job-specific files are to be placed.    */   public Path getSystemDir() throws IOException, InterruptedException {     if (sysDir == null) {       sysDir = new Path(client.getSystemDir());     }     return sysDir;   }      /**    * Grab the jobtracker's view of the staging directory path where     * job-specific files will  be placed.    *     * @return the staging directory where job-specific files are to be placed.    */   public Path getStagingAreaDir() throws IOException, InterruptedException {     if (stagingAreaDir == null) {       stagingAreaDir = new Path(client.getStagingAreaDir());     }     return stagingAreaDir;   }    /**    * Get the job history file path for a given job id. The job history file at     * this path may or may not be existing depending on the job completion state.    * The file is present only for the completed jobs.    * @param jobId the JobID of the job submitted by the current user.    * @return the file path of the job history file    * @throws IOException    * @throws InterruptedException    */   public String getJobHistoryUrl(JobID jobId) throws IOException,      InterruptedException {     if (jobHistoryDir == null) {       jobHistoryDir = new Path(client.getJobHistoryDir());     }     return new Path(jobHistoryDir, jobId.toString() + "_"                     + ugi.getShortUserName()).toString();   }    /**    * Gets the Queue ACLs for current user    * @return array of QueueAclsInfo object for current user.    * @throws IOException    */   public QueueAclsInfo[] getQueueAclsForCurrentUser()        throws IOException, InterruptedException  {     return client.getQueueAclsForCurrentUser();   }    /**    * Gets the root level queues.    * @return array of JobQueueInfo object.    * @throws IOException    */   public QueueInfo[] getRootQueues() throws IOException, InterruptedException {     return client.getRootQueues();   }      /**    * Returns immediate children of queueName.    * @param queueName    * @return array of JobQueueInfo which are children of queueName    * @throws IOException    */   public QueueInfo[] getChildQueues(String queueName)        throws IOException, InterruptedException {     return client.getChildQueues(queueName);   }      /**    * Get the JobTracker's status.    *     * @return {@link JobTrackerStatus} of the JobTracker    * @throws IOException    * @throws InterruptedException    */   public JobTrackerStatus getJobTrackerStatus() throws IOException,       InterruptedException {     return client.getJobTrackerStatus();   }      /**    * Get the tasktracker expiry interval for the cluster    * @return the expiry interval in msec    */   public long getTaskTrackerExpiryInterval() throws IOException,       InterruptedException {     return client.getTaskTrackerExpiryInterval();   }    /**    * Get a delegation token for the user from the JobTracker.    * @param renewer the user who can renew the token    * @return the new token    * @throws IOException    */   public Token        getDelegationToken(Text renewer) throws IOException, InterruptedException{     // client has already set the service     return client.getDelegationToken(renewer);   }    /**    * Renew a delegation token    * @param token the token to renew    * @return the new expiration time    * @throws InvalidToken    * @throws IOException    * @deprecated Use {@link Token#renew} instead    */   public long renewDelegationToken(Token token                                    ) throws InvalidToken, IOException,                                             InterruptedException {     return token.renew(getConf());   }    /**    * Cancel a delegation token from the JobTracker    * @param token the token to cancel    * @throws IOException    * @deprecated Use {@link Token#cancel} instead    */   public void cancelDelegationToken(Token token                                     ) throws IOException,                                              InterruptedException {     token.cancel(getConf());   }  };data class;blob, long method;t;t;f;blob,  long method;data class;0;13294;https://github.com/apache/hadoop-common/blob/42a61a4fbc88303913c4681f0d40ffcc737e70b5/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Cluster.java/#L50-L429;2;2152;13294
2155; { "answer": "YES I found bad smells", "bad smells are": ["Blob"] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@ThreadSafe public final class ServiceLocation {      private final String location;     private final String name;      ServiceLocation(Element serviceLocationElement, String location) throws ServiceConfigException {         String name = serviceLocationElement.getAttribute("name").intern();         if (name.isEmpty()) {             throw new ServiceConfigException(" element name attribute is empty");         }         this.name = name;         if (location.isEmpty()) {             throw new ServiceConfigException(" element location attribute is empty");         }         this.location = location;     }      public String getLocation() {         return location;     }      public String getName() {         return name;     } };data class;blob;t;t;f;blob;data class;0;13299;https://github.com/apache/ofbiz/blob/7ba7f3c2e16df6c8db0d8114e124957199cea1ff/framework/service/src/main/java/org/apache/ofbiz/service/config/model/ServiceLocation.java/#L28-L53;2;2155;13299
2167;   {     "answer": "YES, I found bad smells",     "bad smells are": [       "Blob"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class DruidPooledCallableStatement extends DruidPooledPreparedStatement implements CallableStatement {      private CallableStatement stmt;      public DruidPooledCallableStatement(DruidPooledConnection conn, PreparedStatementHolder holder) throws SQLException{         super(conn, holder);         this.stmt = (CallableStatement) holder.statement;     }      public CallableStatement getCallableStatementRaw() {         return stmt;     }      @Override     public void registerOutParameter(int parameterIndex, int sqlType) throws SQLException {         try {             stmt.registerOutParameter(parameterIndex, sqlType);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void registerOutParameter(int parameterIndex, int sqlType, int scale) throws SQLException {         try {             stmt.registerOutParameter(parameterIndex, sqlType, scale);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public boolean wasNull() throws SQLException {         try {             return stmt.wasNull();         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public String getString(int parameterIndex) throws SQLException {         try {             return stmt.getString(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public boolean getBoolean(int parameterIndex) throws SQLException {         try {             return stmt.getBoolean(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public byte getByte(int parameterIndex) throws SQLException {         try {             return stmt.getByte(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public short getShort(int parameterIndex) throws SQLException {         try {             return stmt.getShort(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public int getInt(int parameterIndex) throws SQLException {         try {             return stmt.getInt(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public long getLong(int parameterIndex) throws SQLException {         try {             return stmt.getLong(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public float getFloat(int parameterIndex) throws SQLException {         try {             return stmt.getFloat(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public double getDouble(int parameterIndex) throws SQLException {         try {             return stmt.getDouble(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     @Deprecated     public BigDecimal getBigDecimal(int parameterIndex, int scale) throws SQLException {         try {             return stmt.getBigDecimal(parameterIndex, scale);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public byte[] getBytes(int parameterIndex) throws SQLException {         try {             return stmt.getBytes(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Date getDate(int parameterIndex) throws SQLException {         try {             return stmt.getDate(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Time getTime(int parameterIndex) throws SQLException {         try {             return stmt.getTime(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Timestamp getTimestamp(int parameterIndex) throws SQLException {         try {             return stmt.getTimestamp(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Object getObject(int parameterIndex) throws SQLException {         try {             Object obj = stmt.getObject(parameterIndex);             return wrapObject(obj);         } catch (Throwable t) {             throw checkException(t);         }     }      private Object wrapObject(Object obj) {         if (obj instanceof ResultSet) {             ResultSet rs = (ResultSet) obj;                          DruidPooledResultSet poolableResultSet = new DruidPooledResultSet(this, rs);             addResultSetTrace(poolableResultSet);                          obj = poolableResultSet;         }                  return obj;     }      @Override     public BigDecimal getBigDecimal(int parameterIndex) throws SQLException {         try {             return stmt.getBigDecimal(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Object getObject(int parameterIndex, java.util.Map> map) throws SQLException {         try {             Object obj = stmt.getObject(parameterIndex, map);             return wrapObject(obj);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Ref getRef(int parameterIndex) throws SQLException {         try {             return stmt.getRef(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Blob getBlob(int parameterIndex) throws SQLException {         try {             return stmt.getBlob(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Clob getClob(int parameterIndex) throws SQLException {         try {             return stmt.getClob(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Array getArray(int parameterIndex) throws SQLException {         try {             return stmt.getArray(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Date getDate(int parameterIndex, Calendar cal) throws SQLException {         try {             return stmt.getDate(parameterIndex, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Time getTime(int parameterIndex, Calendar cal) throws SQLException {         try {             return stmt.getTime(parameterIndex, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Timestamp getTimestamp(int parameterIndex, Calendar cal) throws SQLException {         try {             return stmt.getTimestamp(parameterIndex, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void registerOutParameter(int parameterIndex, int sqlType, String typeName) throws SQLException {         try {             stmt.registerOutParameter(parameterIndex, sqlType, typeName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void registerOutParameter(String parameterName, int sqlType) throws SQLException {         try {             stmt.registerOutParameter(parameterName, sqlType);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException {         try {             stmt.registerOutParameter(parameterName, sqlType, scale);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException {         try {             stmt.registerOutParameter(parameterName, sqlType, typeName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.net.URL getURL(int parameterIndex) throws SQLException {         try {             return stmt.getURL(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setURL(String parameterName, java.net.URL val) throws SQLException {         try {             stmt.setURL(parameterName, val);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNull(String parameterName, int sqlType) throws SQLException {         try {             stmt.setNull(parameterName, sqlType);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBoolean(String parameterName, boolean x) throws SQLException {         try {             stmt.setBoolean(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setByte(String parameterName, byte x) throws SQLException {         try {             stmt.setByte(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setShort(String parameterName, short x) throws SQLException {         try {             stmt.setShort(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setInt(String parameterName, int x) throws SQLException {         try {             stmt.setInt(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setLong(String parameterName, long x) throws SQLException {         try {             stmt.setLong(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setFloat(String parameterName, float x) throws SQLException {         try {             stmt.setFloat(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setDouble(String parameterName, double x) throws SQLException {         try {             stmt.setDouble(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBigDecimal(String parameterName, BigDecimal x) throws SQLException {         try {             stmt.setBigDecimal(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setString(String parameterName, String x) throws SQLException {         try {             stmt.setString(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBytes(String parameterName, byte x[]) throws SQLException {         try {             stmt.setBytes(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setDate(String parameterName, java.sql.Date x) throws SQLException {         try {             stmt.setDate(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setTime(String parameterName, java.sql.Time x) throws SQLException {         try {             stmt.setTime(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setTimestamp(String parameterName, java.sql.Timestamp x) throws SQLException {         try {             stmt.setTimestamp(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setAsciiStream(String parameterName, java.io.InputStream x, int length) throws SQLException {         try {             stmt.setAsciiStream(parameterName, x, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBinaryStream(String parameterName, java.io.InputStream x, int length) throws SQLException {         try {             stmt.setBinaryStream(parameterName, x, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setObject(String parameterName, Object x, int targetSqlType, int scale) throws SQLException {         try {             stmt.setObject(parameterName, x, targetSqlType, scale);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setObject(String parameterName, Object x, int targetSqlType) throws SQLException {         try {             stmt.setObject(parameterName, x, targetSqlType);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setObject(String parameterName, Object x) throws SQLException {         try {             stmt.setObject(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setCharacterStream(String parameterName, java.io.Reader reader, int length) throws SQLException {         try {             stmt.setCharacterStream(parameterName, reader, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setDate(String parameterName, java.sql.Date x, Calendar cal) throws SQLException {         try {             stmt.setDate(parameterName, x, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setTime(String parameterName, java.sql.Time x, Calendar cal) throws SQLException {         try {             stmt.setTime(parameterName, x, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setTimestamp(String parameterName, java.sql.Timestamp x, Calendar cal) throws SQLException {         try {             stmt.setTimestamp(parameterName, x, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNull(String parameterName, int sqlType, String typeName) throws SQLException {         try {             stmt.setNull(parameterName, sqlType, typeName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public String getString(String parameterName) throws SQLException {         try {             return stmt.getString(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public boolean getBoolean(String parameterName) throws SQLException {         try {             return stmt.getBoolean(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public byte getByte(String parameterName) throws SQLException {         try {             return stmt.getByte(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public short getShort(String parameterName) throws SQLException {         try {             return stmt.getShort(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public int getInt(String parameterName) throws SQLException {         try {             return stmt.getInt(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public long getLong(String parameterName) throws SQLException {         try {             return stmt.getLong(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public float getFloat(String parameterName) throws SQLException {         try {             return stmt.getFloat(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public double getDouble(String parameterName) throws SQLException {         try {             return stmt.getDouble(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public byte[] getBytes(String parameterName) throws SQLException {         try {             return stmt.getBytes(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Date getDate(String parameterName) throws SQLException {         try {             return stmt.getDate(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Time getTime(String parameterName) throws SQLException {         try {             return stmt.getTime(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Timestamp getTimestamp(String parameterName) throws SQLException {         try {             return stmt.getTimestamp(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Object getObject(String parameterName) throws SQLException {         try {             Object obj = stmt.getObject(parameterName);             return wrapObject(obj);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public BigDecimal getBigDecimal(String parameterName) throws SQLException {         try {             return stmt.getBigDecimal(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Object getObject(String parameterName, java.util.Map> map) throws SQLException {         try {             Object obj = stmt.getObject(parameterName, map);             return wrapObject(obj);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Ref getRef(String parameterName) throws SQLException {         try {             return stmt.getRef(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Blob getBlob(String parameterName) throws SQLException {         try {             return stmt.getBlob(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Clob getClob(String parameterName) throws SQLException {         try {             return stmt.getClob(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Array getArray(String parameterName) throws SQLException {         try {             return stmt.getArray(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Date getDate(String parameterName, Calendar cal) throws SQLException {         try {             return stmt.getDate(parameterName, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Time getTime(String parameterName, Calendar cal) throws SQLException {         try {             return stmt.getTime(parameterName, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException {         try {             return stmt.getTimestamp(parameterName, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.net.URL getURL(String parameterName) throws SQLException {         try {             return stmt.getURL(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public RowId getRowId(int parameterIndex) throws SQLException {         try {             return stmt.getRowId(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public RowId getRowId(String parameterName) throws SQLException {         try {             return stmt.getRowId(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setRowId(String parameterName, RowId x) throws SQLException {         try {             stmt.setRowId(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNString(String parameterName, String value) throws SQLException {         try {             stmt.setNString(parameterName, value);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNCharacterStream(String parameterName, Reader value, long length) throws SQLException {         try {             stmt.setNCharacterStream(parameterName, value, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNClob(String parameterName, NClob value) throws SQLException {         try {             stmt.setNClob(parameterName, value);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setClob(String parameterName, Reader reader, long length) throws SQLException {         try {             stmt.setClob(parameterName, reader, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBlob(String parameterName, InputStream inputStream, long length) throws SQLException {         try {             stmt.setBlob(parameterName, inputStream, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNClob(String parameterName, Reader reader, long length) throws SQLException {         try {             stmt.setNClob(parameterName, reader, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public NClob getNClob(int parameterIndex) throws SQLException {         try {             return stmt.getNClob(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public NClob getNClob(String parameterName) throws SQLException {         try {             return stmt.getNClob(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setSQLXML(String parameterName, SQLXML xmlObject) throws SQLException {         try {             stmt.setSQLXML(parameterName, xmlObject);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public SQLXML getSQLXML(int parameterIndex) throws SQLException {         try {             return stmt.getSQLXML(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public SQLXML getSQLXML(String parameterName) throws SQLException {         try {             return stmt.getSQLXML(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public String getNString(int parameterIndex) throws SQLException {         try {             return stmt.getNString(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public String getNString(String parameterName) throws SQLException {         try {             return stmt.getNString(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.io.Reader getNCharacterStream(int parameterIndex) throws SQLException {         try {             return stmt.getNCharacterStream(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.io.Reader getNCharacterStream(String parameterName) throws SQLException {         try {             return stmt.getNCharacterStream(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.io.Reader getCharacterStream(int parameterIndex) throws SQLException {         try {             return stmt.getCharacterStream(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.io.Reader getCharacterStream(String parameterName) throws SQLException {         try {             return stmt.getCharacterStream(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBlob(String parameterName, Blob x) throws SQLException {         try {             stmt.setBlob(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setClob(String parameterName, Clob x) throws SQLException {         try {             stmt.setClob(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setAsciiStream(String parameterName, java.io.InputStream x, long length) throws SQLException {         try {             stmt.setAsciiStream(parameterName, x, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBinaryStream(String parameterName, java.io.InputStream x, long length) throws SQLException {         try {             stmt.setBinaryStream(parameterName, x, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setCharacterStream(String parameterName, java.io.Reader reader, long length) throws SQLException {         try {             stmt.setCharacterStream(parameterName, reader, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setAsciiStream(String parameterName, java.io.InputStream x) throws SQLException {         try {             stmt.setAsciiStream(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBinaryStream(String parameterName, java.io.InputStream x) throws SQLException {         try {             stmt.setBinaryStream(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setCharacterStream(String parameterName, java.io.Reader reader) throws SQLException {         try {             stmt.setCharacterStream(parameterName, reader);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNCharacterStream(String parameterName, Reader value) throws SQLException {         try {             stmt.setNCharacterStream(parameterName, value);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setClob(String parameterName, Reader reader) throws SQLException {         try {             stmt.setClob(parameterName, reader);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBlob(String parameterName, InputStream inputStream) throws SQLException {         try {             stmt.setBlob(parameterName, inputStream);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNClob(String parameterName, Reader reader) throws SQLException {         try {             stmt.setNClob(parameterName, reader);         } catch (Throwable t) {             throw checkException(t);         }     }      public  T getObject(int parameterIndex, Class type) throws SQLException {         throw new SQLFeatureNotSupportedException();     }      public  T getObject(String parameterName, Class type) throws SQLException {         throw new SQLFeatureNotSupportedException();     }      @SuppressWarnings("unchecked")     public  T unwrap(Class iface) throws SQLException {         if (iface == CallableStatement.class || iface == PreparedStatement.class) {             if (stmt instanceof CallableStatementProxy) {                 return stmt.unwrap(iface);             }             return (T) stmt;         }                  return super.unwrap(iface);     } };data class;blob;t;t;f;blob;data class;0;13349;https://github.com/alibaba/druid/blob/768469fe4d1340efe1036453366a58c9ab7e30d1/src/main/java/com/alibaba/druid/pool/DruidPooledCallableStatement.java/#L40-L1089;2;2167;13349
2171; {"message": "YES I found bad smells", "detected_bad_smells": ["Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@ManagedAttributeValueType public interface AclRule extends ManagedAttributeValue {     String getIdentity();     ObjectType getObjectType();     LegacyOperation getOperation();     Map getAttributes();     RuleOutcome getOutcome(); };data class;blob;t;t;f;blob;data class;0;13382;https://github.com/apache/qpid-broker-j/blob/4c4400b98a5a8493cfb9e5dbb21c97175f433a62/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/plugins/AclRule.java/#L31-L39;2;2171;13382
2183;{     "response": "YES I found bad smells",     "detected_bad_smells": [         "Blob"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
final class TraceableHttpServletResponse implements TraceableResponse {  	private final HttpServletResponse delegate;  	TraceableHttpServletResponse(HttpServletResponse response) { 		this.delegate = response; 	}  	@Override 	public int getStatus() { 		return this.delegate.getStatus(); 	}  	@Override 	public Map> getHeaders() { 		return extractHeaders(); 	}  	private Map> extractHeaders() { 		Map> headers = new LinkedHashMap<>(); 		for (String name : this.delegate.getHeaderNames()) { 			headers.put(name, new ArrayList<>(this.delegate.getHeaders(name))); 		} 		return headers; 	}  };data class;blob;t;t;f;blob;data class;0;13424;https://github.com/spring-projects/spring-boot/blob/2225b362991f225e3a93f00e160526d2b8abdfb2/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/trace/servlet/TraceableHttpServletResponse.java/#L33-L59;2;2183;13424
2184;     {         "message": "YES I found bad smells",         "bad smells are": [             "Blob",             "Data Class"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@SuppressWarnings("serial") public class ObjectRetrievalFailureException extends DataRetrievalFailureException {  	@Nullable 	private final Object persistentClass;  	@Nullable 	private final Object identifier;   	/** 	 * Create a general ObjectRetrievalFailureException with the given message, 	 * without any information on the affected object. 	 * @param msg the detail message 	 * @param cause the source exception 	 */ 	public ObjectRetrievalFailureException(String msg, Throwable cause) { 		super(msg, cause); 		this.persistentClass = null; 		this.identifier = null; 	}  	/** 	 * Create a new ObjectRetrievalFailureException for the given object, 	 * with the default "not found" message. 	 * @param persistentClass the persistent class 	 * @param identifier the ID of the object that should have been retrieved 	 */ 	public ObjectRetrievalFailureException(Class persistentClass, Object identifier) { 		this(persistentClass, identifier, 				"Object of class [" + persistentClass.getName() + "] with identifier [" + identifier + "]: not found", 				null); 	}  	/** 	 * Create a new ObjectRetrievalFailureException for the given object, 	 * with the given explicit message and exception. 	 * @param persistentClass the persistent class 	 * @param identifier the ID of the object that should have been retrieved 	 * @param msg the detail message 	 * @param cause the source exception 	 */ 	public ObjectRetrievalFailureException( 			Class persistentClass, Object identifier, String msg, @Nullable Throwable cause) {  		super(msg, cause); 		this.persistentClass = persistentClass; 		this.identifier = identifier; 	}  	/** 	 * Create a new ObjectRetrievalFailureException for the given object, 	 * with the default "not found" message. 	 * @param persistentClassName the name of the persistent class 	 * @param identifier the ID of the object that should have been retrieved 	 */ 	public ObjectRetrievalFailureException(String persistentClassName, Object identifier) { 		this(persistentClassName, identifier, 				"Object of class [" + persistentClassName + "] with identifier [" + identifier + "]: not found", 				null); 	}  	/** 	 * Create a new ObjectRetrievalFailureException for the given object, 	 * with the given explicit message and exception. 	 * @param persistentClassName the name of the persistent class 	 * @param identifier the ID of the object that should have been retrieved 	 * @param msg the detail message 	 * @param cause the source exception 	 */ 	public ObjectRetrievalFailureException( 			String persistentClassName, Object identifier, String msg, @Nullable Throwable cause) {  		super(msg, cause); 		this.persistentClass = persistentClassName; 		this.identifier = identifier; 	}   	/** 	 * Return the persistent class of the object that was not found. 	 * If no Class was specified, this method returns null. 	 */ 	@Nullable 	public Class getPersistentClass() { 		return (this.persistentClass instanceof Class ? (Class) this.persistentClass : null); 	}  	/** 	 * Return the name of the persistent class of the object that was not found. 	 * Will work for both Class objects and String names. 	 */ 	@Nullable 	public String getPersistentClassName() { 		if (this.persistentClass instanceof Class) { 			return ((Class) this.persistentClass).getName(); 		} 		return (this.persistentClass != null ? this.persistentClass.toString() : null); 	}  	/** 	 * Return the identifier of the object that was not found. 	 */ 	@Nullable 	public Object getIdentifier() { 		return this.identifier; 	}  };data class;blob, data class;t;t;t;blob;;0;13426;https://github.com/spring-projects/spring-framework/blob/3a0f309e2c9fdbbf7fb2d348be861528177f8555/spring-orm/src/main/java/org/springframework/orm/ObjectRetrievalFailureException.java/#L29-L137;2;2184;13426
2185;     {     "message": "YES I found bad smells",     "detected_bad_smells": [       "Long Method",       "Blob"     ]   }   ;The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
        Type asTuple() {             final Type result;             if (types.size() == 0) {                 result = unit.getEmptyType();             } else {                 final Type sequentialType;                 if (variadic) {                     Part part = new Part("Sequence", Collections.singletonList(getLast()));                     sequentialType = loadType("ceylon.language",                              atLeastOne ? "ceylon.language.Sequence" : "ceylon.language.Sequential",                                      part, null);                 } else {                     sequentialType = unit.getEmptyType();                 }                                  if (variadic && types.size() == 1) {                     result = sequentialType;                 } else {                     Part part = new Part();                     // if we're variadic we put the element type there because we skip it below                     // if we're not variadic we are not going to skip it so let's not union it with itself                     Type union = variadic ? getLast() : null;                     Type tupleType = sequentialType;                     // A,B=                      // union = null                     // tupleType = []                     // t = B                     // union = B                     // tupleType = [B]                     // tupleType = [B]|[]                     // t = A                     // union = A|B                     // tupleType = [A,[B]|[]]                      // A=,B=                      // union = null                     // tupleType = []                     // t = B                     // union = B                     // tupleType = [B]                     // tupleType = [B]|[]                     // t = A                     // union = A|B                     // tupleType = [A,[B]|[]]                     // tupleType = [A,[B]|[]]|[]                      // A=,B*                      // union = B                     // tupleType = [B*]                     // t = A                     // union = A|B                     // tupleType = [A,[B*]]                     // tupleType = [A,[B*]]|[]                      int makeDefaulted = defaulted;                     for (int ii  = types.size()-(variadic? 2 : 1); ii >= 0; ii--) {                         Type t = types.get(ii);                         // FIXME: subtyping in the type parser may cause issues                         if(union != null) // any second element (variadic or not)                             union = ModelUtil.unionType(union, t, unit);                         else                             union = t; // any first element                         part.parameters = Arrays.asList(union, t, tupleType);                         part.name = "Tuple";                         tupleType = loadType("ceylon.language", "ceylon.language.Tuple", part, null);                         if(makeDefaulted > 0){                             makeDefaulted--;                             tupleType = union(Arrays.asList(unit.getEmptyType(), tupleType), unit);                         }                     }                     result = tupleType;                 }             }             return result;         };long method;long method, blob;t;t;t; blob;;0;13430;https://github.com/eclipse/ceylon/blob/d3994d6cd120c4df85952cd9432123b413cfd65a/model/src/org/eclipse/ceylon/model/loader/TypeParser.java/#L431-L505;2;2185;13430
2188;     {         "message": "YES I found bad smells",         "bad smells are": [             "Long Method",             "Blob"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    @Override     public Object getValue(final String columnLabel, final Class type) throws SQLException {         Object result;         if (Object.class == type) {             result = decrypt(columnLabel, resultSet.getObject(columnLabel));         } else if (boolean.class == type) {             result = decrypt(columnLabel, resultSet.getBoolean(columnLabel));         } else if (byte.class == type) {             result = decrypt(columnLabel, resultSet.getByte(columnLabel));         } else if (short.class == type) {             result = decrypt(columnLabel, resultSet.getShort(columnLabel));         } else if (int.class == type) {             result = decrypt(columnLabel, resultSet.getInt(columnLabel));         } else if (long.class == type) {             result = decrypt(columnLabel, resultSet.getLong(columnLabel));         } else if (float.class == type) {             result = decrypt(columnLabel, resultSet.getFloat(columnLabel));         } else if (double.class == type) {             result = decrypt(columnLabel, resultSet.getDouble(columnLabel));         } else if (String.class == type) {             result = decrypt(columnLabel, resultSet.getString(columnLabel));         } else if (BigDecimal.class == type) {             result = decrypt(columnLabel, resultSet.getBigDecimal(columnLabel));         } else if (byte[].class == type) {             result = resultSet.getBytes(columnLabel);         } else if (Date.class == type) {             result = resultSet.getDate(columnLabel);         } else if (Time.class == type) {             result = resultSet.getTime(columnLabel);         } else if (Timestamp.class == type) {             result = resultSet.getTimestamp(columnLabel);         } else if (URL.class == type) {             result = resultSet.getURL(columnLabel);         } else if (Blob.class == type) {             result = resultSet.getBlob(columnLabel);         } else if (Clob.class == type) {             result = resultSet.getClob(columnLabel);         } else if (SQLXML.class == type) {             result = resultSet.getSQLXML(columnLabel);         } else if (Reader.class == type) {             result = resultSet.getCharacterStream(columnLabel);         } else {             result = decrypt(columnLabel, resultSet.getObject(columnLabel));         }         return result;     };long method;long method, blob;t;t;t; blob;;0;13444;https://github.com/apache/incubator-shardingsphere/blob/c5cf1d15b02f3a0fb3bda4f15d5f0b3779eac7ba/sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/core/execute/sql/execute/result/StreamQueryResult.java/#L117-L162;2;2188;13444
2190;   {     "message": "YES I found bad smells",     "bad smells are": [       "Blob",       "Long Method"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class RabbitGatewaySupport implements InitializingBean {  	/** Logger available to subclasses. */ 	protected final Log logger = LogFactory.getLog(getClass()); // NOSONAR  	private RabbitOperations rabbitOperations;  	/** 	 * Set the Rabbit connection factory to be used by the gateway. 	 * Will automatically create a RabbitTemplate for the given ConnectionFactory. 	 * @param connectionFactory The connection factory. 	 * @see #createRabbitTemplate 	 * @see #setConnectionFactory(org.springframework.amqp.rabbit.connection.ConnectionFactory) 	 */ 	public final void setConnectionFactory(ConnectionFactory connectionFactory) { 		this.rabbitOperations = createRabbitTemplate(connectionFactory); 	}  	/** 	 * Create a RabbitTemplate for the given ConnectionFactory. 	 * Only invoked if populating the gateway with a ConnectionFactory reference. 	 * 	 * @param connectionFactory the Rabbit ConnectionFactory to create a RabbitTemplate for 	 * @return the new RabbitTemplate instance 	 * @see #setConnectionFactory 	 */ 	protected RabbitTemplate createRabbitTemplate(ConnectionFactory connectionFactory) { 		return new RabbitTemplate(connectionFactory); 	}  	/** 	 * @return The Rabbit ConnectionFactory used by the gateway. 	 */ 	@Nullable 	public final ConnectionFactory getConnectionFactory() { 		return (this.rabbitOperations != null ? this.rabbitOperations.getConnectionFactory() : null); 	}  	/** 	 * Set the {@link RabbitOperations} for the gateway. 	 * @param rabbitOperations The Rabbit operations. 	 * @see #setConnectionFactory(org.springframework.amqp.rabbit.connection.ConnectionFactory) 	 */ 	public final void setRabbitOperations(RabbitOperations rabbitOperations) { 		this.rabbitOperations = rabbitOperations; 	}  	/** 	 * @return The {@link RabbitOperations} for the gateway. 	 */ 	public final RabbitOperations getRabbitOperations() { 		return this.rabbitOperations; 	}  	@Override 	public final void afterPropertiesSet() throws IllegalArgumentException, BeanInitializationException { 		if (this.rabbitOperations == null) { 			throw new IllegalArgumentException("'connectionFactory' or 'rabbitTemplate' is required"); 		} 		try { 			initGateway(); 		} 		catch (Exception ex) { 			throw new BeanInitializationException("Initialization of Rabbit gateway failed: " + ex.getMessage(), ex); 		} 	}  	/** 	 * Subclasses can override this for custom initialization behavior. 	 * Gets called after population of this instance's bean properties. 	 */ 	protected void initGateway() { 	}  };data class;blob, long method;t;t;f;blob,  long method;data class;0;13458;https://github.com/spring-projects/spring-amqp/blob/1614a4b0532b83e29b2a2fdb8dac102576b8aa51/spring-rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitGatewaySupport.java/#L43-L117;2;2190;13458
2192;   {     "output": "YES I found bad smells",     "bad smells are": [       "Blob",       "Data Class"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class Status {     public String getAction() {         return action;     }      public Result getResult() {         return result;     }      public String getDetails() {         return details;     }      private String action;     private Result result;     private String details;      public Status(String action, Result result, String details) {         this.action = action;         this.result = result;         this.details = details;     }     public static enum Result {         SUCCESSFUL,         FAILED,     }      @Override     public String toString() {         return String.format("%s\t%s\t%s", action, result, details);     } };data class;blob, data class;t;t;t;blob;;0;13474;https://github.com/Microsoft/azure-tools-for-java/blob/d121e8ac9cc3ab400e5b49c8b372280ae332f3fb/Utils/azuretools-core/src/com/microsoft/azuretools/authmanage/srvpri/step/Status.java/#L28-L59;2;2192;13474
2215; {"message": "YES I found bad smells", "bad smells": ["Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    static class Cause {         final Tuple tuple ;         final Mapping     mapping ;          public Cause(Tuple tuple, Mapping mapping) {             super() ;             this.tuple = tuple ;             this.mapping = mapping ;         }     };data class;blob;t;t;f;blob;data class;0;13529;https://github.com/apache/jena/blob/1cca775bbf0bb0fd3ee8ac55e31f0f30cdde3b77/jena-arq/src/main/java/org/apache/jena/sparql/util/IsoMatcher.java/#L113-L122;2;2215;13529
2226; {     "answer": "YES I found bad smells",     "detected_bad_smells": [         "Blob",         "Data Class"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
   public class Header {        public String key;       public String val;        public Header(String key, String val) {          this.key = key;          this.val = val;       }        public String getEncodedKey() {          return encode(key);       }        public String getEncodedValue() {          return encode(val);       }    };data class;blob, data class;t;t;t;blob;;0;13576;https://github.com/apache/activemq-artemis/blob/5bd5c610195d6f4a3dd1ac28170727003f8a5a54/artemis-protocols/artemis-stomp-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/stomp/StompFrame.java/#L158-L175;2;2226;13576
2238;     {         "response": "YES I found bad smells",         "bad smells are": ["Blob", "Long Method"]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  abstract static class RequestParamsBuilder {     T body;      public RequestParamsBuilder(T body) {       this.body = body;     }      abstract RequestParams buildRequestParams();      void setBody(T body) {       this.body = body;     }   };data class;blob, long method;t;t;f;blob,  long method;data class;0;13615;https://github.com/oracle/weblogic-kubernetes-operator/blob/1fb059d7e32b9b3514617d54e4dda41ab68e71ea/operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java/#L179-L191;2;2238;13615
2261;{"message": "YES I found bad smells", "the bad smells are": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@class") @JsonSubTypes({ 	@JsonSubTypes.Type(value = SubtaskCheckpointStatistics.CompletedSubtaskCheckpointStatistics.class, name = "completed"), 	@JsonSubTypes.Type(value = SubtaskCheckpointStatistics.PendingSubtaskCheckpointStatistics.class, name = "pending")}) public class SubtaskCheckpointStatistics {  	public static final String FIELD_NAME_INDEX = "index";  	public static final String FIELD_NAME_CHECKPOINT_STATUS = "status";  	@JsonProperty(FIELD_NAME_INDEX) 	private final int index;  	@JsonProperty(FIELD_NAME_CHECKPOINT_STATUS) 	private final String checkpointStatus;  	@JsonCreator 	private SubtaskCheckpointStatistics( 			@JsonProperty(FIELD_NAME_INDEX) int index, 			@JsonProperty(FIELD_NAME_CHECKPOINT_STATUS) String checkpointStatus) { 		this.index = index; 		this.checkpointStatus = checkpointStatus; 	}  	public int getIndex() { 		return index; 	}  	public String getCheckpointStatus() { 		return checkpointStatus; 	}  	@Override 	public boolean equals(Object o) { 		if (this == o) { 			return true; 		} 		if (o == null || getClass() != o.getClass()) { 			return false; 		} 		SubtaskCheckpointStatistics that = (SubtaskCheckpointStatistics) o; 		return index == that.index && 			Objects.equals(checkpointStatus, that.checkpointStatus); 	}  	@Override 	public int hashCode() { 		return Objects.hash(index, checkpointStatus); 	}  	// --------------------------------------------------------------------------------- 	// Static inner classes 	// ---------------------------------------------------------------------------------  	/** 	 * Checkpoint statistics for a completed subtask checkpoint. 	 */ 	public static final class CompletedSubtaskCheckpointStatistics extends SubtaskCheckpointStatistics {  		public static final String FIELD_NAME_ACK_TIMESTAMP = "ack_timestamp";  		public static final String FIELD_NAME_DURATION = "end_to_end_duration";  		public static final String FIELD_NAME_STATE_SIZE = "state_size";  		public static final String FIELD_NAME_CHECKPOINT_DURATION = "checkpoint";  		public static final String FIELD_NAME_ALIGNMENT = "alignment";  		@JsonProperty(FIELD_NAME_ACK_TIMESTAMP) 		private final long ackTimestamp;  		@JsonProperty(FIELD_NAME_DURATION) 		private final long duration;  		@JsonProperty(FIELD_NAME_STATE_SIZE) 		private final long stateSize;  		@JsonProperty(FIELD_NAME_CHECKPOINT_DURATION) 		private final CheckpointDuration checkpointDuration;  		@JsonProperty(FIELD_NAME_ALIGNMENT) 		private final CheckpointAlignment alignment;  		@JsonCreator 		public CompletedSubtaskCheckpointStatistics( 				@JsonProperty(FIELD_NAME_INDEX) int index, 				@JsonProperty(FIELD_NAME_ACK_TIMESTAMP) long ackTimestamp, 				@JsonProperty(FIELD_NAME_DURATION) long duration, 				@JsonProperty(FIELD_NAME_STATE_SIZE) long stateSize, 				@JsonProperty(FIELD_NAME_CHECKPOINT_DURATION) CheckpointDuration checkpointDuration, 				@JsonProperty(FIELD_NAME_ALIGNMENT) CheckpointAlignment alignment) { 			super(index, "completed"); 			this.ackTimestamp = ackTimestamp; 			this.duration = duration; 			this.stateSize = stateSize; 			this.checkpointDuration = checkpointDuration; 			this.alignment = alignment; 		}  		public long getAckTimestamp() { 			return ackTimestamp; 		}  		public long getDuration() { 			return duration; 		}  		public long getStateSize() { 			return stateSize; 		}  		public CheckpointDuration getCheckpointDuration() { 			return checkpointDuration; 		}  		public CheckpointAlignment getAlignment() { 			return alignment; 		}  		@Override 		public boolean equals(Object o) { 			if (this == o) { 				return true; 			} 			if (o == null || getClass() != o.getClass()) { 				return false; 			} 			CompletedSubtaskCheckpointStatistics that = (CompletedSubtaskCheckpointStatistics) o; 			return ackTimestamp == that.ackTimestamp && 				duration == that.duration && 				stateSize == that.stateSize && 				Objects.equals(checkpointDuration, that.checkpointDuration) && 				Objects.equals(alignment, that.alignment); 		}  		@Override 		public int hashCode() { 			return Objects.hash(ackTimestamp, duration, stateSize, checkpointDuration, alignment); 		}  		/** 		 * Duration of the checkpoint. 		 */ 		public static final class CheckpointDuration {  			public static final String FIELD_NAME_SYNC_DURATION = "sync";  			public static final String FIELD_NAME_ASYNC_DURATION = "async";  			@JsonProperty(FIELD_NAME_SYNC_DURATION) 			private final long syncDuration;  			@JsonProperty(FIELD_NAME_ASYNC_DURATION) 			private final long asyncDuration;  			@JsonCreator 			public CheckpointDuration( 					@JsonProperty(FIELD_NAME_SYNC_DURATION) long syncDuration, 					@JsonProperty(FIELD_NAME_ASYNC_DURATION) long asyncDuration) { 				this.syncDuration = syncDuration; 				this.asyncDuration = asyncDuration; 			}  			public long getSyncDuration() { 				return syncDuration; 			}  			public long getAsyncDuration() { 				return asyncDuration; 			}  			@Override 			public boolean equals(Object o) { 				if (this == o) { 					return true; 				} 				if (o == null || getClass() != o.getClass()) { 					return false; 				} 				CheckpointDuration that = (CheckpointDuration) o; 				return syncDuration == that.syncDuration && 					asyncDuration == that.asyncDuration; 			}  			@Override 			public int hashCode() { 				return Objects.hash(syncDuration, asyncDuration); 			} 		}  		/** 		 * Alignment statistics of the checkpoint. 		 */ 		public static final class CheckpointAlignment {  			public static final String FIELD_NAME_ALIGNMENT_BUFFERED = "buffered";  			public static final String FIELD_NAME_ALIGNMENT_DURATION = "duration";  			@JsonProperty(FIELD_NAME_ALIGNMENT_BUFFERED) 			private final long alignmentBuffered;  			@JsonProperty(FIELD_NAME_ALIGNMENT_DURATION) 			private final long alignmentDuration;  			@JsonCreator 			public CheckpointAlignment( 					@JsonProperty(FIELD_NAME_ALIGNMENT_BUFFERED) long alignmentBuffered, 					@JsonProperty(FIELD_NAME_ALIGNMENT_DURATION) long alignmentDuration) { 				this.alignmentBuffered = alignmentBuffered; 				this.alignmentDuration = alignmentDuration; 			}  			public long getAlignmentBuffered() { 				return alignmentBuffered; 			}  			public long getAlignmentDuration() { 				return alignmentDuration; 			}  			@Override 			public boolean equals(Object o) { 				if (this == o) { 					return true; 				} 				if (o == null || getClass() != o.getClass()) { 					return false; 				} 				CheckpointAlignment that = (CheckpointAlignment) o; 				return alignmentBuffered == that.alignmentBuffered && 					alignmentDuration == that.alignmentDuration; 			}  			@Override 			public int hashCode() { 				return Objects.hash(alignmentBuffered, alignmentDuration); 			} 		} 	}  	/** 	 * Checkpoint statistics for a pending subtask checkpoint. 	 */ 	public static final class PendingSubtaskCheckpointStatistics extends SubtaskCheckpointStatistics {  		@JsonCreator 		public PendingSubtaskCheckpointStatistics(@JsonProperty(FIELD_NAME_INDEX) int index) { 			super(index, "pending_or_failed"); 		} 	} };data class;blob, long method;t;t;f;blob,  long method;data class;0;13717;https://github.com/apache/flink/blob/8068c8775ad067d75828e6360e7e0994348da9b9/flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/checkpoints/SubtaskCheckpointStatistics.java/#L31-L283;2;2261;13717
2276; {     "output": "YES I found bad smells",     "detected_bad_smells": {         "1. Blob": "ObjectInFolderListImpl class might be a Blob code smell as it contains multiple fields and methods that operate on these fields",         "2. Data Class": "ObjectInFolderListImpl class might be considered a Data Class since it mainly contains getters and setters for its fields"     } };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class ObjectInFolderListImpl extends AbstractExtensionData implements ObjectInFolderList {      private static final long serialVersionUID = 1L;      private List objects;     private Boolean hasMoreItems = Boolean.FALSE;     private BigInteger numItems;      @Override     public List getObjects() {         if (objects == null) {             objects = new ArrayList(0);         }          return objects;     }      public void setObjects(List objects) {         this.objects = objects;     }      @Override     public Boolean hasMoreItems() {         return hasMoreItems;     }      public void setHasMoreItems(Boolean hasMoreItems) {         this.hasMoreItems = hasMoreItems;     }      @Override     public BigInteger getNumItems() {         return numItems;     }      public void setNumItems(BigInteger numItems) {         this.numItems = numItems;     }      @Override     public String toString() {         return "ObjectInFolder List [objects=" + objects + ", has more items=" + hasMoreItems + ", num items="                 + numItems + "]" + super.toString();     } };data class;1. blob: objectinfolderlistimpl class might be a blob code smell as it contains multiple fields and methods that operate on these fields, 2. data class: objectinfolderlistimpl class might be considered a data class since it mainly contains getters and setters for its fields;t;t;t;1. blob: objectinfolderlistimpl class might be a blob code smell as it contains multiple fields and methods that operate on these fields;;0;13775;https://github.com/apache/chemistry-opencmis/blob/ef8513d708e5e21710afe5cafb8b32a62a0ae532/chemistry-opencmis-commons/chemistry-opencmis-commons-impl/src/main/java/org/apache/chemistry/opencmis/commons/impl/dataobjects/ObjectInFolderListImpl.java/#L31-L75;2;2276;13775
2279;{         "output": "YES, I found bad smells",     "detected_bad_smells": [         "Blob",         "Data Class",         "Long Method"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public final class ConfigBoolean extends ConfigVariable {     public ConfigBoolean(OptionSpec spec)     {         super(spec);          this.enabled = false;         this.isSet = false;     }      public ConfigBoolean(OptionSpec spec, boolean enabled)     {         super(spec);         this.set(enabled);     }          private boolean enabled;     private boolean isSet;       public void set(boolean value)     {         this.enabled = value;         this.isSet = true;     }      public void set(String value)     {         this.enabled = parseValue(value);         this.isSet = true;     }      public boolean isSet()     {     	return isSet;     	}      public void addToCommandline(Commandline cmdline)     {         if (isSet)             cmdline.createArgument(true).setValue("-" + spec.getFullName() + "=" + enabled);     }      private boolean parseValue(String value)     {         return value.toLowerCase().matches("\\s*(true|yes|on)\\s*");     } };data class;blob, data class, long method;t;t;t;blob,  long method;;0;13785;https://github.com/apache/royale-compiler/blob/fbd9bc3b9e48c80dbd8c1d32a6f83221e314efdd/royale-ant-tasks/src/main/java/org/apache/royale/compiler/ant/config/ConfigBoolean.java/#L28-L75;2;2279;13785
2287;{     "message": "YES I found bad smells",     "bad smells are": [         "Blob",         "Data Class"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class ReportInstance extends AbstractDTOBase {      private String id;     private ReportStatusEnum status;     private String url;     private String ownerId;     private Boolean hasDetailRows;     private ZonedDateTime completionDate;     private ZonedDateTime requestDate;      public String getId() {         return id;     }      public void setId(String id) {         this.id = id;     }      public ReportStatusEnum getStatus() {         return status;     }      public void setStatus(ReportStatusEnum status) {         this.status = status;     }      public String getUrl() {         return url;     }      public void setUrl(String url) {         this.url = url;     }      public String getOwnerId() {         return ownerId;     }      public void setOwnerId(String ownerId) {         this.ownerId = ownerId;     }      public Boolean getHasDetailRows() {         return hasDetailRows;     }      public void setHasDetailRows(Boolean hasDetailRows) {         this.hasDetailRows = hasDetailRows;     }      public ZonedDateTime getCompletionDate() {         return completionDate;     }      public void setCompletionDate(ZonedDateTime completionDate) {         this.completionDate = completionDate;     }      public ZonedDateTime getRequestDate() {         return requestDate;     }      public void setRequestDate(ZonedDateTime requestDate) {         this.requestDate = requestDate;     } };data class;blob, data class;t;t;t;blob;;0;13890;https://github.com/apache/camel/blob/8a85a70643c4d6eec2d3abddeea44ecb06c2f486/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/api/dto/analytics/reports/ReportInstance.java/#L26-L91;2;2287;13890
2294;{"message": "YES I found bad smells", "bad smells are": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class TagTag extends DefineTagSupport {      private String name;      public TagTag() {     }      // Tag interface     //-------------------------------------------------------------------------     public void doTag(XMLOutput output) throws JellyTagException {         getTagLibrary().registerDynamicTag( getName(), getBody() );     }      // Properties     //-------------------------------------------------------------------------      /** @return the name of the tag to create */     public String getName() {         return name;     }      /** Sets the name of the tag to create */     public void setName(String name) {         this.name = name;     } };data class;blob, data class;t;t;t;blob;;0;13978;https://github.com/apache/commons-jelly/blob/48c008cc2328402e0976295625b32c5197ba2324/jelly-tags/define/src/main/java/org/apache/commons/jelly/tags/define/TagTag.java/#L32-L57;2;2294;13978
2301;   {     "output": "YES I found bad smells",     "bad smells are": [       "Blob",       "Data Class",       "Long Method"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    public static class Builder {          private File path;          private String interval;          private boolean incremental;          private File out;          private String filter;          private boolean ignoreMissingSegments;          private Builder() {             // Prevent external instantiation.         }          /**          * The path to an existing segment store. This parameter is required.          *          * @param path the path to an existing segment store.          * @return this builder.          */         public Builder withPath(File path) {             this.path = checkNotNull(path);             return this;         }          /**          * The two node records to diff specified as a record ID interval. This          * parameter is required.          *           * The interval is specified as two record IDs separated by two full          * stops ({@code ..}). In example, {@code 333dc24d-438f-4cca-8b21-3ebf67c05856:12345..46116fda-7a72-4dbc-af88-a09322a7753a:67890}.          * Instead of using a full record ID, it is possible to use the special          * placeholder {@code head}. This placeholder is translated to the          * record ID of the most recent head state.          *          * @param interval an interval between two node record IDs.          * @return this builder.          */         public Builder withInterval(String interval) {             this.interval = checkNotNull(interval);             return this;         }          /**          * Set whether or not to perform an incremental diff of the specified          * interval. An incremental diff shows every change between the two          * records at every revision available to the segment store. This          * parameter is not mandatory and defaults to {@code false}.          *          * @param incremental {@code true} to perform an incremental diff,          *                    {@code false} otherwise.          * @return this builder.          */         public Builder withIncremental(boolean incremental) {             this.incremental = incremental;             return this;         }          /**          * The file where the output of this command is stored. this parameter          * is mandatory.          *          * @param file the output file.          * @return this builder.          */         public Builder withOutput(File file) {             this.out = checkNotNull(file);             return this;         }          /**          * The path to a subtree. If specified, this parameter allows to          * restrict the diff to the specified subtree. This parameter is not          * mandatory and defaults to the entire tree.          *          * @param filter a path used as as filter for the resulting diff.          * @return this builder.          */         public Builder withFilter(String filter) {             this.filter = checkNotNull(filter);             return this;         }          /**          * Whether to ignore exceptions caused by missing segments in the          * segment store. This parameter is not mandatory and defaults to {@code          * false}.          *          * @param ignoreMissingSegments {@code true} to ignore exceptions caused          *                              by missing segments, {@code false}          *                              otherwise.          * @return this builder.          */         public Builder withIgnoreMissingSegments(boolean ignoreMissingSegments) {             this.ignoreMissingSegments = ignoreMissingSegments;             return this;         }          /**          * Create an executable version of the {@link Diff} command.          *          * @return an instance of {@link Runnable}.          */         public Diff build() {             checkNotNull(path);             checkNotNull(interval);             checkNotNull(out);             checkNotNull(filter);             return new Diff(this);         }      };data class;blob, data class, long method;t;t;t;blob,  long method;;0;14036;https://github.com/apache/jackrabbit-oak/blob/fa85f54a065e01c0a1cb8c03af74194fdf521ddd/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/tool/Diff.java/#L56-L171;2;2301;14036
2323;   {     "message": "YES I found bad smells",     "detected_bad_smells": [       "Blob",       "Long Method"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public abstract class AbstractControllerService extends AbstractConfigurableComponent implements ControllerService {      private String identifier;     private ControllerServiceLookup serviceLookup;     private ComponentLog logger;     private StateManager stateManager;     private volatile ConfigurationContext configurationContext;     private volatile boolean enabled = false;      @Override     public final void initialize(final ControllerServiceInitializationContext context) throws InitializationException {         this.identifier = context.getIdentifier();         serviceLookup = context.getControllerServiceLookup();         logger = context.getLogger();         stateManager = context.getStateManager();         init(context);     }      @Override     public String getIdentifier() {         return identifier;     }      /**      * @return the {@link ControllerServiceLookup} that was passed to the      * {@link #init(ControllerServiceInitializationContext)} method      */     protected final ControllerServiceLookup getControllerServiceLookup() {         return serviceLookup;     }      /**      * Provides a mechanism by which subclasses can perform initialization of      * the Controller Service before it is scheduled to be run      *      * @param config of initialization context      * @throws InitializationException if unable to init      */     protected void init(final ControllerServiceInitializationContext config) throws InitializationException {     }      @OnEnabled     public final void enabled() {         this.enabled = true;     }      @OnDisabled     public final void disabled() {         this.enabled = false;     }      public boolean isEnabled() {         return this.enabled;     }      /**      * @return the logger that has been provided to the component by the      * framework in its initialize method      */     protected ComponentLog getLogger() {         return logger;     }      /**      * @return the StateManager that can be used to store and retrieve state for this Controller Service      */     protected StateManager getStateManager() {         return stateManager;     }      @OnEnabled     public final void abstractStoreConfigContext(final ConfigurationContext configContext) {         this.configurationContext = configContext;     }      @OnDisabled     public final void abstractClearConfigContext() {         this.configurationContext = null;     }      protected ConfigurationContext getConfigurationContext() {         final ConfigurationContext context = this.configurationContext;         if (context == null) {             throw new IllegalStateException("No Configuration Context exists");         }          return configurationContext;     }      protected PropertyValue getProperty(final PropertyDescriptor descriptor) {         return getConfigurationContext().getProperty(descriptor);     } };data class;blob, long method;t;t;f;blob,  long method;data class;0;14132;https://github.com/apache/nifi/blob/c8eff590efa3babcda0b755009224dcac168708b/nifi-api/src/main/java/org/apache/nifi/controller/AbstractControllerService.java/#L28-L120;2;2323;14132
2325;{"response": "YES I found bad smells", "bad smells are": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class TransportConnectionState extends org.apache.activemq.state.ConnectionState {      private ConnectionContext context;     private TransportConnection connection;     private AtomicInteger referenceCounter = new AtomicInteger();     private final Object connectionMutex = new Object();      public TransportConnectionState(ConnectionInfo info, TransportConnection transportConnection) {         super(info);         connection = transportConnection;     }      public ConnectionContext getContext() {         return context;     }      public TransportConnection getConnection() {         return connection;     }      public void setContext(ConnectionContext context) {         this.context = context;     }      public void setConnection(TransportConnection connection) {         this.connection = connection;     }      public int incrementReference() {         return referenceCounter.incrementAndGet();     }      public int decrementReference() {         return referenceCounter.decrementAndGet();     }  	public AtomicInteger getReferenceCounter() { 		return referenceCounter; 	}  	public void setReferenceCounter(AtomicInteger referenceCounter) { 		this.referenceCounter = referenceCounter; 	}  	public Object getConnectionMutex() { 		return connectionMutex; 	} };data class;blob, data class;t;t;t;blob;;0;14140;https://github.com/apache/activemq/blob/ccf56875b0660214e0a61bd2f8adc418143551fc/activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnectionState.java/#L27-L74;2;2325;14140
2333;{"message": "YES I found bad smells", "the bad smells are": ["Blob", "Data Class", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class HistoryClientService extends AbstractService {    private static final Log LOG = LogFactory.getLog(HistoryClientService.class);    private HSClientProtocol protocolHandler;   private Server server;   private WebApp webApp;   private InetSocketAddress bindAddress;   private HistoryContext history;   private JHSDelegationTokenSecretManager jhsDTSecretManager;      public HistoryClientService(HistoryContext history,       JHSDelegationTokenSecretManager jhsDTSecretManager) {     super("HistoryClientService");     this.history = history;     this.protocolHandler = new HSClientProtocolHandler();     this.jhsDTSecretManager = jhsDTSecretManager;   }    protected void serviceStart() throws Exception {     Configuration conf = getConfig();     YarnRPC rpc = YarnRPC.create(conf);     initializeWebApp(conf);     InetSocketAddress address = conf.getSocketAddr(         JHAdminConfig.MR_HISTORY_BIND_HOST,         JHAdminConfig.MR_HISTORY_ADDRESS,         JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS,         JHAdminConfig.DEFAULT_MR_HISTORY_PORT);      server =         rpc.getServer(HSClientProtocol.class, protocolHandler, address,             conf, jhsDTSecretManager,             conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,                 JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));      // Enable service authorization?     if (conf.getBoolean(         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,         false)) {       server.refreshServiceAcl(conf, new ClientHSPolicyProvider());     }          server.start();     this.bindAddress = conf.updateConnectAddr(JHAdminConfig.MR_HISTORY_BIND_HOST,                                               JHAdminConfig.MR_HISTORY_ADDRESS,                                               JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS,                                               server.getListenerAddress());     LOG.info("Instantiated HistoryClientService at " + this.bindAddress);      super.serviceStart();   }    @VisibleForTesting   protected void initializeWebApp(Configuration conf) {     webApp = new HsWebApp(history);     InetSocketAddress bindAddress = MRWebAppUtil.getJHSWebBindAddress(conf);     // NOTE: there should be a .at(InetSocketAddress)     WebApps         .$for("jobhistory", HistoryClientService.class, this, "ws")         .with(conf)         .withHttpSpnegoKeytabKey(             JHAdminConfig.MR_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)         .withHttpSpnegoPrincipalKey(             JHAdminConfig.MR_WEBAPP_SPNEGO_USER_NAME_KEY)         .at(NetUtils.getHostPortString(bindAddress)).start(webApp);          String connectHost = MRWebAppUtil.getJHSWebappURLWithoutScheme(conf).split(":")[0];     MRWebAppUtil.setJHSWebappURLWithoutScheme(conf,         connectHost + ":" + webApp.getListenerAddress().getPort());   }    @Override   protected void serviceStop() throws Exception {     if (server != null) {       server.stop();     }     if (webApp != null) {       webApp.stop();     }     super.serviceStop();   }    @Private   public MRClientProtocol getClientHandler() {     return this.protocolHandler;   }    @Private   public InetSocketAddress getBindAddress() {     return this.bindAddress;   }    private class HSClientProtocolHandler implements HSClientProtocol {      private RecordFactory recordFactory = RecordFactoryProvider.getRecordFactory(null);      public InetSocketAddress getConnectAddress() {       return getBindAddress();     }          private Job verifyAndGetJob(final JobId jobID) throws IOException {       UserGroupInformation loginUgi = null;       Job job = null;       try {         loginUgi = UserGroupInformation.getLoginUser();         job = loginUgi.doAs(new PrivilegedExceptionAction() {            @Override           public Job run() throws Exception {             Job job = history.getJob(jobID);             return job;           }         });       } catch (InterruptedException e) {         throw new IOException(e);       }       if (job != null) {         JobACL operation = JobACL.VIEW_JOB;         checkAccess(job, operation);       }       return job;     }      @Override     public GetCountersResponse getCounters(GetCountersRequest request)         throws IOException {       JobId jobId = request.getJobId();       Job job = verifyAndGetJob(jobId);       GetCountersResponse response = recordFactory.newRecordInstance(GetCountersResponse.class);       response.setCounters(TypeConverter.toYarn(job.getAllCounters()));       return response;     }      @Override     public GetJobReportResponse getJobReport(GetJobReportRequest request)         throws IOException {       JobId jobId = request.getJobId();       Job job = verifyAndGetJob(jobId);       GetJobReportResponse response = recordFactory.newRecordInstance(GetJobReportResponse.class);       if (job != null) {         response.setJobReport(job.getReport());       }       else {         response.setJobReport(null);       }       return response;     }      @Override     public GetTaskAttemptReportResponse getTaskAttemptReport(         GetTaskAttemptReportRequest request) throws IOException {       TaskAttemptId taskAttemptId = request.getTaskAttemptId();       Job job = verifyAndGetJob(taskAttemptId.getTaskId().getJobId());       GetTaskAttemptReportResponse response = recordFactory.newRecordInstance(GetTaskAttemptReportResponse.class);       response.setTaskAttemptReport(job.getTask(taskAttemptId.getTaskId()).getAttempt(taskAttemptId).getReport());       return response;     }      @Override     public GetTaskReportResponse getTaskReport(GetTaskReportRequest request)         throws IOException {       TaskId taskId = request.getTaskId();       Job job = verifyAndGetJob(taskId.getJobId());       GetTaskReportResponse response = recordFactory.newRecordInstance(GetTaskReportResponse.class);       response.setTaskReport(job.getTask(taskId).getReport());       return response;     }      @Override     public GetTaskAttemptCompletionEventsResponse         getTaskAttemptCompletionEvents(             GetTaskAttemptCompletionEventsRequest request) throws IOException {       JobId jobId = request.getJobId();       int fromEventId = request.getFromEventId();       int maxEvents = request.getMaxEvents();        Job job = verifyAndGetJob(jobId);       GetTaskAttemptCompletionEventsResponse response = recordFactory.newRecordInstance(GetTaskAttemptCompletionEventsResponse.class);       response.addAllCompletionEvents(Arrays.asList(job.getTaskAttemptCompletionEvents(fromEventId, maxEvents)));       return response;     }      @Override     public KillJobResponse killJob(KillJobRequest request) throws IOException {       throw new IOException("Invalid operation on completed job");     }      @Override     public KillTaskResponse killTask(KillTaskRequest request)         throws IOException {       throw new IOException("Invalid operation on completed job");     }      @Override     public KillTaskAttemptResponse killTaskAttempt(         KillTaskAttemptRequest request) throws IOException {       throw new IOException("Invalid operation on completed job");     }      @Override     public GetDiagnosticsResponse getDiagnostics(GetDiagnosticsRequest request)         throws IOException {       TaskAttemptId taskAttemptId = request.getTaskAttemptId();        Job job = verifyAndGetJob(taskAttemptId.getTaskId().getJobId());        GetDiagnosticsResponse response = recordFactory.newRecordInstance(GetDiagnosticsResponse.class);       response.addAllDiagnostics(job.getTask(taskAttemptId.getTaskId()).getAttempt(taskAttemptId).getDiagnostics());       return response;     }      @Override     public FailTaskAttemptResponse failTaskAttempt(         FailTaskAttemptRequest request) throws IOException {       throw new IOException("Invalid operation on completed job");     }      @Override     public GetTaskReportsResponse getTaskReports(GetTaskReportsRequest request)         throws IOException {       JobId jobId = request.getJobId();       TaskType taskType = request.getTaskType();        GetTaskReportsResponse response = recordFactory.newRecordInstance(GetTaskReportsResponse.class);       Job job = verifyAndGetJob(jobId);       Collection tasks = job.getTasks(taskType).values();       for (Task task : tasks) {         response.addTaskReport(task.getReport());       }       return response;     }          @Override     public GetDelegationTokenResponse getDelegationToken(         GetDelegationTokenRequest request) throws IOException {        UserGroupInformation ugi = UserGroupInformation.getCurrentUser();        // Verify that the connection is kerberos authenticated         if (!isAllowedDelegationTokenOp()) {           throw new IOException(               "Delegation Token can be issued only with kerberos authentication");         }        GetDelegationTokenResponse response = recordFactory.newRecordInstance(           GetDelegationTokenResponse.class);        String user = ugi.getUserName();       Text owner = new Text(user);       Text realUser = null;       if (ugi.getRealUser() != null) {         realUser = new Text(ugi.getRealUser().getUserName());       }       MRDelegationTokenIdentifier tokenIdentifier =           new MRDelegationTokenIdentifier(owner, new Text(             request.getRenewer()), realUser);       Token realJHSToken =           new Token(tokenIdentifier,               jhsDTSecretManager);       org.apache.hadoop.yarn.api.records.Token mrDToken =           org.apache.hadoop.yarn.api.records.Token.newInstance(             realJHSToken.getIdentifier(), realJHSToken.getKind().toString(),             realJHSToken.getPassword(), realJHSToken.getService().toString());       response.setDelegationToken(mrDToken);       return response;     }      @Override     public RenewDelegationTokenResponse renewDelegationToken(         RenewDelegationTokenRequest request) throws IOException {         if (!isAllowedDelegationTokenOp()) {           throw new IOException(               "Delegation Token can be renewed only with kerberos authentication");         }          org.apache.hadoop.yarn.api.records.Token protoToken = request.getDelegationToken();         Token token =             new Token(                 protoToken.getIdentifier().array(), protoToken.getPassword()                     .array(), new Text(protoToken.getKind()), new Text(                     protoToken.getService()));          String user = UserGroupInformation.getCurrentUser().getShortUserName();         long nextExpTime = jhsDTSecretManager.renewToken(token, user);         RenewDelegationTokenResponse renewResponse = Records             .newRecord(RenewDelegationTokenResponse.class);         renewResponse.setNextExpirationTime(nextExpTime);         return renewResponse;     }      @Override     public CancelDelegationTokenResponse cancelDelegationToken(         CancelDelegationTokenRequest request) throws IOException {         if (!isAllowedDelegationTokenOp()) {           throw new IOException(               "Delegation Token can be cancelled only with kerberos authentication");         }          org.apache.hadoop.yarn.api.records.Token protoToken = request.getDelegationToken();         Token token =             new Token(                 protoToken.getIdentifier().array(), protoToken.getPassword()                     .array(), new Text(protoToken.getKind()), new Text(                     protoToken.getService()));          String user = UserGroupInformation.getCurrentUser().getUserName();         jhsDTSecretManager.cancelToken(token, user);         return Records.newRecord(CancelDelegationTokenResponse.class);     }      private void checkAccess(Job job, JobACL jobOperation)         throws IOException {        UserGroupInformation callerUGI;       callerUGI = UserGroupInformation.getCurrentUser();        if (!job.checkAccess(callerUGI, jobOperation)) {         throw new IOException(new AccessControlException("User "             + callerUGI.getShortUserName() + " cannot perform operation "             + jobOperation.name() + " on " + job.getID()));       }     }      private boolean isAllowedDelegationTokenOp() throws IOException {       if (UserGroupInformation.isSecurityEnabled()) {         return EnumSet.of(AuthenticationMethod.KERBEROS,                           AuthenticationMethod.KERBEROS_SSL,                           AuthenticationMethod.CERTIFICATE)             .contains(UserGroupInformation.getCurrentUser()                     .getRealAuthenticationMethod());       } else {         return true;       }     }    } };data class;blob, data class, long method;t;t;t;blob,  long method;;0;14159;https://github.com/apache/hadoop-common/blob/42a61a4fbc88303913c4681f0d40ffcc737e70b5/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java/#L99-L435;2;2333;14159
2341;         {             "response": "YES I found bad smells",             "detected_bad_smells": [                 "Blob",                 "Data Class"             ]         }  ;The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
final class AvlNode> {     AvlNode parent = null;     AvlNode left = null;     AvlNode right = null;      int height = 0;     int balance = 0;     T value = null;       AvlNode( AvlNode parent, T value )     {         this.parent = parent;         this.value = value;     }       public AvlNode reset( AvlNode parent, T value )     {         this.parent = parent;         left = null;         right = null;          height = 0;         this.value = value;          return this;     } };data class;blob, data class;t;t;t;blob;;0;14178;https://github.com/apache/directory-server/blob/310007cc1c7eb5415f93bed67d5553bc70980820/core-avl/src/main/java/org/apache/directory/server/core/avltree/avl/AvlNode.java/#L29-L58;2;2341;14178
2366;  {"message": "YES I found bad smells", "bad smells are": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@Named @RequestScoped public class UserUpdateBean {     private String name;          private String surname;          private int age;          private String userName;          private String password;          private @Inject @Default UserController controller;          private @Inject @Default SessionTracker tracker;          public UserUpdateBean()     {              }      public String showInfo()     {         //Just show how can access session webbeans         User user = this.controller.getUser(tracker.getUser().getId());                  setName(user.getName());         setSurname(user.getSurname());         setAge(user.getAge());         setUserName(user.getUserName());         setPassword(user.getPassword());                          return "toUpdatePage";     }      public String clear()     {         setName("");         setSurname("");         setAge(0);         setUserName("");         setPassword("");                  return null;     }          public String update()     {         this.controller.updateUserInfo(tracker.getUser().getId(), name, surname, age, userName, password);                  JSFUtility.addInfoMessage("Personal information is succesfully updated.", "");                  return null;     }          /**      * @return the name      */     public String getName()     {         return name;     }      /**      * @param name the name to set      */     public void setName(String name)     {         this.name = name;     }      /**      * @return the surname      */     public String getSurname()     {         return surname;     }      /**      * @param surname the surname to set      */     public void setSurname(String surname)     {         this.surname = surname;     }      /**      * @return the age      */     public int getAge()     {         return age;     }      /**      * @param age the age to set      */     public void setAge(int age)     {         this.age = age;     }      /**      * @return the userName      */     public String getUserName()     {         return userName;     }      /**      * @param userName the userName to set      */     public void setUserName(String userName)     {         this.userName = userName;     }      /**      * @return the password      */     public String getPassword()     {         return password;     }      /**      * @param password the password to set      */     public void setPassword(String password)     {         this.password = password;     }           };data class;blob, data class;t;t;t;blob;;0;14296;https://github.com/apache/openwebbeans/blob/7831798861478a035c9e9dcca151b5a67e4a28a3/samples/reservation/src/main/java/org/apache/webbeans/reservation/beans/user/UserUpdateBean.java/#L31-L169;2;2366;14296
2378;     {         "response": "YES I found bad smells",         "detected_smells": [             "Blob",             "Data Class"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    static class Cause {         final Tuple tuple ;         final Mapping     mapping ;          public Cause(Tuple tuple, Mapping mapping) {             super() ;             this.tuple = tuple ;             this.mapping = mapping ;         }     };data class;blob, data class;t;t;t;blob;;0;14333;https://github.com/apache/jena/blob/1cca775bbf0bb0fd3ee8ac55e31f0f30cdde3b77/jena-arq/src/main/java/org/apache/jena/sparql/util/IsoMatcher.java/#L113-L122;2;2378;14333
2387;{"response": "YES I found bad smells. the bad smells are: 1. Blob, 2. Long Method"};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    private boolean fetchNext() throws IgniteCheckedException {         if (data == null)             return false;          try {             if (!data.next()) {                 close();                  return false;             }              if (res != null) {                 Value[] values = res.currentRow();                  for (int c = 0; c < row.length; c++) {                     Value val = values[c];                      if (val instanceof GridH2ValueCacheObject) {                         GridH2ValueCacheObject valCacheObj = (GridH2ValueCacheObject)values[c];                          row[c] = valCacheObj.getObject(true);                     }                     else                         row[c] = val.getObject();                 }             }             else {                 for (int c = 0; c < row.length; c++)                     row[c] = data.getObject(c + 1);             }              return true;         }         catch (SQLException e) {             throw new IgniteSQLException(e);         }     };long method;1. blob, 2. long method;t;t;t;1. blob;;0;14351;https://github.com/apache/ignite/blob/7a7c407ea41477aae8508bfe871b4e9a67e1b277/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ResultSetIterator.java/#L101-L137;2;2387;14351
2388;     {"message": "YES I found bad smells. The bad smells are: Blob, Data Class, Long Method"};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    private boolean fetchNext() throws IgniteCheckedException {         if (data == null)             return false;          try {             if (!data.next()) {                 close();                  return false;             }              if (res != null) {                 Value[] values = res.currentRow();                  for (int c = 0; c < row.length; c++) {                     Value val = values[c];                      if (val instanceof GridH2ValueCacheObject) {                         GridH2ValueCacheObject valCacheObj = (GridH2ValueCacheObject)values[c];                          row[c] = valCacheObj.getObject(true);                     }                     else                         row[c] = val.getObject();                 }             }             else {                 for (int c = 0; c < row.length; c++)                     row[c] = data.getObject(c + 1);             }              return true;         }         catch (SQLException e) {             throw new IgniteSQLException(e);         }     };feature envy;blob, data class, long method;t;t;f;blob,  data class,  long method;feature envy;0;14352;https://github.com/apache/ignite/blob/7a7c407ea41477aae8508bfe871b4e9a67e1b277/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ResultSetIterator.java/#L101-L137;2;2388;14352
2406; {"response": "YES I found bad smells",  "bad smells are": ["Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@Entity public class Customer223 {  	@Id @GeneratedValue(strategy = GenerationType.AUTO) private long id; 	private String firstName; 	private String lastName;  	protected Customer223() {}  	public Customer223(String firstName, String lastName) { 		this.firstName = firstName; 		this.lastName = lastName; 	}  	@Override 	public String toString() { 		return String.format("Customer223[id=%d, firstName='%s', lastName='%s']", id, firstName, lastName); 	}  };data class;blob;t;t;f;blob;data class;0;14388;https://github.com/spring-projects/spring-data-examples/blob/ccae97890f85a3eaf8f4e05a1a07696e2b1e78a4/jpa/deferred/src/main/java/example/model/Customer223.java/#L8-L27;2;2406;14388
2408;{"response":"YES I found bad smells the bad smells are: 1. Blob"};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public abstract class ShareContent         implements ShareModel {     private final Uri contentUrl;     private final List peopleIds;     private final String placeId;     private final String pageId;     private final String ref;     private final ShareHashtag hashtag;      protected ShareContent(final Builder builder) {         super();         this.contentUrl = builder.contentUrl;         this.peopleIds = builder.peopleIds;         this.placeId = builder.placeId;         this.pageId = builder.pageId;         this.ref = builder.ref;         this.hashtag = builder.hashtag;     }      protected ShareContent(final Parcel in) {         this.contentUrl = in.readParcelable(Uri.class.getClassLoader());         this.peopleIds = readUnmodifiableStringList(in);         this.placeId = in.readString();         this.pageId = in.readString();         this.ref = in.readString();         this.hashtag = new ShareHashtag.Builder().readFrom(in).build();     }      /**      * URL for the content being shared.  This URL will be checked for app link meta tags for      * linking in platform specific ways.      *       * See documentation for App Links.      *      * @return {@link android.net.Uri} representation of the content link.      */     @Nullable     public Uri getContentUrl() {         return this.contentUrl;     }      /**      * List of Ids for taggable people to tag with this content.      *       * See documentation for      *       * Taggable Friends.      *      * @return {@link java.util.List} of Ids for people to tag.      */     @Nullable     public List getPeopleIds() {         return this.peopleIds;     }      /**      * The Id for a place to tag with this content.      *      * @return The Id for the place to tag.      */     @Nullable     public String getPlaceId() {         return this.placeId;     }      /**      * For shares into Messenger, this pageID will be used to map the app to page and attach      * attribution to the share.      *      * @return The ID of the Facebook page this share is associated with.      */     @Nullable     public String getPageId() {         return this.pageId;     }      /**      * A value to be added to the referrer URL when a person follows a link from this shared      * content on feed.      *      * @return The ref for the content.      */     @Nullable     public String getRef() {         return this.ref;     }      /**      * Gets the ShareHashtag, if one has been set, for this content.      *      * @return The hashtag      */     @Nullable     public ShareHashtag getShareHashtag() {         return this.hashtag;     }      public int describeContents() {         return 0;     }      public void writeToParcel(final Parcel out, final int flags) {         out.writeParcelable(this.contentUrl, 0);         out.writeStringList(this.peopleIds);         out.writeString(this.placeId);         out.writeString(this.pageId);         out.writeString(this.ref);         out.writeParcelable(this.hashtag, 0);     }      private List readUnmodifiableStringList(final Parcel in) {         final List list = new ArrayList();         in.readStringList(list);         return (list.size() == 0 ? null : Collections.unmodifiableList(list));     }      /**      * Abstract builder for {@link com.facebook.share.model.ShareContent}      */     public abstract static class Builder             implements ShareModelBuilder {         private Uri contentUrl;         private List peopleIds;         private String placeId;         private String pageId;         private String ref;         private ShareHashtag hashtag;          /**          * Set the URL for the content being shared.          *          * @param contentUrl {@link android.net.Uri} representation of the content link.          * @return The builder.          */         public E setContentUrl(@Nullable final Uri contentUrl) {             this.contentUrl = contentUrl;             return (E) this;         }          /**          * Set the list of Ids for taggable people to tag with this content.          *          * @param peopleIds {@link java.util.List} of Ids for people to tag.          * @return The builder.          */         public E setPeopleIds(@Nullable final List peopleIds) {             this.peopleIds = (peopleIds == null ? null : Collections.unmodifiableList(peopleIds));             return (E) this;         }          /**          * Set the Id for a place to tag with this content.          *          * @param placeId The Id for the place to tag.          * @return The builder.          */         public E setPlaceId(@Nullable final String placeId) {             this.placeId = placeId;             return (E) this;         }          /**          * Set the Id of the Facebook page this share is associated with.          *          * @param pageId The Id for the Page          * @return The builder          */         public E setPageId(@Nullable final String pageId) {             this.pageId = pageId;             return (E) this;         }          /**          * Set the value to be added to the referrer URL when a person follows a link from this          * shared content on feed.          *          * @param ref The ref for the content.          * @return The builder.          */         public E setRef(@Nullable final String ref) {             this.ref = ref;             return (E) this;         }          /**          * Set the ShareHashtag for this content          *          * @param shareHashtag The hashtag for this content          * @return The builder          */         public E setShareHashtag(@Nullable final ShareHashtag shareHashtag) {             this.hashtag = shareHashtag;             return (E) this;         }          @Override         public E readFrom(final P content) {             if (content == null) {                 return (E) this;             }             return (E) this                     .setContentUrl(content.getContentUrl())                     .setPeopleIds(content.getPeopleIds())                     .setPlaceId(content.getPlaceId())                     .setPageId(content.getPageId())                     .setRef(content.getRef());         }     } };data class;1. blob;t;t;f;1. blob;data class;0;14390;https://github.com/facebook/facebook-android-sdk/blob/81ca34a2a0f7ee391f90c6051c5a22e5bc8663c2/facebook-common/src/main/java/com/facebook/share/model/ShareContent.java/#L35-L243;2;2408;14390
2414;{     "output": "YES I found bad smells",     "detected_bad_smells": [         "Blob",         "Data Class",         "Long Method"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class Subchannel extends Pipe { 	/** 	 *  	 * Number of fuel rods contained within. 	 *  	 *  	 */ 	private int numRods;  	/** 	 *  	 * Diameter of the subchannel fuel rods (this assumes uniform rod sizes). 	 *  	 *  	 */ 	private double rodDiameter;  	/** 	 *  	 * Pitch of the fuel rod bundle (distance between adjacent rod centers). 	 *  	 *  	 */ 	private double pitch;  	/** 	 *  	 * Nullary constructor. 	 *  	 *  	 */ 	public Subchannel() {  		// Set the name, description and ID. 		setName("Subchannel 1"); 		setDescription("A subchannel plant component for reactors"); 		setId(1);  		// Set the default number of rods, rod diameter and pitch. 		setNumRods(1); 		setRodDiameter(1.0); 		setPitch(1.5); 		// Note: Pitch must always be set after diameter, as setPitch method 		// checks that pitch >= rodDiameter.  		return; 	}  	/** 	 *  	 * Parameterized constructor. 	 *  	 *  	 * @param numRods 	 *             	 *            Number of rods contained. 	 *             	 * @param rodDiameter 	 *             	 *            Diameter of the (uniformly-sized) fuel rods. 	 *             	 * @param pitch 	 *             	 *            Pitch of the fuel rods. 	 *             	 */ 	public Subchannel(int numRods, double rodDiameter, double pitch) {  		// Set the name, description and ID. 		setName("Subchannel 1"); 		setDescription("A subchannel plant component for reactors"); 		setId(1);  		// Set the default number of rods, rod diameter and pitch. 		setNumRods(numRods); 		setRodDiameter(rodDiameter); 		setPitch(pitch);  		return; 	}  	/** 	 * @return the numRods 	 */ 	public int getNumRods() { 		return numRods; 	}  	/** 	 * @param numRods 	 *            the numRods to set 	 */ 	public void setNumRods(int numRods) {  		// Check the input is valid. 		if (numRods >= 1) { 			this.numRods = numRods; 		} else { 			throw new InvalidParameterException("Subchannel error: The number " 					+ "of rods must greater than or equal to 1."); 		} 		return; 	}  	/** 	 * @return the rodDiameter 	 */ 	public double getRodDiameter() { 		return rodDiameter; 	}  	/** 	 * @param rodDiameter 	 *            the rodDiameter to set 	 */ 	public void setRodDiameter(double rodDiameter) {  		// Check the input is valid. 		if (rodDiameter > 0) { 			this.rodDiameter = rodDiameter; 		} else { 			throw new InvalidParameterException("Subchannel error: The rod " 					+ "diameter must be non-negative."); 		} 		return; 	}  	/** 	 * @return the pitch 	 */ 	public double getPitch() { 		return pitch; 	}  	/** 	 * @param pitch 	 *            the pitch to set 	 */ 	public void setPitch(double pitch) {  		// Check that the input is valid. 		if (pitch >= rodDiameter) { 			this.pitch = pitch; 		} else { 			throw new InvalidParameterException("Subchannel error: The rod " 					+ "pitch cannot be smaller than the rod diameter."); 		} 	}  	/** 	 *  	 * Performs an equality check between two Objects. 	 *  	 *  	 * @param otherObject 	 *             	 *            The other Object to compare against. 	 *             	 * @return  	 *         Returns true if the two objects are equal, otherwise false. 	 *          	 */ 	@Override 	public boolean equals(Object otherObject) {  		// By default, the objects are not equivalent. 		boolean equals = false;  		// Check the reference. 		if (this == otherObject) { 			equals = true; 		} 		// Check the information stored in the other object. 		else if (otherObject != null && otherObject instanceof Subchannel) {  			// Cast the other object. 			Subchannel component = (Subchannel) otherObject;  			// Compare all the variables. (Save the biggest for last; Java 			// should 			// short-circuit the logical operators as soon as a mismatch is 			// found) 			equals = (super.equals(component) && numRods == component.numRods 					&& rodDiameter == component.rodDiameter && pitch == component.pitch); 		}  		return equals; 	}  	/** 	 *  	 * Performs a deep copy and returns a newly instantiated Object. 	 *  	 *  	 * @return  	 *         The newly instantiated Object. 	 *          	 */ 	@Override 	public Object clone() {  		// Initialize a new object. 		Subchannel object = new Subchannel();  		// Copy the contents from this one. 		object.copy(this);  		// Return the newly instantiated object. 		return object; 	}  	/** 	 *  	 * Deep copies the contents of otherObject. 	 *  	 *  	 * @param otherObject 	 *             	 *            The other object to copy the contents from. 	 *             	 */ 	public void copy(Subchannel otherObject) {  		// Check the otherObject is valid. 		if (otherObject == null) { 			return; 		} 		// Copy the other object. 		super.copy(otherObject); 		numRods = otherObject.numRods; 		rodDiameter = otherObject.rodDiameter; 		pitch = otherObject.pitch;  		return; 	}  	/** 	 *  	 * Returns the hashCode of the object. 	 *  	 *  	 * @return  	 *         The hashCode of the Object. 	 *          	 */ 	@Override 	public int hashCode() {  		// Call the super's hashCode. 		int hash = super.hashCode();  		// Add local hashes. 		hash = 31 * hash + numRods; 		hash = 31 * hash + new Double(rodDiameter).hashCode(); 		hash = 31 * hash + new Double(pitch).hashCode();  		return hash; 	}  	/** 	 *  	 * Accepts PlantComponentVisitors to reveal the type of a PlantComponent. 	 *  	 *  	 * @param visitor 	 *             	 *            The PlantComponent's visitor. 	 *             	 */ 	@Override 	public void accept(IPlantComponentVisitor visitor) {  		// Only accept valid visitors. 		if (visitor != null) { 			visitor.visit(this); 		} 		return; 	} };data class;blob, data class, long method;t;t;t;blob,  long method;;0;14415;https://github.com/eclipse/ice/blob/3f6e0265f5b476ff90a660397ce83992944142c4/org.eclipse.ice.reactor.plant/src/org/eclipse/ice/reactor/plant/Subchannel.java/#L25-L303;2;2414;14415
2425;{"response": "YES I found bad smells",  "the bad smells are": ["1. Blob", "2. Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class DataSourceLoginService extends AbstractLoginService {     private static final Logger LOG = Log.getLogger(DataSourceLoginService.class);      private String _jndiName = "javax.sql.DataSource/default";     private DataSource _datasource;     private Server _server;     private String _userTableName = "users";     private String _userTableKey = "id";     private String _userTableUserField = "username";     private String _userTablePasswordField = "pwd";     private String _roleTableName = "roles";     private String _roleTableKey = "id";     private String _roleTableRoleField = "role";     private String _userRoleTableName = "user_roles";     private String _userRoleTableUserKey = "user_id";     private String _userRoleTableRoleKey = "role_id";     private String _userSql;     private String _roleSql;     private boolean _createTables = false;               /**      * DBUser      */     public class DBUserPrincipal extends UserPrincipal     {         private int _key;                  public DBUserPrincipal(String name, Credential credential, int key)         {             super(name, credential);             _key = key;         }                  public int getKey ()         {             return _key;         }              }      /* ------------------------------------------------------------ */     public DataSourceLoginService()     {     }      /* ------------------------------------------------------------ */     public DataSourceLoginService(String name)     {         setName(name);     }      /* ------------------------------------------------------------ */     public DataSourceLoginService(String name, IdentityService identityService)     {         setName(name);         setIdentityService(identityService);     }      /* ------------------------------------------------------------ */     public void setJndiName (String jndi)     {         _jndiName = jndi;     }      /* ------------------------------------------------------------ */     public String getJndiName ()     {         return _jndiName;     }      /* ------------------------------------------------------------ */     public void setServer (Server server)     {         _server=server;     }      /* ------------------------------------------------------------ */     public Server getServer()     {         return _server;     }      /* ------------------------------------------------------------ */     public void setCreateTables(boolean createTables)     {         _createTables = createTables;     }      /* ------------------------------------------------------------ */     public boolean getCreateTables()     {         return _createTables;     }      /* ------------------------------------------------------------ */     public void setUserTableName (String name)     {         _userTableName=name;     }      /* ------------------------------------------------------------ */     public String getUserTableName()     {         return _userTableName;     }      /* ------------------------------------------------------------ */     public String getUserTableKey()     {         return _userTableKey;     }       /* ------------------------------------------------------------ */     public void setUserTableKey(String tableKey)     {         _userTableKey = tableKey;     }       /* ------------------------------------------------------------ */     public String getUserTableUserField()     {         return _userTableUserField;     }       /* ------------------------------------------------------------ */     public void setUserTableUserField(String tableUserField)     {         _userTableUserField = tableUserField;     }       /* ------------------------------------------------------------ */     public String getUserTablePasswordField()     {         return _userTablePasswordField;     }       /* ------------------------------------------------------------ */     public void setUserTablePasswordField(String tablePasswordField)     {         _userTablePasswordField = tablePasswordField;     }       /* ------------------------------------------------------------ */     public String getRoleTableName()     {         return _roleTableName;     }       /* ------------------------------------------------------------ */     public void setRoleTableName(String tableName)     {         _roleTableName = tableName;     }       /* ------------------------------------------------------------ */     public String getRoleTableKey()     {         return _roleTableKey;     }       /* ------------------------------------------------------------ */     public void setRoleTableKey(String tableKey)     {         _roleTableKey = tableKey;     }       /* ------------------------------------------------------------ */     public String getRoleTableRoleField()     {         return _roleTableRoleField;     }       /* ------------------------------------------------------------ */     public void setRoleTableRoleField(String tableRoleField)     {         _roleTableRoleField = tableRoleField;     }       /* ------------------------------------------------------------ */     public String getUserRoleTableName()     {         return _userRoleTableName;     }       /* ------------------------------------------------------------ */     public void setUserRoleTableName(String roleTableName)     {         _userRoleTableName = roleTableName;     }       /* ------------------------------------------------------------ */     public String getUserRoleTableUserKey()     {         return _userRoleTableUserKey;     }       /* ------------------------------------------------------------ */     public void setUserRoleTableUserKey(String roleTableUserKey)     {         _userRoleTableUserKey = roleTableUserKey;     }       /* ------------------------------------------------------------ */     public String getUserRoleTableRoleKey()     {         return _userRoleTableRoleKey;     }       /* ------------------------------------------------------------ */     public void setUserRoleTableRoleKey(String roleTableRoleKey)     {         _userRoleTableRoleKey = roleTableRoleKey;     }              /* ------------------------------------------------------------ */     @Override     public UserPrincipal loadUserInfo (String username)     {         try         {             try (Connection connection = getConnection();                     PreparedStatement statement1 = connection.prepareStatement(_userSql))             {                 statement1.setObject(1, username);                 try (ResultSet rs1 = statement1.executeQuery())                 {                     if (rs1.next())                     {                         int key = rs1.getInt(_userTableKey);                         String credentials = rs1.getString(_userTablePasswordField);                                                  return new DBUserPrincipal(username, Credential.getCredential(credentials), key);                     }                 }             }         }         catch (NamingException e)         {             LOG.warn("No datasource for "+_jndiName, e);         }         catch (SQLException e)         {             LOG.warn("Problem loading user info for "+username, e);         }         return null;     }               /* ------------------------------------------------------------ */     @Override     public String[] loadRoleInfo (UserPrincipal user)     {         DBUserPrincipal dbuser = (DBUserPrincipal)user;          try         {             try (Connection connection = getConnection();                     PreparedStatement statement2 = connection.prepareStatement(_roleSql))             {                  List roles = new ArrayList();                  statement2.setInt(1, dbuser.getKey());                 try (ResultSet rs2 = statement2.executeQuery())                 {                     while (rs2.next())                     {                         roles.add(rs2.getString(_roleTableRoleField));                     }                                          return roles.toArray(new String[roles.size()]);                 }             }         }         catch (NamingException e)         {             LOG.warn("No datasource for "+_jndiName, e);         }         catch (SQLException e)         {             LOG.warn("Problem loading user info for "+user.getName(), e);         }         return null;     }             /* ------------------------------------------------------------ */     /**      * Lookup the datasource for the jndiName and formulate the      * necessary sql query strings based on the configured table      * and column names.      *      * @throws NamingException if unable to init jndi      * @throws SQLException if unable to init database      */     public void initDb() throws NamingException, SQLException     {         if (_datasource != null)             return;          @SuppressWarnings("unused")         InitialContext ic = new InitialContext();         assert ic!=null;          // TODO Should we try webapp scope too?          // try finding the datasource in the Server scope         if (_server != null)         {             try             {                 _datasource = (DataSource)NamingEntryUtil.lookup(_server, _jndiName);             }             catch (NameNotFoundException e)             {                 //next try the jvm scope             }         }           //try finding the datasource in the jvm scope         if (_datasource==null)         {             _datasource = (DataSource)NamingEntryUtil.lookup(null, _jndiName);         }          // set up the select statements based on the table and column names configured         _userSql = "select " + _userTableKey + "," + _userTablePasswordField                   + " from " + _userTableName                   + " where "+ _userTableUserField + " = ?";          _roleSql = "select r." + _roleTableRoleField                   + " from " + _roleTableName + " r, " + _userRoleTableName                   + " u where u."+ _userRoleTableUserKey + " = ?"                   + " and r." + _roleTableKey + " = u." + _userRoleTableRoleKey;          prepareTables();     }      /* ------------------------------------------------------------ */     /**      * @throws NamingException      * @throws SQLException      */     private void prepareTables()     throws NamingException, SQLException     {         if (_createTables)         {             boolean autocommit = true;             Connection connection = getConnection();             try (Statement stmt = connection.createStatement())             {                 autocommit = connection.getAutoCommit();                 connection.setAutoCommit(false);                 DatabaseMetaData metaData = connection.getMetaData();                  //check if tables exist                 String tableName = (metaData.storesLowerCaseIdentifiers()? _userTableName.toLowerCase(Locale.ENGLISH): (metaData.storesUpperCaseIdentifiers()?_userTableName.toUpperCase(Locale.ENGLISH): _userTableName));                 try (ResultSet result = metaData.getTables(null, null, tableName, null))                 {                     if (!result.next())                     {                         //user table default                         /*                          * create table _userTableName (_userTableKey integer,                          * _userTableUserField varchar(100) not null unique,                          * _userTablePasswordField varchar(20) not null, primary key(_userTableKey));                          */                         stmt.executeUpdate("create table "+_userTableName+ "("+_userTableKey+" integer,"+                                 _userTableUserField+" varchar(100) not null unique,"+                                 _userTablePasswordField+" varchar(20) not null, primary key("+_userTableKey+"))");                         if (LOG.isDebugEnabled()) LOG.debug("Created table "+_userTableName);                     }                 }                  tableName = (metaData.storesLowerCaseIdentifiers()? _roleTableName.toLowerCase(Locale.ENGLISH): (metaData.storesUpperCaseIdentifiers()?_roleTableName.toUpperCase(Locale.ENGLISH): _roleTableName));                 try (ResultSet result = metaData.getTables(null, null, tableName, null))                 {                     if (!result.next())                     {                         //role table default                         /*                          * create table _roleTableName (_roleTableKey integer,                          * _roleTableRoleField varchar(100) not null unique, primary key(_roleTableKey));                          */                         String str = "create table "+_roleTableName+" ("+_roleTableKey+" integer, "+                         _roleTableRoleField+" varchar(100) not null unique, primary key("+_roleTableKey+"))";                         stmt.executeUpdate(str);                         if (LOG.isDebugEnabled()) LOG.debug("Created table "+_roleTableName);                     }                 }                  tableName = (metaData.storesLowerCaseIdentifiers()? _userRoleTableName.toLowerCase(Locale.ENGLISH): (metaData.storesUpperCaseIdentifiers()?_userRoleTableName.toUpperCase(Locale.ENGLISH): _userRoleTableName));                 try (ResultSet result = metaData.getTables(null, null, tableName, null))                 {                     if (!result.next())                     {                         //user-role table                         /*                          * create table _userRoleTableName (_userRoleTableUserKey integer,                          * _userRoleTableRoleKey integer,                          * primary key (_userRoleTableUserKey, _userRoleTableRoleKey));                          *                          * create index idx_user_role on _userRoleTableName (_userRoleTableUserKey);                          */                         stmt.executeUpdate("create table "+_userRoleTableName+" ("+_userRoleTableUserKey+" integer, "+                                 _userRoleTableRoleKey+" integer, "+                                 "primary key ("+_userRoleTableUserKey+", "+_userRoleTableRoleKey+"))");                         stmt.executeUpdate("create index indx_user_role on "+_userRoleTableName+"("+_userRoleTableUserKey+")");                         if (LOG.isDebugEnabled()) LOG.debug("Created table "+_userRoleTableName +" and index");                     }                 }                 connection.commit();             }             finally             {                 try                 {                     connection.setAutoCommit(autocommit);                 }                 catch (SQLException e)                 {                     if (LOG.isDebugEnabled()) LOG.debug("Prepare tables", e);                 }                 finally                 {                     try                     {                         connection.close();                     }                     catch (SQLException e)                     {                         if (LOG.isDebugEnabled()) LOG.debug("Prepare tables", e);                     }                 }             }         }         else if (LOG.isDebugEnabled())         {             LOG.debug("createTables false");         }     }      /* ------------------------------------------------------------ */     /**      * @return      * @throws NamingException      * @throws SQLException      */     private Connection getConnection ()     throws NamingException, SQLException     {         initDb();         return _datasource.getConnection();     } };data class;1. blob, 2. long method;t;t;f;1. blob,  2. long method;data class;0;14444;https://github.com/eclipse/jetty.project/blob/65528f76c5ef6ddca11385f9721c8f0bc5f2eed7/jetty-plus/src/main/java/org/eclipse/jetty/plus/security/DataSourceLoginService.java/#L52-L530;2;2425;14444
2432;{"response": "YES I found bad smells the bad smells are: 1. Blob, 2. Data Class"};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@XmlRootElement(name = "Product") public class Product {     private long id;     private String description;      public long getId() {         return id;     }      public void setId(long id) {         this.id = id;     }      public String getDescription() {         return description;     }      public void setDescription(String d) {         this.description = d;     } };data class;1. blob, 2. data class;t;t;t;1. blob;;0;14460;https://github.com/apache/cxf/blob/6bf89e9c8804c8845ec4d38583dd33eea8256439/distribution/src/main/release/samples/jax_rs/spring_security/src/main/java/demo/jaxrs/service/Product.java/#L23-L43;2;2432;14460
2434;{"response":"YES I found bad smells","the bad smells are":["Blob","Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public abstract class ExternalLoadBalancerDeviceManagerImpl extends AdapterBase implements ExternalLoadBalancerDeviceManager, ResourceStateAdapter {      @Inject     NetworkExternalLoadBalancerDao _networkExternalLBDao;     @Inject     ExternalLoadBalancerDeviceDao _externalLoadBalancerDeviceDao;     @Inject     HostDao _hostDao;     @Inject     DataCenterDao _dcDao;     @Inject     NetworkModel _networkModel;     @Inject     NetworkOrchestrationService _networkMgr;     @Inject     InlineLoadBalancerNicMapDao _inlineLoadBalancerNicMapDao;     @Inject     NicDao _nicDao;     @Inject     AgentManager _agentMgr;     @Inject     ResourceManager _resourceMgr;     @Inject     IPAddressDao _ipAddressDao;     @Inject     VlanDao _vlanDao;     @Inject     NetworkOfferingDao _networkOfferingDao;     @Inject     AccountDao _accountDao;     @Inject     PhysicalNetworkDao _physicalNetworkDao;     @Inject     PhysicalNetworkServiceProviderDao _physicalNetworkServiceProviderDao;     @Inject     AccountManager _accountMgr;     @Inject     UserStatisticsDao _userStatsDao;     @Inject     NetworkDao _networkDao;     @Inject     DomainRouterDao _routerDao;     @Inject     LoadBalancerDao _loadBalancerDao;     @Inject     PortForwardingRulesDao _portForwardingRulesDao;     @Inject     ConfigurationDao _configDao;     @Inject     HostDetailsDao _hostDetailDao;     @Inject     NetworkExternalLoadBalancerDao _networkLBDao;     @Inject     NetworkServiceMapDao _ntwkSrvcProviderDao;     @Inject     NetworkExternalFirewallDao _networkExternalFirewallDao;     @Inject     ExternalFirewallDeviceDao _externalFirewallDeviceDao;     @Inject     protected HostPodDao _podDao = null;     @Inject     IpAddressManager _ipAddrMgr;     @Inject     protected     VirtualMachineManager _itMgr;     @Inject     VMInstanceDao _vmDao;     @Inject     VMTemplateDao _templateDao;     @Inject     ServiceOfferingDao _serviceOfferingDao;     @Inject     PhysicalNetworkServiceProviderDao _physicalProviderDao;     @Inject     VirtualRouterProviderDao _vrProviderDao;      private long _defaultLbCapacity;     private static final org.apache.log4j.Logger s_logger = Logger.getLogger(ExternalLoadBalancerDeviceManagerImpl.class);      @Override     @DB     public ExternalLoadBalancerDeviceVO addExternalLoadBalancer(long physicalNetworkId, String url, String username, String password, final String deviceName,         ServerResource resource, final boolean gslbProvider, final boolean exclusiveGslbProivider,         final String gslbSitePublicIp, final String gslbSitePrivateIp) {          PhysicalNetworkVO pNetwork = null;         final NetworkDevice ntwkDevice = NetworkDevice.getNetworkDevice(deviceName);         long zoneId;          if ((ntwkDevice == null) || (url == null) || (username == null) || (resource == null) || (password == null)) {             throw new InvalidParameterValueException("Atleast one of the required parameters (url, username, password,"                 + " server resource, zone id/physical network id) is not specified or a valid parameter.");         }          pNetwork = _physicalNetworkDao.findById(physicalNetworkId);         if (pNetwork == null) {             throw new InvalidParameterValueException("Could not find phyical network with ID: " + physicalNetworkId);         }          zoneId = pNetwork.getDataCenterId();         PhysicalNetworkServiceProviderVO ntwkSvcProvider =             _physicalNetworkServiceProviderDao.findByServiceProvider(pNetwork.getId(), ntwkDevice.getNetworkServiceProvder());          ntwkSvcProvider = _physicalNetworkServiceProviderDao.findByServiceProvider(pNetwork.getId(), ntwkDevice.getNetworkServiceProvder());         if (ntwkSvcProvider == null) {             throw new CloudRuntimeException("Network Service Provider: " + ntwkDevice.getNetworkServiceProvder() + " is not enabled in the physical network: " +                 physicalNetworkId + "to add this device");         } else if (ntwkSvcProvider.getState() == PhysicalNetworkServiceProvider.State.Shutdown) {             throw new CloudRuntimeException("Network Service Provider: " + ntwkSvcProvider.getProviderName() + " is in shutdown state in the physical network: " +                 physicalNetworkId + "to add this device");         }          if (gslbProvider) {             ExternalLoadBalancerDeviceVO zoneGslbProvider =                 _externalLoadBalancerDeviceDao.findGslbServiceProvider(physicalNetworkId, ntwkDevice.getNetworkServiceProvder());             if (zoneGslbProvider != null) {                 throw new CloudRuntimeException("There is a GSLB service provider configured in the zone alredy.");             }         }          URI uri;         try {             uri = new URI(url);         } catch (Exception e) {             s_logger.debug(e);             throw new InvalidParameterValueException(e.getMessage());         }          String ipAddress = uri.getHost();         Map hostDetails = new HashMap();         String hostName = getExternalLoadBalancerResourceGuid(pNetwork.getId(), deviceName, ipAddress);         hostDetails.put("name", hostName);         hostDetails.put("guid", UUID.randomUUID().toString());         hostDetails.put("zoneId", String.valueOf(pNetwork.getDataCenterId()));         hostDetails.put("ip", ipAddress);         hostDetails.put("physicalNetworkId", String.valueOf(pNetwork.getId()));         hostDetails.put("username", username);         hostDetails.put("password", password);         hostDetails.put("deviceName", deviceName);          // leave parameter validation to be part server resource configure         Map configParams = new HashMap();         UrlUtil.parseQueryParameters(uri.getQuery(), false, configParams);         hostDetails.putAll(configParams);          try {             resource.configure(hostName, hostDetails);              final Host host = _resourceMgr.addHost(zoneId, resource, Host.Type.ExternalLoadBalancer, hostDetails);             if (host != null) {                  final boolean dedicatedUse =                     (configParams.get(ApiConstants.LOAD_BALANCER_DEVICE_DEDICATED) != null) ? Boolean.parseBoolean(configParams.get(ApiConstants.LOAD_BALANCER_DEVICE_DEDICATED))                         : false;                 long capacity = NumbersUtil.parseLong(configParams.get(ApiConstants.LOAD_BALANCER_DEVICE_CAPACITY), 0);                 if (capacity == 0) {                     capacity = _defaultLbCapacity;                 }                  final long capacityFinal = capacity;                 final PhysicalNetworkVO pNetworkFinal = pNetwork;                 return Transaction.execute(new TransactionCallback() {                     @Override                     public ExternalLoadBalancerDeviceVO doInTransaction(TransactionStatus status) {                         ExternalLoadBalancerDeviceVO lbDeviceVO =                             new ExternalLoadBalancerDeviceVO(host.getId(), pNetworkFinal.getId(), ntwkDevice.getNetworkServiceProvder(), deviceName, capacityFinal,                                 dedicatedUse, gslbProvider);                         if (gslbProvider) {                             lbDeviceVO.setGslbSitePublicIP(gslbSitePublicIp);                             lbDeviceVO.setGslbSitePrivateIP(gslbSitePrivateIp);                             lbDeviceVO.setExclusiveGslbProvider(exclusiveGslbProivider);                         }                         _externalLoadBalancerDeviceDao.persist(lbDeviceVO);                         DetailVO hostDetail = new DetailVO(host.getId(), ApiConstants.LOAD_BALANCER_DEVICE_ID, String.valueOf(lbDeviceVO.getId()));                         _hostDetailDao.persist(hostDetail);                          return lbDeviceVO;                     }                 });             } else {                 throw new CloudRuntimeException("Failed to add load balancer device due to internal error.");             }         } catch (ConfigurationException e) {             throw new CloudRuntimeException(e.getMessage());         }     }      @Override     public boolean deleteExternalLoadBalancer(long hostId) {         HostVO externalLoadBalancer = _hostDao.findById(hostId);         if (externalLoadBalancer == null) {             throw new InvalidParameterValueException("Could not find an external load balancer with ID: " + hostId);         }          DetailVO lbHostDetails = _hostDetailDao.findDetail(hostId, ApiConstants.LOAD_BALANCER_DEVICE_ID);         long lbDeviceId = Long.parseLong(lbHostDetails.getValue());          ExternalLoadBalancerDeviceVO lbDeviceVo = _externalLoadBalancerDeviceDao.findById(lbDeviceId);         if (lbDeviceVo.getAllocationState() == LBDeviceAllocationState.Provider) {             // check if cloudstack has provisioned any load balancer appliance on the device before deleting             List lbDevices = _externalLoadBalancerDeviceDao.listAll();             if (lbDevices != null) {                 for (ExternalLoadBalancerDeviceVO lbDevice : lbDevices) {                     if (lbDevice.getParentHostId() == hostId) {                         throw new CloudRuntimeException(                             "This load balancer device can not be deleted as there are one or more load balancers applainces provisioned by cloudstack on the device.");                     }                 }             }         } else {             // check if any networks are using this load balancer device             List networks = _networkLBDao.listByLoadBalancerDeviceId(lbDeviceId);             if ((networks != null) && !networks.isEmpty()) {                 throw new CloudRuntimeException("Delete can not be done as there are networks using this load balancer device ");             }         }          try {             // put the host in maintenance state in order for it to be deleted             externalLoadBalancer.setResourceState(ResourceState.Maintenance);             _hostDao.update(hostId, externalLoadBalancer);             _resourceMgr.deleteHost(hostId, false, false);              // delete the external load balancer entry             _externalLoadBalancerDeviceDao.remove(lbDeviceId);              return true;         } catch (Exception e) {             s_logger.debug(e);             return false;         }     }      @Override     public List listExternalLoadBalancers(long physicalNetworkId, String deviceName) {         List lbHosts = new ArrayList();         NetworkDevice lbNetworkDevice = NetworkDevice.getNetworkDevice(deviceName);         PhysicalNetworkVO pNetwork = null;          pNetwork = _physicalNetworkDao.findById(physicalNetworkId);          if ((pNetwork == null) || (lbNetworkDevice == null)) {             throw new InvalidParameterValueException("Atleast one of the required parameter physical networkId, device name is invalid.");         }          PhysicalNetworkServiceProviderVO ntwkSvcProvider =             _physicalNetworkServiceProviderDao.findByServiceProvider(pNetwork.getId(), lbNetworkDevice.getNetworkServiceProvder());         // if provider not configured in to physical network, then there can be no instances         if (ntwkSvcProvider == null) {             return null;         }          List lbDevices =             _externalLoadBalancerDeviceDao.listByPhysicalNetworkAndProvider(physicalNetworkId, ntwkSvcProvider.getProviderName());         for (ExternalLoadBalancerDeviceVO provderInstance : lbDevices) {             lbHosts.add(_hostDao.findById(provderInstance.getHostId()));         }         return lbHosts;     }      public ExternalLoadBalancerResponse createExternalLoadBalancerResponse(Host externalLoadBalancer) {         Map lbDetails = _hostDetailDao.findDetails(externalLoadBalancer.getId());         ExternalLoadBalancerResponse response = new ExternalLoadBalancerResponse();         response.setId(externalLoadBalancer.getUuid());         response.setIpAddress(externalLoadBalancer.getPrivateIpAddress());         response.setUsername(lbDetails.get("username"));         response.setPublicInterface(lbDetails.get("publicInterface"));         response.setPrivateInterface(lbDetails.get("privateInterface"));         response.setNumRetries(lbDetails.get("numRetries"));         return response;     }      public String getExternalLoadBalancerResourceGuid(long physicalNetworkId, String deviceName, String ip) {         return physicalNetworkId + "-" + deviceName + "-" + ip;     }      @Override     public ExternalLoadBalancerDeviceVO getExternalLoadBalancerForNetwork(Network network) {         NetworkExternalLoadBalancerVO lbDeviceForNetwork = _networkExternalLBDao.findByNetworkId(network.getId());         if (lbDeviceForNetwork != null) {             long lbDeviceId = lbDeviceForNetwork.getExternalLBDeviceId();             ExternalLoadBalancerDeviceVO lbDeviceVo = _externalLoadBalancerDeviceDao.findById(lbDeviceId);             assert (lbDeviceVo != null);             return lbDeviceVo;         }         return null;     }      public void setExternalLoadBalancerForNetwork(Network network, long externalLBDeviceID) {         NetworkExternalLoadBalancerVO lbDeviceForNetwork = new NetworkExternalLoadBalancerVO(network.getId(), externalLBDeviceID);         _networkExternalLBDao.persist(lbDeviceForNetwork);     }      @DB     protected ExternalLoadBalancerDeviceVO allocateLoadBalancerForNetwork(final Network guestConfig) throws InsufficientCapacityException {         boolean retry = true;         boolean tryLbProvisioning = false;         ExternalLoadBalancerDeviceVO lbDevice = null;         long physicalNetworkId = guestConfig.getPhysicalNetworkId();         NetworkOfferingVO offering = _networkOfferingDao.findById(guestConfig.getNetworkOfferingId());         String provider = _ntwkSrvcProviderDao.getProviderForServiceInNetwork(guestConfig.getId(), Service.Lb);          while (retry) {             GlobalLock deviceMapLock = GlobalLock.getInternLock("LoadBalancerAllocLock");             try {                 if (deviceMapLock.lock(120)) {                     try {                         final boolean dedicatedLB = offering.isDedicatedLB(); // does network offering supports a dedicated load balancer?                          try {                             lbDevice = Transaction.execute(new TransactionCallbackWithException() {                                 @Override                                 public ExternalLoadBalancerDeviceVO doInTransaction(TransactionStatus status) throws InsufficientCapacityException {                                     // FIXME: should the device allocation be done during network implement phase or do a                                     // lazy allocation when first rule for the network is configured??                                      // find a load balancer device for this network as per the network offering                                     ExternalLoadBalancerDeviceVO lbDevice = findSuitableLoadBalancerForNetwork(guestConfig, dedicatedLB);                                     long lbDeviceId = lbDevice.getId();                                      // persist the load balancer device id that will be used for this network. Once a network                                     // is implemented on a LB device then later on all rules will be programmed on to same device                                     NetworkExternalLoadBalancerVO networkLB = new NetworkExternalLoadBalancerVO(guestConfig.getId(), lbDeviceId);                                     _networkExternalLBDao.persist(networkLB);                                      // mark device to be either dedicated or shared use                                     lbDevice.setAllocationState(dedicatedLB ? LBDeviceAllocationState.Dedicated : LBDeviceAllocationState.Shared);                                     _externalLoadBalancerDeviceDao.update(lbDeviceId, lbDevice);                                     return lbDevice;                                 }                             });                              // allocated load balancer for the network, so skip retry                             tryLbProvisioning = false;                             retry = false;                         } catch (InsufficientCapacityException exception) {                             // if already attempted to provision load balancer then throw out of capacity exception,                             if (tryLbProvisioning) {                                 retry = false;                                 // TODO: throwing warning instead of error for now as its possible another provider can service this network                                 s_logger.warn("There are no load balancer device with the capacity for implementing this network");                                 throw exception;                             } else {                                 tryLbProvisioning = true; // if possible provision a LB appliance in to the physical network                             }                         }                     } finally {                         deviceMapLock.unlock();                     }                 }             } finally {                 deviceMapLock.releaseRef();             }              // there are no LB devices or there is no free capacity on the devices in the physical network so provision a new LB appliance             if (tryLbProvisioning) {                 // check if LB appliance can be dynamically provisioned                 List providerLbDevices =                     _externalLoadBalancerDeviceDao.listByProviderAndDeviceAllocationState(physicalNetworkId, provider, LBDeviceAllocationState.Provider);                 if ((providerLbDevices != null) && (!providerLbDevices.isEmpty())) {                     for (ExternalLoadBalancerDeviceVO lbProviderDevice : providerLbDevices) {                         if (lbProviderDevice.getState() == LBDeviceState.Enabled) {                             // acquire a private IP from the data center which will be used as management IP of provisioned LB appliance,                             DataCenterIpAddressVO dcPrivateIp = _dcDao.allocatePrivateIpAddress(guestConfig.getDataCenterId(), lbProviderDevice.getUuid());                             if (dcPrivateIp == null) {                                 throw new InsufficientNetworkCapacityException("failed to acquire a priavate IP in the zone " + guestConfig.getDataCenterId() +                                     " needed for management IP of the load balancer appliance", DataCenter.class, guestConfig.getDataCenterId());                             }                             Pod pod = _podDao.findById(dcPrivateIp.getPodId());                             String lbIP = dcPrivateIp.getIpAddress();                             String netmask = NetUtils.getCidrNetmask(pod.getCidrSize());                             String gateway = pod.getGateway();                              // send CreateLoadBalancerApplianceCommand to the host capable of provisioning                             CreateLoadBalancerApplianceCommand lbProvisionCmd = new CreateLoadBalancerApplianceCommand(lbIP, netmask, gateway);                             CreateLoadBalancerApplianceAnswer createLbAnswer = null;                             try {                                 createLbAnswer = (CreateLoadBalancerApplianceAnswer)_agentMgr.easySend(lbProviderDevice.getHostId(), lbProvisionCmd);                                 if (createLbAnswer == null || !createLbAnswer.getResult()) {                                     s_logger.error("Could not provision load balancer instance on the load balancer device " + lbProviderDevice.getId());                                     continue;                                 }                             } catch (Exception agentException) {                                 s_logger.error("Could not provision load balancer instance on the load balancer device " + lbProviderDevice.getId() + " due to " +                                     agentException.getMessage());                                 continue;                             }                              String username = createLbAnswer.getUsername();                             String password = createLbAnswer.getPassword();                             String publicIf = createLbAnswer.getPublicInterface();                             String privateIf = createLbAnswer.getPrivateInterface();                              // we have provisioned load balancer so add the appliance as cloudstack provisioned external load balancer                             String dedicatedLb = offering.isDedicatedLB() ? "true" : "false";                             String capacity = Long.toString(lbProviderDevice.getCapacity());                              // acquire a public IP to associate with lb appliance (used as subnet IP to make the appliance part of private network)                             PublicIp publicIp =                                 _ipAddrMgr.assignPublicIpAddress(guestConfig.getDataCenterId(), null, _accountMgr.getSystemAccount(), VlanType.VirtualNetwork, null,                                     null, false, false);                             String publicIPNetmask = publicIp.getVlanNetmask();                             String publicIPgateway = publicIp.getVlanGateway();                             String publicIP = publicIp.getAddress().toString();                             String publicIPVlanTag="";                             try {                                 publicIPVlanTag = BroadcastDomainType.getValue(publicIp.getVlanTag());                             } catch (URISyntaxException e) {                                 s_logger.error("Failed to parse public ip vlan tag" + e.getMessage());                             }                              String url =                                 "https://" + lbIP + "?publicinterface=" + publicIf + "&privateinterface=" + privateIf + "&lbdevicededicated=" + dedicatedLb +                                     "&cloudmanaged=true" + "&publicip=" + publicIP + "&publicipnetmask=" + publicIPNetmask + "&lbdevicecapacity=" + capacity +                                     "&publicipvlan=" + publicIPVlanTag + "&publicipgateway=" + publicIPgateway;                             ExternalLoadBalancerDeviceVO lbAppliance = null;                             try {                                 lbAppliance =                                     addExternalLoadBalancer(physicalNetworkId, url, username, password, createLbAnswer.getDeviceName(),                                         createLbAnswer.getServerResource(), false, false, null, null);                             } catch (Exception e) {                                 s_logger.error("Failed to add load balancer appliance in to cloudstack due to " + e.getMessage() +                                     ". So provisioned load balancer appliance will be destroyed.");                             }                              if (lbAppliance != null) {                                 // mark the load balancer as cloudstack managed and set parent host id on which lb appliance is provisioned                                 ExternalLoadBalancerDeviceVO managedLb = _externalLoadBalancerDeviceDao.findById(lbAppliance.getId());                                 managedLb.setIsManagedDevice(true);                                 managedLb.setParentHostId(lbProviderDevice.getHostId());                                 _externalLoadBalancerDeviceDao.update(lbAppliance.getId(), managedLb);                             } else {                                 // failed to add the provisioned load balancer into cloudstack so destroy the appliance                                 DestroyLoadBalancerApplianceCommand lbDeleteCmd = new DestroyLoadBalancerApplianceCommand(lbIP);                                 DestroyLoadBalancerApplianceAnswer answer = null;                                 try {                                     answer = (DestroyLoadBalancerApplianceAnswer)_agentMgr.easySend(lbProviderDevice.getHostId(), lbDeleteCmd);                                     if (answer == null || !answer.getResult()) {                                         s_logger.warn("Failed to destroy load balancer appliance created");                                     } else {                                         // release the public & private IP back to dc pool, as the load balancer appliance is now destroyed                                         _dcDao.releasePrivateIpAddress(lbIP, guestConfig.getDataCenterId(), null);                                         _ipAddrMgr.disassociatePublicIpAddress(publicIp.getId(), _accountMgr.getSystemUser().getId(), _accountMgr.getSystemAccount());                                     }                                 } catch (Exception e) {                                     s_logger.warn("Failed to destroy load balancer appliance created for the network" + guestConfig.getId() + " due to " + e.getMessage());                                 }                             }                         }                     }                 }             }         }          return lbDevice;     }      @Override     public ExternalLoadBalancerDeviceVO findSuitableLoadBalancerForNetwork(Network network, boolean dedicatedLb) throws InsufficientCapacityException {         long physicalNetworkId = network.getPhysicalNetworkId();         List lbDevices = null;         String provider = _ntwkSrvcProviderDao.getProviderForServiceInNetwork(network.getId(), Service.Lb);         assert (provider != null);          if (dedicatedLb) {             lbDevices = _externalLoadBalancerDeviceDao.listByProviderAndDeviceAllocationState(physicalNetworkId, provider, LBDeviceAllocationState.Free);             if (lbDevices != null && !lbDevices.isEmpty()) {                 // return first device that is free, fully configured and meant for dedicated use                 for (ExternalLoadBalancerDeviceVO lbdevice : lbDevices) {                     if (lbdevice.getState() == LBDeviceState.Enabled && lbdevice.getIsDedicatedDevice()) {                         return lbdevice;                     }                 }             }         } else {             // get the LB devices that are already allocated for shared use             lbDevices = _externalLoadBalancerDeviceDao.listByProviderAndDeviceAllocationState(physicalNetworkId, provider, LBDeviceAllocationState.Shared);              if (lbDevices != null) {                  ExternalLoadBalancerDeviceVO maxFreeCapacityLbdevice = null;                 long maxFreeCapacity = 0;                  // loop through the LB device in the physical network and pick the one with maximum free capacity                 for (ExternalLoadBalancerDeviceVO lbdevice : lbDevices) {                      // skip if device is not enabled                     if (lbdevice.getState() != LBDeviceState.Enabled) {                         continue;                     }                      // get the used capacity from the list of guest networks that are mapped to this load balancer                     List mappedNetworks = _networkExternalLBDao.listByLoadBalancerDeviceId(lbdevice.getId());                     long usedCapacity = ((mappedNetworks == null) || (mappedNetworks.isEmpty())) ? 0 : mappedNetworks.size();                      // get the configured capacity for this device                     long fullCapacity = lbdevice.getCapacity();                     if (fullCapacity == 0) {                         fullCapacity = _defaultLbCapacity; // if capacity not configured then use the default                     }                      long freeCapacity = fullCapacity - usedCapacity;                     if (freeCapacity > 0) {                         if (maxFreeCapacityLbdevice == null) {                             maxFreeCapacityLbdevice = lbdevice;                             maxFreeCapacity = freeCapacity;                         } else if (freeCapacity > maxFreeCapacity) {                             maxFreeCapacityLbdevice = lbdevice;                             maxFreeCapacity = freeCapacity;                         }                     }                 }                  // return the device with maximum free capacity and is meant for shared use                 if (maxFreeCapacityLbdevice != null) {                     return maxFreeCapacityLbdevice;                 }             }              // if we are here then there are no existing LB devices in shared use or the devices in shared use has no // free capacity left             // so allocate a new load balancer configured for shared use from the pool of free LB devices             lbDevices = _externalLoadBalancerDeviceDao.listByProviderAndDeviceAllocationState(physicalNetworkId, provider, LBDeviceAllocationState.Free);             if (lbDevices != null && !lbDevices.isEmpty()) {                 for (ExternalLoadBalancerDeviceVO lbdevice : lbDevices) {                     if (lbdevice.getState() == LBDeviceState.Enabled && !lbdevice.getIsDedicatedDevice()) {                         return lbdevice;                     }                 }             }         }          // there are no devices which capacity         throw new InsufficientNetworkCapacityException("Unable to find a load balancing provider with sufficient capcity " + " to implement the network", Network.class,             network.getId());     }      @DB     protected boolean freeLoadBalancerForNetwork(final Network guestConfig) {         GlobalLock deviceMapLock = GlobalLock.getInternLock("LoadBalancerAllocLock");          try {             if (deviceMapLock.lock(120)) {                 ExternalLoadBalancerDeviceVO lbDevice = Transaction.execute(new TransactionCallback() {                     @Override                     public ExternalLoadBalancerDeviceVO doInTransaction(TransactionStatus status) {                         // since network is shutdown remove the network mapping to the load balancer device                         NetworkExternalLoadBalancerVO networkLBDevice = _networkExternalLBDao.findByNetworkId(guestConfig.getId());                         long lbDeviceId = networkLBDevice.getExternalLBDeviceId();                         _networkExternalLBDao.remove(networkLBDevice.getId());                          List ntwksMapped = _networkExternalLBDao.listByLoadBalancerDeviceId(networkLBDevice.getExternalLBDeviceId());                         ExternalLoadBalancerDeviceVO lbDevice = _externalLoadBalancerDeviceDao.findById(lbDeviceId);                         boolean lbInUse = !(ntwksMapped == null || ntwksMapped.isEmpty());                         boolean lbCloudManaged = lbDevice.getIsManagedDevice();                          if (!lbInUse && !lbCloudManaged) {                             // this is the last network mapped to the load balancer device so set device allocation state to be free                             lbDevice.setAllocationState(LBDeviceAllocationState.Free);                             _externalLoadBalancerDeviceDao.update(lbDevice.getId(), lbDevice);                         }                          // commit the changes before sending agent command to destroy cloudstack managed LB                         if (!lbInUse && lbCloudManaged) {                             return lbDevice;                         } else {                             return null;                         }                     }                 });                  if (lbDevice != null) {                     // send DestroyLoadBalancerApplianceCommand to the host where load balancer appliance is provisioned                     Host lbHost = _hostDao.findById(lbDevice.getHostId());                     String lbIP = lbHost.getPrivateIpAddress();                     DestroyLoadBalancerApplianceCommand lbDeleteCmd = new DestroyLoadBalancerApplianceCommand(lbIP);                     DestroyLoadBalancerApplianceAnswer answer = null;                     try {                         answer = (DestroyLoadBalancerApplianceAnswer)_agentMgr.easySend(lbDevice.getParentHostId(), lbDeleteCmd);                         if (answer == null || !answer.getResult()) {                             s_logger.warn("Failed to destoy load balancer appliance used by the network"                                     + guestConfig.getId() + " due to " + answer == null ? "communication error with agent"                                     : answer.getDetails());                         }                     } catch (Exception e) {                         s_logger.warn("Failed to destroy load balancer appliance used by the network" + guestConfig.getId() + " due to " + e.getMessage());                     }                      if (s_logger.isDebugEnabled()) {                         s_logger.debug("Successfully destroyed load balancer appliance used for the network" + guestConfig.getId());                     }                     deviceMapLock.unlock();                      // remove the provisioned load balancer appliance from cloudstack                     deleteExternalLoadBalancer(lbHost.getId());                      // release the private IP back to dc pool, as the load balancer appliance is now destroyed                     _dcDao.releasePrivateIpAddress(lbHost.getPrivateIpAddress(), guestConfig.getDataCenterId(), null);                      // release the public IP allocated for this LB appliance                     DetailVO publicIpDetail = _hostDetailDao.findDetail(lbHost.getId(), "publicip");                     IPAddressVO ipVo = _ipAddressDao.findByIpAndDcId(guestConfig.getDataCenterId(), publicIpDetail.toString());                     _ipAddrMgr.disassociatePublicIpAddress(ipVo.getId(), _accountMgr.getSystemUser().getId(), _accountMgr.getSystemAccount());                 } else {                     deviceMapLock.unlock();                 }                  return true;             } else {                 s_logger.error("Failed to release load balancer device for the network" + guestConfig.getId() + "as failed to acquire lock ");                 return false;             }         } catch (Exception exception) {             s_logger.error("Failed to release load balancer device for the network" + guestConfig.getId() + " due to " + exception.getMessage());         } finally {             deviceMapLock.releaseRef();         }          return false;     }      private void applyStaticNatRuleForInlineLBRule(DataCenterVO zone, Network network, boolean revoked, String publicIp, String privateIp)         throws ResourceUnavailableException {         List staticNats = new ArrayList();         IPAddressVO ipVO = _ipAddressDao.listByDcIdIpAddress(zone.getId(), publicIp).get(0);         StaticNatImpl staticNat = new StaticNatImpl(ipVO.getAllocatedToAccountId(), ipVO.getAllocatedInDomainId(), network.getId(), ipVO.getId(), privateIp, revoked);         staticNats.add(staticNat);         StaticNatServiceProvider element = _networkMgr.getStaticNatProviderForNetwork(network);         element.applyStaticNats(network, staticNats);     }      private enum MappingState {         Create, Remove, Unchanged,     };      private class MappingNic {         private Nic nic;         private MappingState state;          public Nic getNic() {             return nic;         }          public void setNic(Nic nic) {             this.nic = nic;         }          public MappingState getState() {             return state;         }          public void setState(MappingState state) {             this.state = state;         }     };      private MappingNic getLoadBalancingIpNic(DataCenterVO zone, Network network, long sourceIpId, boolean revoked, String existedGuestIp)         throws ResourceUnavailableException {         String srcIp = _networkModel.getIp(sourceIpId).getAddress().addr();         InlineLoadBalancerNicMapVO mapping = _inlineLoadBalancerNicMapDao.findByPublicIpAddress(srcIp);         Nic loadBalancingIpNic = null;         MappingNic nic = new MappingNic();         nic.setState(MappingState.Unchanged);         if (!revoked) {             if (mapping == null) {                 // Acquire a new guest IP address and save it as the load balancing IP address                 String loadBalancingIpAddress = existedGuestIp;                  if (loadBalancingIpAddress == null) {                     if (network.getGuestType() == Network.GuestType.Isolated) {                         loadBalancingIpAddress = _ipAddrMgr.acquireGuestIpAddress(network, null);                     } else if (network.getGuestType() == Network.GuestType.Shared) {                         try {                             PublicIp directIp =                                 _ipAddrMgr.assignPublicIpAddress(network.getDataCenterId(), null, _accountDao.findById(network.getAccountId()), VlanType.DirectAttached,                                     network.getId(), null, true, false);                             loadBalancingIpAddress = directIp.getAddress().addr();                         } catch (InsufficientCapacityException capException) {                             String msg = "Ran out of guest IP addresses from the shared network.";                             s_logger.error(msg);                             throw new ResourceUnavailableException(msg, DataCenter.class, network.getDataCenterId());                         }                     }                 }                  if (loadBalancingIpAddress == null) {                     String msg = "Ran out of guest IP addresses.";                     s_logger.error(msg);                     throw new ResourceUnavailableException(msg, DataCenter.class, network.getDataCenterId());                 }                  // If a NIC doesn't exist for the load balancing IP address, create one                 loadBalancingIpNic = _nicDao.findByIp4AddressAndNetworkId(loadBalancingIpAddress, network.getId());                 if (loadBalancingIpNic == null) {                     loadBalancingIpNic = _networkMgr.savePlaceholderNic(network, loadBalancingIpAddress, null, null);                 }                  // Save a mapping between the source IP address and the load balancing IP address NIC                 mapping = new InlineLoadBalancerNicMapVO(srcIp, loadBalancingIpNic.getId());                 _inlineLoadBalancerNicMapDao.persist(mapping);                  // On the firewall provider for the network, create a static NAT rule between the source IP                 // address and the load balancing IP address                 try {                     applyStaticNatRuleForInlineLBRule(zone, network, revoked, srcIp, loadBalancingIpNic.getIPv4Address());                 } catch (ResourceUnavailableException ex) {                     // Rollback db operation                     _inlineLoadBalancerNicMapDao.expunge(mapping.getId());                     _nicDao.expunge(loadBalancingIpNic.getId());                     throw ex;                 }                  s_logger.debug("Created static nat rule for inline load balancer");                 nic.setState(MappingState.Create);             } else {                 loadBalancingIpNic = _nicDao.findById(mapping.getNicId());             }         } else {             if (mapping != null) {                 // Find the NIC that the mapping refers to                 loadBalancingIpNic = _nicDao.findById(mapping.getNicId());                  int count = _ipAddrMgr.getRuleCountForIp(sourceIpId, Purpose.LoadBalancing, FirewallRule.State.Active);                 if (count == 0) {                     // On the firewall provider for the network, delete the static NAT rule between the source IP                     // address and the load balancing IP address                     applyStaticNatRuleForInlineLBRule(zone, network, revoked, srcIp, loadBalancingIpNic.getIPv4Address());                      // Delete the mapping between the source IP address and the load balancing IP address                     _inlineLoadBalancerNicMapDao.expunge(mapping.getId());                      // Delete the NIC                     _nicDao.expunge(loadBalancingIpNic.getId());                      s_logger.debug("Revoked static nat rule for inline load balancer");                     nic.setState(MappingState.Remove);                 }             } else {                 s_logger.debug("Revoking a rule for an inline load balancer that has not been programmed yet.");                 nic.setNic(null);                 return nic;             }         }          nic.setNic(loadBalancingIpNic);         return nic;     }      public boolean isNccServiceProvider(Network network) {         NetworkOffering networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());         if(null!= networkOffering && networkOffering.getServicePackage() != null ) {             return true;         }         else {             return false;         }     }      public HostVO getNetScalerControlCenterForNetwork(Network guestConfig) {         long zoneId = guestConfig.getDataCenterId();         return _hostDao.findByTypeNameAndZoneId(zoneId, "NetscalerControlCenter", Type.NetScalerControlCenter);     }      @Override     public boolean applyLoadBalancerRules(Network network, List loadBalancingRules) throws ResourceUnavailableException {         // Find the external load balancer in this zone         long zoneId = network.getDataCenterId();         DataCenterVO zone = _dcDao.findById(zoneId);          if (loadBalancingRules == null || loadBalancingRules.isEmpty()) {             return true;         }          HostVO externalLoadBalancer = null;          if(isNccServiceProvider(network)) {             externalLoadBalancer  = getNetScalerControlCenterForNetwork(network);         } else {             ExternalLoadBalancerDeviceVO lbDeviceVO = getExternalLoadBalancerForNetwork(network);             if (lbDeviceVO == null) {                 s_logger.warn("There is no external load balancer device assigned to this network either network is not implement are already shutdown so just returning");                 return true;             } else {                 externalLoadBalancer = _hostDao.findById(lbDeviceVO.getHostId());             }         }            boolean externalLoadBalancerIsInline = _networkMgr.isNetworkInlineMode(network);          if (network.getState() == Network.State.Allocated) {             s_logger.debug("External load balancer was asked to apply LB rules for network with ID " + network.getId() +                 "; this network is not implemented. Skipping backend commands.");             return true;         }          List loadBalancersToApply = new ArrayList();         List mappingStates = new ArrayList();         for (int i = 0; i < loadBalancingRules.size(); i++) {             LoadBalancingRule rule = loadBalancingRules.get(i);              boolean revoked = (rule.getState().equals(FirewallRule.State.Revoke));             String protocol = rule.getProtocol();             String algorithm = rule.getAlgorithm();             String uuid = rule.getUuid();             String srcIp = rule.getSourceIp().addr();             String srcIpVlan = null;             String srcIpGateway = null;             String srcIpNetmask = null;             Long vlanid =  _networkModel.getPublicIpAddress(rule.getSourceIp().addr(), network.getDataCenterId()).getVlanId();             if(vlanid != null ) {               VlanVO publicVlan =   _vlanDao.findById(vlanid);               srcIpVlan =  publicVlan.getVlanTag();               srcIpGateway = publicVlan.getVlanGateway();               srcIpNetmask = publicVlan.getVlanNetmask();             }             int srcPort = rule.getSourcePortStart();             List destinations = rule.getDestinations();              if (externalLoadBalancerIsInline) {                 long ipId = _networkModel.getPublicIpAddress(rule.getSourceIp().addr(), network.getDataCenterId()).getId();                 MappingNic nic = getLoadBalancingIpNic(zone, network, ipId, revoked, null);                 mappingStates.add(nic.getState());                 Nic loadBalancingIpNic = nic.getNic();                 if (loadBalancingIpNic == null) {                     continue;                 }                  // Change the source IP address for the load balancing rule to be the load balancing IP address                 srcIp = loadBalancingIpNic.getIPv4Address();             }              if ((destinations != null && !destinations.isEmpty()) || rule.isAutoScaleConfig()) {                 boolean inline = _networkMgr.isNetworkInlineMode(network);                 LoadBalancerTO loadBalancer =                     new LoadBalancerTO(uuid, srcIp, srcPort, protocol, algorithm, revoked, false, inline, destinations, rule.getStickinessPolicies(),                         rule.getHealthCheckPolicies(), rule.getLbSslCert(), rule.getLbProtocol());                 loadBalancer.setNetworkId(network.getId());                 loadBalancer.setSrcIpVlan(srcIpVlan);                 loadBalancer.setSrcIpNetmask(srcIpNetmask);                 loadBalancer.setSrcIpGateway(srcIpGateway);                 if (rule.isAutoScaleConfig()) {                     loadBalancer.setAutoScaleVmGroup(rule.getAutoScaleVmGroup());                 }                 loadBalancersToApply.add(loadBalancer);             }         }          try {             if (loadBalancersToApply.size() > 0) {                 int numLoadBalancersForCommand = loadBalancersToApply.size();                 LoadBalancerTO[] loadBalancersForCommand = loadBalancersToApply.toArray(new LoadBalancerTO[numLoadBalancersForCommand]);                 LoadBalancerConfigCommand cmd = new LoadBalancerConfigCommand(loadBalancersForCommand, null);                 long guestVlanTag = Integer.parseInt(BroadcastDomainType.getValue(network.getBroadcastUri()));                 cmd.setAccessDetail(NetworkElementCommand.GUEST_VLAN_TAG, String.valueOf(guestVlanTag));                 Answer answer = _agentMgr.easySend(externalLoadBalancer.getId(), cmd);                 if (answer == null || !answer.getResult()) {                     String details = (answer != null) ? answer.getDetails() : "details unavailable";                     String msg = "Unable to apply load balancer rules to the external load balancer appliance in zone " + zone.getName() + " due to: " + details + ".";                     s_logger.error(msg);                     throw new ResourceUnavailableException(msg, DataCenter.class, network.getDataCenterId());                 }             }         } catch (Exception ex) {             if (externalLoadBalancerIsInline) {                 s_logger.error("Rollbacking static nat operation of inline mode load balancing due to error on applying LB rules!");                 String existedGuestIp = loadBalancersToApply.get(0).getSrcIp();                 // Rollback static NAT operation in current session                 for (int i = 0; i < loadBalancingRules.size(); i++) {                     LoadBalancingRule rule = loadBalancingRules.get(i);                     MappingState state = mappingStates.get(i);                     boolean revoke;                     if (state == MappingState.Create) {                         revoke = true;                     } else if (state == MappingState.Remove) {                         revoke = false;                     } else {                         continue;                     }                     long sourceIpId = _networkModel.getPublicIpAddress(rule.getSourceIp().addr(), network.getDataCenterId()).getId();                     getLoadBalancingIpNic(zone, network, sourceIpId, revoke, existedGuestIp);                 }             }             throw new ResourceUnavailableException(ex.getMessage(), DataCenter.class, network.getDataCenterId());         }          return true;     }      @Override     public boolean manageGuestNetworkWithExternalLoadBalancer(boolean add, Network guestConfig) throws ResourceUnavailableException, InsufficientCapacityException {         if (guestConfig.getTrafficType() != TrafficType.Guest) {             s_logger.trace("External load balancer can only be used for guest networks.");             return false;         }          long zoneId = guestConfig.getDataCenterId();         DataCenterVO zone = _dcDao.findById(zoneId);         HostVO externalLoadBalancer = null;          if (add) {             ExternalLoadBalancerDeviceVO lbDeviceVO = null;             // on restart network, device could have been allocated already, skip allocation if a device is assigned             lbDeviceVO = getExternalLoadBalancerForNetwork(guestConfig);             if (lbDeviceVO == null) {                 // allocate a load balancer device for the network                 lbDeviceVO = allocateLoadBalancerForNetwork(guestConfig);                 if (lbDeviceVO == null) {                     String msg = "failed to alloacate a external load balancer for the network " + guestConfig.getId();                     s_logger.error(msg);                     throw new InsufficientNetworkCapacityException(msg, DataCenter.class, guestConfig.getDataCenterId());                 }             }             externalLoadBalancer = _hostDao.findById(lbDeviceVO.getHostId());             s_logger.debug("Allocated external load balancer device:" + lbDeviceVO.getId() + " for the network: " + guestConfig.getId());         } else {             // find the load balancer device allocated for the network             ExternalLoadBalancerDeviceVO lbDeviceVO = getExternalLoadBalancerForNetwork(guestConfig);             if (lbDeviceVO == null) {                 s_logger.warn("Network shutdwon requested on external load balancer element, which did not implement the network."                     + " Either network implement failed half way through or already network shutdown is completed. So just returning.");                 return true;             }              externalLoadBalancer = _hostDao.findById(lbDeviceVO.getHostId());             assert (externalLoadBalancer != null) : "There is no device assigned to this network how did shutdown network ended up here??";         }          // Send a command to the external load balancer to implement or shutdown the guest network         String guestVlanTag = BroadcastDomainType.getValue(guestConfig.getBroadcastUri());         String selfIp = null;         String guestVlanNetmask = NetUtils.cidr2Netmask(guestConfig.getCidr());         Integer networkRate = _networkModel.getNetworkRate(guestConfig.getId(), null);          if (add) {             // on restart network, network could have already been implemented. If already implemented then return             Nic selfipNic = getPlaceholderNic(guestConfig);             if (selfipNic != null) {                 return true;             }              // Acquire a self-ip address from the guest network IP address range             selfIp = _ipAddrMgr.acquireGuestIpAddress(guestConfig, null);             if (selfIp == null) {                 String msg = "failed to acquire guest IP address so not implementing the network on the external load balancer ";                 s_logger.error(msg);                 throw new InsufficientNetworkCapacityException(msg, Network.class, guestConfig.getId());             }         } else {             // get the self-ip used by the load balancer             Nic selfipNic = getPlaceholderNic(guestConfig);             if (selfipNic == null) {                 s_logger.warn("Network shutdwon requested on external load balancer element, which did not implement the network."                     + " Either network implement failed half way through or already network shutdown is completed. So just returning.");                 return true;             }             selfIp = selfipNic.getIPv4Address();         }          // It's a hack, using isOneToOneNat field for indicate if it's inline or not         boolean inline = _networkMgr.isNetworkInlineMode(guestConfig);         IpAddressTO ip =             new IpAddressTO(guestConfig.getAccountId(), null, add, false, true, guestVlanTag, selfIp, guestVlanNetmask, null, networkRate, inline);         IpAddressTO[] ips = new IpAddressTO[1];         ips[0] = ip;         IpAssocCommand cmd = new IpAssocCommand(ips);         Answer answer = _agentMgr.easySend(externalLoadBalancer.getId(), cmd);          if (answer == null || !answer.getResult()) {             String action = add ? "implement" : "shutdown";             String answerDetails = (answer != null) ? answer.getDetails() : null;             answerDetails = (answerDetails != null) ? " due to " + answerDetails : "";             String msg = "External load balancer was unable to " + action + " the guest network on the external load balancer in zone " + zone.getName() + answerDetails;             s_logger.error(msg);             throw new ResourceUnavailableException(msg, Network.class, guestConfig.getId());         }          if (add) {             // Insert a new NIC for this guest network to reserve the self IP             _networkMgr.savePlaceholderNic(guestConfig, selfIp, null, null);         } else {             // release the self-ip obtained from guest network             Nic selfipNic = getPlaceholderNic(guestConfig);             _nicDao.remove(selfipNic.getId());              // release the load balancer allocated for the network             boolean releasedLB = freeLoadBalancerForNetwork(guestConfig);             if (!releasedLB) {                 String msg = "Failed to release the external load balancer used for the network: " + guestConfig.getId();                 s_logger.error(msg);             }         }          if (s_logger.isDebugEnabled()) {             Account account = _accountDao.findByIdIncludingRemoved(guestConfig.getAccountId());             String action = add ? "implemented" : "shut down";             s_logger.debug("External load balancer has " + action + " the guest network for account " + account.getAccountName() + "(id = " + account.getAccountId() +                 ") with VLAN tag " + guestVlanTag);         }          return true;     }      @Override     public boolean configure(String name, Map params) throws ConfigurationException {         super.configure(name, params);         _defaultLbCapacity = NumbersUtil.parseLong(_configDao.getValue(Config.DefaultExternalLoadBalancerCapacity.key()), 50);         _resourceMgr.registerResourceStateAdapter(this.getClass().getSimpleName(), this);         return true;     }      @Override     public boolean start() {         return true;     }      @Override     public boolean stop() {         return true;     }      @Override     public HostVO createHostVOForConnectedAgent(HostVO host, StartupCommand[] cmd) {         // TODO Auto-generated method stub         return null;     }      @Override     public HostVO createHostVOForDirectConnectAgent(HostVO host, StartupCommand[] startup, ServerResource resource, Map details, List hostTags) {         if (!(startup[0] instanceof StartupExternalLoadBalancerCommand)) {             return null;         }         if(host.getName().equalsIgnoreCase("NetScalerControlCenter")) {             host.setType(Host.Type.NetScalerControlCenter);         }         else {             host.setType(Host.Type.ExternalLoadBalancer);         }         return host;     }      @Override     public DeleteHostAnswer deleteHost(HostVO host, boolean isForced, boolean isForceDeleteStorage) throws UnableDeleteHostException {         if (host.getType() != com.cloud.host.Host.Type.ExternalLoadBalancer) {             return null;         }         return new DeleteHostAnswer(true);     }      protected IpDeployer getIpDeployerForInlineMode(Network network) {         //We won't deploy IP, instead the firewall in front of us would do it         List providers = _networkMgr.getProvidersForServiceInNetwork(network, Service.Firewall);         //Only support one provider now         if (providers == null) {             s_logger.error("Cannot find firewall provider for network " + network.getId());             return null;         }         if (providers.size() != 1) {             s_logger.error("Found " + providers.size() + " firewall provider for network " + network.getId());             return null;         }          NetworkElement element = _networkModel.getElementImplementingProvider(providers.get(0).getName());         if (!(element instanceof IpDeployer)) {             s_logger.error("The firewall provider for network " + network.getName() + " don't have ability to deploy IP address!");             return null;         }         s_logger.info("Let " + element.getName() + " handle ip association for " + getName() + " in network " + network.getId());         return (IpDeployer)element;     }      @Override     public List getLBHealthChecks(Network network, List loadBalancingRules) throws ResourceUnavailableException {          // Find the external load balancer in this zone         long zoneId = network.getDataCenterId();         DataCenterVO zone = _dcDao.findById(zoneId);          if (loadBalancingRules == null || loadBalancingRules.isEmpty()) {             return null;         }          HostVO externalLoadBalancer = null;          if(isNccServiceProvider(network)) {             externalLoadBalancer  = getNetScalerControlCenterForNetwork(network);         } else {             ExternalLoadBalancerDeviceVO lbDeviceVO = getExternalLoadBalancerForNetwork(network);             if (lbDeviceVO == null) {                 s_logger.warn("There is no external load balancer device assigned to this network either network is not implement are already shutdown so just returning");                 return null;             } else {                 externalLoadBalancer = _hostDao.findById(lbDeviceVO.getHostId());             }         }          boolean externalLoadBalancerIsInline = _networkMgr.isNetworkInlineMode(network);          if (network.getState() == Network.State.Allocated) {             s_logger.debug("External load balancer was asked to apply LB rules for network with ID " + network.getId() +                 "; this network is not implemented. Skipping backend commands.");             return null;         }          List loadBalancersToApply = new ArrayList();         List mappingStates = new ArrayList();         for (final LoadBalancingRule rule : loadBalancingRules) {             boolean revoked = (FirewallRule.State.Revoke.equals(rule.getState()));             String protocol = rule.getProtocol();             String algorithm = rule.getAlgorithm();             String uuid = rule.getUuid();             String srcIp = rule.getSourceIp().addr();             int srcPort = rule.getSourcePortStart();             List destinations = rule.getDestinations();              if (externalLoadBalancerIsInline) {                 long sourceIpId = _networkModel.getPublicIpAddress(rule.getSourceIp().addr(), network.getDataCenterId()).getId();                 MappingNic nic = getLoadBalancingIpNic(zone, network, sourceIpId, revoked, null);                 mappingStates.add(nic.getState());                 Nic loadBalancingIpNic = nic.getNic();                 if (loadBalancingIpNic == null) {                     continue;                 }                  // Change the source IP address for the load balancing rule to                 // be the load balancing IP address                 srcIp = loadBalancingIpNic.getIPv4Address();             }              if ((destinations != null && !destinations.isEmpty()) || !rule.isAutoScaleConfig()) {                 boolean inline = _networkMgr.isNetworkInlineMode(network);                 LoadBalancerTO loadBalancer =                     new LoadBalancerTO(uuid, srcIp, srcPort, protocol, algorithm, revoked, false, inline, destinations, rule.getStickinessPolicies(),                         rule.getHealthCheckPolicies(), rule.getLbSslCert(), rule.getLbProtocol());                 loadBalancersToApply.add(loadBalancer);             }         }          try {             if (loadBalancersToApply.size() > 0) {                 int numLoadBalancersForCommand = loadBalancersToApply.size();                 LoadBalancerTO[] loadBalancersForCommand = loadBalancersToApply.toArray(new LoadBalancerTO[numLoadBalancersForCommand]);                 HealthCheckLBConfigCommand cmd = new HealthCheckLBConfigCommand(loadBalancersForCommand, network.getId());                 long guestVlanTag = Integer.parseInt(BroadcastDomainType.getValue(network.getBroadcastUri()));                 cmd.setAccessDetail(NetworkElementCommand.GUEST_VLAN_TAG, String.valueOf(guestVlanTag));                  HealthCheckLBConfigAnswer answer = (HealthCheckLBConfigAnswer) _agentMgr.easySend(externalLoadBalancer.getId(), cmd);                 // easySend will return null on error                 return answer == null ? null : answer.getLoadBalancers();             }         } catch (Exception ex) {             s_logger.error("Exception Occured ", ex);         }         //null return is handled by clients         return null;     }      private NicVO getPlaceholderNic(Network network) {         List guestIps = _nicDao.listByNetworkId(network.getId());         for (NicVO guestIp : guestIps) {             // only external firewall and external load balancer will create NicVO with PlaceHolder reservation strategy             if (guestIp.getReservationStrategy().equals(ReservationStrategy.PlaceHolder) && guestIp.getVmType() == null && guestIp.getReserver() == null &&                 !guestIp.getIPv4Address().equals(network.getGateway())) {                 return guestIp;             }         }         return null;     }  };data class;blob, long method;t;t;f;blob,  long method;data class;0;14462;https://github.com/apache/cloudstack/blob/8d3feb100aab4a45b31a789f444038b892161eec/server/src/main/java/com/cloud/network/ExternalLoadBalancerDeviceManagerImpl.java/#L141-L1311;2;2434;14462
2435;   {     "output": "YES I found bad smells",     "detected_bad_smells": [       "Blob",       "Long Method"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@XmlTransient public abstract class PendingActionNotificationResponse     extends ImmutableObject implements ResponseData {    /** The inner name type that contains a name and the result boolean. */   @Embed   static class NameOrId extends ImmutableObject {     @XmlValue     String value;      @XmlAttribute(name = "paResult")     boolean actionResult;   }    @XmlTransient   NameOrId nameOrId;    @XmlElement(name = "paTRID")   Trid trid;    @XmlElement(name = "paDate")   DateTime processedDate;    public String getNameAsString() {     return nameOrId.value;   }    @VisibleForTesting   public Trid getTrid() {     return trid;   }    @VisibleForTesting   public boolean getActionResult() {     return nameOrId.actionResult;   }    protected static  T init(       T response, String nameOrId, boolean actionResult, Trid trid, DateTime processedDate) {     response.nameOrId = new NameOrId();     response.nameOrId.value = nameOrId;     response.nameOrId.actionResult = actionResult;     response.trid = trid;     response.processedDate = processedDate;     return response;   }    /** An adapter to output the XML in response to resolving a pending command on a domain. */   @Embed   @XmlRootElement(name = "panData", namespace = "urn:ietf:params:xml:ns:domain-1.0")   @XmlType(       propOrder = {"name", "trid", "processedDate"},       namespace = "urn:ietf:params:xml:ns:domain-1.0")   public static class DomainPendingActionNotificationResponse       extends PendingActionNotificationResponse {      @XmlElement     NameOrId getName() {       return nameOrId;     }      public static DomainPendingActionNotificationResponse create(         String fullyQualifiedDomainName, boolean actionResult, Trid trid, DateTime processedDate) {       return init(           new DomainPendingActionNotificationResponse(),           fullyQualifiedDomainName,           actionResult,           trid,           processedDate);     }   }    /** An adapter to output the XML in response to resolving a pending command on a contact. */   @Embed   @XmlRootElement(name = "panData", namespace = "urn:ietf:params:xml:ns:contact-1.0")   @XmlType(       propOrder = {"id", "trid", "processedDate"},       namespace = "urn:ietf:params:xml:ns:contact-1.0")   public static class ContactPendingActionNotificationResponse       extends PendingActionNotificationResponse {      @XmlElement     NameOrId getId() {       return nameOrId;     }      public static ContactPendingActionNotificationResponse create(         String contactId, boolean actionResult, Trid trid, DateTime processedDate) {       return init(           new ContactPendingActionNotificationResponse(),           contactId,           actionResult,           trid,           processedDate);     }   }    /** An adapter to output the XML in response to resolving a pending command on a host. */   @Embed   @XmlRootElement(name = "panData", namespace = "urn:ietf:params:xml:ns:domain-1.0")   @XmlType(     propOrder = {"name", "trid", "processedDate"},     namespace = "urn:ietf:params:xml:ns:domain-1.0"   )   public static class HostPendingActionNotificationResponse       extends PendingActionNotificationResponse {      @XmlElement     NameOrId getName() {       return nameOrId;     }      public static HostPendingActionNotificationResponse create(         String fullyQualifiedHostName, boolean actionResult, Trid trid, DateTime processedDate) {       return init(           new HostPendingActionNotificationResponse(),           fullyQualifiedHostName,           actionResult,           trid,           processedDate);     }   } };data class;blob, long method;t;t;f;blob,  long method;data class;0;14466;https://github.com/google/nomulus/blob/2481704d00f10f6b5675dd26f9effaad434ddbea/java/google/registry/model/poll/PendingActionNotificationResponse.java/#L31-L153;2;2435;14466
2439; 	{ 		"answer": "YES I found bad smells", 		"bad smells are": [ 			"Blob", 			"Data Class", 			"Long Method" 		] 	};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class AssemblerConfig {  	// Private Member Variables ------------------------------------------------  	/** The portlet app descriptor, which is usually WEB-INF/portlet.xml. */     private File portletDescriptor;      /** The webapp descriptor to assemble, which is usually WEB-INF/web.xml. */     private File webappDescriptor;      /** The assemble destination, which points to the assembled WAR file. */     private File destination;      /** The class of the servlet that will handle portlet requests */     private String dispatchServletClass;      /** The source archive to assemble */     private File source;          /** Assembler sink buffer size.  Defaults to 4096 bytes. */     private int assemblerSinkBuflen = 1024 * 4; // 4kb      // Public Methods ----------------------------------------------------------      public File getPortletDescriptor() {         return portletDescriptor;     }      public void setPortletDescriptor(File portletDescriptor) {         this.portletDescriptor = portletDescriptor;     }      public File getWebappDescriptor() {         return webappDescriptor;     }      public void setWebappDescriptor(File webappDescriptor) {         this.webappDescriptor = webappDescriptor;     }      public File getDestination() {         return destination;     }      public void setDestination(File destination) {         this.destination = destination;     }      public String getDispatchServletClass() {         return dispatchServletClass;     }      public void setDispatchServletClass(String dispatchServletClass) {         this.dispatchServletClass = dispatchServletClass;     }      /**      * @deprecated use setSource(File) instead.      */     public void setWarSource(File source) {         this.source = source;     }          public void setSource(File source) {         this.source = source;     }          /**      * @deprecated use getSource() instead.      */     public File getWarSource() {         return source;     }          public File getSource() {         return source;     }          public int getAssemblerSinkBuflen() {         return assemblerSinkBuflen;     }          public void setAssemblerSinkBuflen(int buflen) {         this.assemblerSinkBuflen = buflen;     } };data class;blob, data class, long method;t;t;t;blob,  long method;;0;14478;https://github.com/apache/portals-pluto/blob/4db5ddd26fb2ce642be7b0894858e664c6076a3b/pluto-util/src/main/java/org/apache/pluto/util/assemble/AssemblerConfig.java/#L25-L110;2;2439;14478
2445; {     "output": "YES I found bad smells",     "bad smells are": [         "Blob",         "Long Method"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@XmlRootElement(name="mqtt") @XmlAccessorType(XmlAccessType.FIELD) public class MqttDTO extends ProtocolDTO {      @XmlAttribute(name="max_message_length")     public Integer max_message_length;      @XmlElementRef     public List protocol_filters = new ArrayList();      @XmlAttribute(name="queue_prefix")     public String queue_prefix;      @XmlAttribute(name="path_separator")     public String path_separator;      @XmlAttribute(name="any_child_wildcard")     public String any_child_wildcard;      @XmlAttribute(name="any_descendant_wildcard")     public String any_descendant_wildcard;      @XmlAttribute(name="regex_wildcard_start")     public String regex_wildcard_start;      @XmlAttribute(name="regex_wildcard_end")     public String regex_wildcard_end;      @XmlAttribute(name="part_pattern")     public String part_pattern;      @XmlAttribute(name="die_delay")     public Long die_delay;      @Override     public boolean equals(Object o) {         if (this == o) return true;         if (o == null || getClass() != o.getClass()) return false;         if (!super.equals(o)) return false;          MqttDTO mqttDTO = (MqttDTO) o;          if (any_child_wildcard != null ? !any_child_wildcard.equals(mqttDTO.any_child_wildcard) : mqttDTO.any_child_wildcard != null)             return false;         if (any_descendant_wildcard != null ? !any_descendant_wildcard.equals(mqttDTO.any_descendant_wildcard) : mqttDTO.any_descendant_wildcard != null)             return false;         if (max_message_length != null ? !max_message_length.equals(mqttDTO.max_message_length) : mqttDTO.max_message_length != null)             return false;         if (path_separator != null ? !path_separator.equals(mqttDTO.path_separator) : mqttDTO.path_separator != null)             return false;         if (protocol_filters != null ? !protocol_filters.equals(mqttDTO.protocol_filters) : mqttDTO.protocol_filters != null)             return false;         if (queue_prefix != null ? !queue_prefix.equals(mqttDTO.queue_prefix) : mqttDTO.queue_prefix != null)             return false;         if (regex_wildcard_end != null ? !regex_wildcard_end.equals(mqttDTO.regex_wildcard_end) : mqttDTO.regex_wildcard_end != null)             return false;         if (regex_wildcard_start != null ? !regex_wildcard_start.equals(mqttDTO.regex_wildcard_start) : mqttDTO.regex_wildcard_start != null)             return false;         if (part_pattern != null ? !part_pattern.equals(mqttDTO.part_pattern) : mqttDTO.part_pattern != null)             return false;          return true;     }      @Override     public int hashCode() {         int result = super.hashCode();         result = 31 * result + (max_message_length != null ? max_message_length.hashCode() : 0);         result = 31 * result + (protocol_filters != null ? protocol_filters.hashCode() : 0);         result = 31 * result + (queue_prefix != null ? queue_prefix.hashCode() : 0);         result = 31 * result + (part_pattern != null ? part_pattern.hashCode() : 0);         result = 31 * result + (path_separator != null ? path_separator.hashCode() : 0);         result = 31 * result + (any_child_wildcard != null ? any_child_wildcard.hashCode() : 0);         result = 31 * result + (any_descendant_wildcard != null ? any_descendant_wildcard.hashCode() : 0);         result = 31 * result + (regex_wildcard_start != null ? regex_wildcard_start.hashCode() : 0);         result = 31 * result + (regex_wildcard_end != null ? regex_wildcard_end.hashCode() : 0);         return result;     } };data class;blob, long method;t;t;f;blob,  long method;data class;0;14492;https://github.com/apache/activemq-apollo/blob/8e4b134b2a5d3576aa62cd8df9905a9fe2eba2d0/apollo-mqtt/src/main/java/org/apache/activemq/apollo/mqtt/dto/MqttDTO.java/#L31-L109;2;2445;14492
2468;{     "output": "YES I found bad smells",     "bad smells are": [         "Blob"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class OptionalManyTransitionImpl extends MinimalEObjectImpl.Container implements OptionalManyTransition {   /**    * The default value of the '{@link #getVal() Val}' attribute.    *     *     * @see #getVal()    * @generated    * @ordered    */   protected static final String VAL_EDEFAULT = null;    /**    * The cached value of the '{@link #getVal() Val}' attribute.    *     *     * @see #getVal()    * @generated    * @ordered    */   protected String val = VAL_EDEFAULT;    /**    *     *     * @generated    */   protected OptionalManyTransitionImpl()   {     super();   }    /**    *     *     * @generated    */   @Override   protected EClass eStaticClass()   {     return SyntacticsequencertestPackage.Literals.OPTIONAL_MANY_TRANSITION;   }    /**    *     *     * @generated    */   public String getVal()   {     return val;   }    /**    *     *     * @generated    */   public void setVal(String newVal)   {     String oldVal = val;     val = newVal;     if (eNotificationRequired())       eNotify(new ENotificationImpl(this, Notification.SET, SyntacticsequencertestPackage.OPTIONAL_MANY_TRANSITION__VAL, oldVal, val));   }    /**    *     *     * @generated    */   @Override   public Object eGet(int featureID, boolean resolve, boolean coreType)   {     switch (featureID)     {       case SyntacticsequencertestPackage.OPTIONAL_MANY_TRANSITION__VAL:         return getVal();     }     return super.eGet(featureID, resolve, coreType);   }    /**    *     *     * @generated    */   @Override   public void eSet(int featureID, Object newValue)   {     switch (featureID)     {       case SyntacticsequencertestPackage.OPTIONAL_MANY_TRANSITION__VAL:         setVal((String)newValue);         return;     }     super.eSet(featureID, newValue);   }    /**    *     *     * @generated    */   @Override   public void eUnset(int featureID)   {     switch (featureID)     {       case SyntacticsequencertestPackage.OPTIONAL_MANY_TRANSITION__VAL:         setVal(VAL_EDEFAULT);         return;     }     super.eUnset(featureID);   }    /**    *     *     * @generated    */   @Override   public boolean eIsSet(int featureID)   {     switch (featureID)     {       case SyntacticsequencertestPackage.OPTIONAL_MANY_TRANSITION__VAL:         return VAL_EDEFAULT == null ? val != null : !VAL_EDEFAULT.equals(val);     }     return super.eIsSet(featureID);   }    /**    *     *     * @generated    */   @Override   public String toString()   {     if (eIsProxy()) return super.toString();      StringBuffer result = new StringBuffer(super.toString());     result.append(" (val: ");     result.append(val);     result.append(')');     return result.toString();   }  } //OptionalManyTransitionImpl;data class;blob;t;t;f;blob;data class;0;14570;https://github.com/eclipse/xtext-core/blob/e04964e4c2a3e0338c0079bd8333688835e77c31/org.eclipse.xtext.tests/src-gen/org/eclipse/xtext/serializer/syntacticsequencertest/impl/OptionalManyTransitionImpl.java/#L29-L178;2;2468;14570
2470; 	{ 		"message": "YES I found bad smells", 		"detected_bad_smells": [ 			"the bad smells are:", 			"1. Blob", 			"2. Data Class" 		] 	};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class ReportInstance extends AbstractDTOBase {      private String id;     private ReportStatusEnum status;     private String url;     private String ownerId;     private Boolean hasDetailRows;     private ZonedDateTime completionDate;     private ZonedDateTime requestDate;      public String getId() {         return id;     }      public void setId(String id) {         this.id = id;     }      public ReportStatusEnum getStatus() {         return status;     }      public void setStatus(ReportStatusEnum status) {         this.status = status;     }      public String getUrl() {         return url;     }      public void setUrl(String url) {         this.url = url;     }      public String getOwnerId() {         return ownerId;     }      public void setOwnerId(String ownerId) {         this.ownerId = ownerId;     }      public Boolean getHasDetailRows() {         return hasDetailRows;     }      public void setHasDetailRows(Boolean hasDetailRows) {         this.hasDetailRows = hasDetailRows;     }      public ZonedDateTime getCompletionDate() {         return completionDate;     }      public void setCompletionDate(ZonedDateTime completionDate) {         this.completionDate = completionDate;     }      public ZonedDateTime getRequestDate() {         return requestDate;     }      public void setRequestDate(ZonedDateTime requestDate) {         this.requestDate = requestDate;     } };data class;the bad smells are:, 1. blob, 2. data class;t;t;t;the bad smells are:,  1. blob;;0;14576;https://github.com/apache/camel/blob/8a85a70643c4d6eec2d3abddeea44ecb06c2f486/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/api/dto/analytics/reports/ReportInstance.java/#L26-L91;2;2470;14576
2478;{"message": "YES I found bad smells", "bad smells are": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@SuppressWarnings("serial") @Entity @Table(name = "TRIGGER", uniqueConstraints = @UniqueConstraint(columnNames = { "name", "alert_id" })) public class Trigger extends JPAEntity implements Serializable { 	 	 	public static class Serializer extends JsonSerializer {  		@Override 		public void serialize(Trigger trigger, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { 			 			jgen.writeStartObject(); 			 			jgen.writeStringField("id", trigger.getId().toString()); 			jgen.writeStringField("name", trigger.getName()); 			jgen.writeStringField("type", trigger.getType().name()); 			jgen.writeNumberField("threshold", trigger.getThreshold().doubleValue()); 			 			if(trigger.getSecondaryThreshold() != null) { 				jgen.writeNumberField("secondaryThreshold", trigger.getSecondaryThreshold()); 			} 			 			if(trigger.getInertia() != null) { 				jgen.writeNumberField("inertia", trigger.getInertia()); 			} 			 			jgen.writeEndObject(); 		} 		 	} 	 	public static class Deserializer extends JsonDeserializer {  		@Override 		public Trigger deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {  			Trigger trigger = new Trigger(); 			JsonNode rootNode = jp.getCodec().readTree(jp); 			 			BigInteger id = new BigInteger(rootNode.get("id").asText()); 			trigger.id = id; 			 			String name = rootNode.get("name").asText(); 			trigger.setName(name); 			 			TriggerType type = TriggerType.fromString(rootNode.get("type").asText()); 			trigger.setType(type); 			 			Double threshold = rootNode.get("threshold").asDouble(); 			trigger.setThreshold(threshold);  			if(rootNode.get("secondaryThreshold") != null) { 				trigger.setSecondaryThreshold(rootNode.get("secondaryThreshold").asDouble()); 			} 			 			if(rootNode.get("inertia") != null) { 				trigger.setInertia(rootNode.get("inertia").asLong()); 			} 			 			return trigger; 		} 		 	} 	      //~ Instance fields ******************************************************************************************************************************  	@Column(nullable = false)     @Enumerated(EnumType.STRING)     private TriggerType type;          @Basic(optional = false)     @Column(name = "name", nullable = false)     private String name;          @Basic(optional = false)     private Double threshold;          private Double secondaryThreshold;          private Long inertia;      @ManyToOne(optional = false)     @JoinColumn(nullable = false, name = "alert_id")     private Alert alert;          @ManyToMany(mappedBy = "triggers", cascade = { CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH })     private List notifications = new ArrayList<>(0);      //~ Constructors *********************************************************************************************************************************      /**      * Creates a new Trigger object.      *      * @param  alert          The alert associated with the trigger. Cannot be null.      * @param  type           The type of the alert. Cannot be null.      * @param  name           The name of the alert. Cannot be null or empty.      * @param  threshold      The threshold value for the alert.      * @param  inertiaMillis  The amount of time in milliseconds a condition must exist for the trigger to fire. Cannot be negative.      */     public Trigger(Alert alert, TriggerType type, String name, double threshold, long inertiaMillis) {         this(alert, type, name, threshold, null, inertiaMillis);     }      /**      * Creates a new Trigger object.      *      * @param  alert               The alert associated with the trigger. Cannot be null.      * @param  type                The type of the alert. Cannot be null.      * @param  name                The name of the alert. Cannot be null or empty.      * @param  threshold           The threshold value for the alert.      * @param  secondaryThreshold  The secondary threshold value for the alert. May be null for types that only require one threshold.      * @param  inertiaMillis       The amount of time in milliseconds a condition must exist for the trigger to fire. Cannot be negative.      */     public Trigger(Alert alert, TriggerType type, String name, Double threshold, Double secondaryThreshold, long inertiaMillis) {         super(alert.getOwner());         setAlert(alert);         setType(type);         setName(name);         setThreshold(threshold);         setSecondaryThreshold(secondaryThreshold);         setInertia(inertiaMillis);         preUpdate();     }      /** Creates a new Trigger object. */     protected Trigger() {         super(null);     }      //~ Methods **************************************************************************************************************************************      /**      * Evaluates the trigger against actualValue (passed as parameter).      *      * @param   trigger      trigger to be evaluated.      * @param   actualValue  value against the trigger to be evaluated.      *      * @return  true if the trigger should be fired so that notification will be sent otherwise false.      *      * @throws  SystemException  If an error in evaluation occurs.      */     public static boolean evaluateTrigger(Trigger trigger, Double actualValue) {         requireArgument(trigger != null, "Trigger cannot be null.");         requireArgument(actualValue != null, "Trigger cannot be evaulated against null.");          Double lowThreshold, highThreshold;          switch (trigger.type) {             case GREATER_THAN:                 return actualValue.compareTo(trigger.getThreshold()) > 0;             case GREATER_THAN_OR_EQ:                 return actualValue.compareTo(trigger.getThreshold()) >= 0;             case LESS_THAN:                 return actualValue.compareTo(trigger.getThreshold()) < 0;             case LESS_THAN_OR_EQ:                 return actualValue.compareTo(trigger.getThreshold()) <= 0;             case EQUAL:                 return actualValue.compareTo(trigger.getThreshold()) == 0;             case NOT_EQUAL:                 return actualValue.compareTo(trigger.getThreshold()) != 0;             case BETWEEN:                 lowThreshold = Math.min(trigger.getThreshold(), trigger.getSecondaryThreshold());                 highThreshold = Math.max(trigger.getThreshold(), trigger.getSecondaryThreshold());                 return (actualValue.compareTo(lowThreshold) >= 0 && actualValue.compareTo(highThreshold) <= 0);             case NOT_BETWEEN:                 lowThreshold = Math.min(trigger.getThreshold(), trigger.getSecondaryThreshold());                 highThreshold = Math.max(trigger.getThreshold(), trigger.getSecondaryThreshold());                 return (actualValue.compareTo(lowThreshold) < 0 || actualValue.compareTo(highThreshold) > 0);             case NO_DATA:             	    return actualValue == null;             default:                 throw new SystemException("Unsupported trigger type " + trigger.type);         }     }      //~ Methods **************************************************************************************************************************************      /**      * Returns the notifications associated with the trigger.      *      * @return  The associated notifications.      */     public List getNotifications() {         return Collections.unmodifiableList(notifications);     }      /**      * Returns the trigger type.      *      * @return  The trigger type. Will never be null.      */     public TriggerType getType() {         return type;     }      /**      * Sets the trigger type.      *      * @param  type  The trigger type. Cannot be null.      */     public void setType(TriggerType type) {         requireArgument(type != null, "The trigger type cannot be null.");         this.type = type;     }      /**      * Returns the trigger name.      *      * @return  The trigger name. Will never be null.      */     public String getName() {         return name;     }      /**      * Sets the name of the trigger.      *      * @param  name  The trigger name. Cannot be null or empty.      */     public void setName(String name) {         requireArgument(name != null && !name.isEmpty(), "Trigger name cannot be null or empty.");         this.name = name;     }      /**      * Returns the trigger threshold.      *      * @return  The trigger threshold.      */     public Double getThreshold() {         return threshold;     }      /**      * Sets the trigger threshold.      *      * @param  threshold  The trigger threshold. Cannot be null.      */     public void setThreshold(Double threshold) {         requireArgument(threshold != null, "Trigger threshold cannot be null.");         this.threshold = threshold;     }      /**      * Returns the secondary threshold for the trigger.      *      * @return  The secondary threshold. Can return null for trigger types that only require a single threshold.      */     public Double getSecondaryThreshold() {         return secondaryThreshold;     }      /**      * Sets the secondary threshold for the trigger.      *      * @param  secondaryThreshold  The secondary threshold. Can be null for trigger types that only require a single threshold.      */     public void setSecondaryThreshold(Double secondaryThreshold) {         this.secondaryThreshold = secondaryThreshold;     }      /**      * Returns the inertia associated with the trigger in milliseconds.      *      * @return  The inertia in milliseconds.      */     public Long getInertia() {         return inertia;     }      /**      * Sets the inertia associated with the trigger in milliseconds.      *      * @param  inertiaMillis  The inertia associated with the trigger in milliseconds. Cannot be null or negative.      */     public void setInertia(Long inertiaMillis) {         if (this.alert == null) { // Only during deserialization.             this.inertia = inertiaMillis;         } else {             requireArgument(inertiaMillis != null && inertiaMillis >= 0, "Inertia cannot be negative.");             Long longestIntervalLength = AlertUtils.getMaximumIntervalLength(this.alert.getExpression());             if (inertiaMillis > longestIntervalLength)                 throw new IllegalArgumentException(String.format("Inertia %d cannot be more than width of the longest interval %d.", inertiaMillis, longestIntervalLength));             this.inertia = inertiaMillis;         }     }      /**      * Returns the alert with which the trigger is associated.      *      * @return  The alert with which the trigger is associated.      */     public Alert getAlert() {         return alert;     }      /**      * Sets the alert with which the trigger is associated.      *      * @param  alert  The alert with which the trigger is associated. Cannot be null.      */     public void setAlert(Alert alert) {         requireArgument(alert != null, "The alert with which a trigger is associated cannot be null.");         this.alert = alert;     }      @Override     public int hashCode() {         int hash = 7;          hash = 97 * hash + Objects.hashCode(this.name);         hash = 97 * hash + Objects.hashCode(this.alert);         return hash;     }      @Override     public boolean equals(Object obj) {         if (obj == null) {             return false;         }         if (getClass() != obj.getClass()) {             return false;         }          final Trigger other = (Trigger) obj;          if (!Objects.equals(this.name, other.name)) {             return false;         }         if (!Objects.equals(this.alert, other.alert)) {             return false;         }         return true;     }      @Override     public String toString() {         if (type == TriggerType.BETWEEN || type == TriggerType.NOT_BETWEEN)             return "Trigger{" + "type=" + type + ", name=" + name + ", primaryThreshold=" + threshold + ", secondaryThreshold=" + secondaryThreshold +             ", inertia=" + inertia + '}';         else             return "Trigger{" + "type=" + type + ", name=" + name + ", threshold=" + threshold + ", inertia=" + inertia + '}';     }      //~ Enums ****************************************************************************************************************************************      /**      * The type of trigger.      *      * @author  Tom Valine (tvaline@salesforce.com)      */     public enum TriggerType {          /** Greater than. */         GREATER_THAN,         /** Greater than or equal to. */         GREATER_THAN_OR_EQ,         /** Less than. */         LESS_THAN,         /** Less than or equal to. */         LESS_THAN_OR_EQ,         /** Equal to. */         EQUAL,         /** Not equal to. */         NOT_EQUAL,         /** Between. */         BETWEEN,         /** Not between. */         NOT_BETWEEN,     	    /** No Data */     	    NO_DATA;          /**          * Converts a string to a trigger type.          *          * @param   name  The trigger type name.          *          * @return  The corresponding trigger type.          *          * @throws  IllegalArgumentException  If no corresponding trigger type is found.          */         @JsonCreator         public static TriggerType fromString(String name) {             for (TriggerType t : TriggerType.values()) {                 if (t.toString().equalsIgnoreCase(name)) {                     return t;                 }             }             throw new IllegalArgumentException("Trigger Type does not exist.");         }          /**          * Returns the name of the trigger type.          *          * @return  The name of the trigger type.          */         @JsonValue         public String value() {             return this.toString();         }      } };data class;blob, long method;t;t;f;blob,  long method;data class;0;14590;https://github.com/salesforce/Argus/blob/121b59a268da264316cded6a3e9271366a23cd86/ArgusCore/src/main/java/com/salesforce/dva/argus/entity/Trigger.java/#L88-L491;2;2478;14590
2493; {"response": "YES I found bad smells", "bad smells are": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@SuppressWarnings("serial") public abstract class StaticMethodMatcherPointcutAdvisor extends StaticMethodMatcherPointcut 		implements PointcutAdvisor, Ordered, Serializable {  	private Advice advice = EMPTY_ADVICE;  	private int order = Ordered.LOWEST_PRECEDENCE;   	/** 	 * Create a new StaticMethodMatcherPointcutAdvisor, 	 * expecting bean-style configuration. 	 * @see #setAdvice 	 */ 	public StaticMethodMatcherPointcutAdvisor() { 	}  	/** 	 * Create a new StaticMethodMatcherPointcutAdvisor for the given advice. 	 * @param advice the Advice to use 	 */ 	public StaticMethodMatcherPointcutAdvisor(Advice advice) { 		Assert.notNull(advice, "Advice must not be null"); 		this.advice = advice; 	}   	public void setOrder(int order) { 		this.order = order; 	}  	@Override 	public int getOrder() { 		return this.order; 	}  	public void setAdvice(Advice advice) { 		this.advice = advice; 	}  	@Override 	public Advice getAdvice() { 		return this.advice; 	}  	@Override 	public boolean isPerInstance() { 		return true; 	}  	@Override 	public Pointcut getPointcut() { 		return this; 	}  };data class;blob, data class;t;t;t;blob;;0;14624;https://github.com/spring-projects/spring-framework/blob/3a0f309e2c9fdbbf7fb2d348be861528177f8555/spring-aop/src/main/java/org/springframework/aop/support/StaticMethodMatcherPointcutAdvisor.java/#L35-L90;2;2493;14624
2511;         {             "message": "YES I found bad smells",             "bad smells are": [                 "Blob",                 "Data Class"             ]         };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class AssemblerConfig {  	// Private Member Variables ------------------------------------------------  	/** The portlet app descriptor, which is usually WEB-INF/portlet.xml. */     private File portletDescriptor;      /** The webapp descriptor to assemble, which is usually WEB-INF/web.xml. */     private File webappDescriptor;      /** The assemble destination, which points to the assembled WAR file. */     private File destination;      /** The class of the servlet that will handle portlet requests */     private String dispatchServletClass;      /** The source archive to assemble */     private File source;          /** Assembler sink buffer size.  Defaults to 4096 bytes. */     private int assemblerSinkBuflen = 1024 * 4; // 4kb      // Public Methods ----------------------------------------------------------      public File getPortletDescriptor() {         return portletDescriptor;     }      public void setPortletDescriptor(File portletDescriptor) {         this.portletDescriptor = portletDescriptor;     }      public File getWebappDescriptor() {         return webappDescriptor;     }      public void setWebappDescriptor(File webappDescriptor) {         this.webappDescriptor = webappDescriptor;     }      public File getDestination() {         return destination;     }      public void setDestination(File destination) {         this.destination = destination;     }      public String getDispatchServletClass() {         return dispatchServletClass;     }      public void setDispatchServletClass(String dispatchServletClass) {         this.dispatchServletClass = dispatchServletClass;     }      /**      * @deprecated use setSource(File) instead.      */     public void setWarSource(File source) {         this.source = source;     }          public void setSource(File source) {         this.source = source;     }          /**      * @deprecated use getSource() instead.      */     public File getWarSource() {         return source;     }          public File getSource() {         return source;     }          public int getAssemblerSinkBuflen() {         return assemblerSinkBuflen;     }          public void setAssemblerSinkBuflen(int buflen) {         this.assemblerSinkBuflen = buflen;     } };data class;blob, data class;t;t;t;blob;;0;14687;https://github.com/apache/portals-pluto/blob/4db5ddd26fb2ce642be7b0894858e664c6076a3b/pluto-util/src/main/java/org/apache/pluto/util/assemble/AssemblerConfig.java/#L25-L110;2;2511;14687
2512;   {     "message": "YES I found bad smells",     "bad_smells": [       "1. Long Method",       "2. Blob",       "3. Data Class"     ]   } ;The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@SuppressWarnings("serial") public abstract class MqttMessageDeliveryEvent extends MqttIntegrationEvent {  	private final int messageId;  	private final String clientId;  	private final int clientInstance;  	public MqttMessageDeliveryEvent(Object source, int messageId, String clientId, int clientInstance) { 		super(source); 		this.messageId = messageId; 		this.clientId = clientId; 		this.clientInstance = clientInstance; 	}  	public int getMessageId() { 		return this.messageId; 	}  	public String getClientId() { 		return this.clientId; 	}  	public int getClientInstance() { 		return this.clientInstance; 	}  };data class;1. long method, 2. blob, 3. data class;t;t;t;1. long method,  2. blob;;0;14689;https://github.com/spring-projects/spring-integration/blob/872302de6e98c1fd34e3192d8e4de244008ca857/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/event/MqttMessageDeliveryEvent.java/#L28-L56;2;2512;14689
2524; {    "response": "YES I found bad smells",   "detected_bad_smells": [     "1. Blob",     "2. Data Class"   ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class LivePropertySource {  	private final List properties; 	private final String sourceName;   	public LivePropertySource(String sourceName, List properties) { 		this.sourceName = sourceName; 		this.properties = properties != null ? ImmutableList.copyOf(properties) : ImmutableList.of(); 	}  	public String getSourceName() { 		return this.sourceName; 	}  	public LiveProperty getProperty(String propertyName) { 		for (LiveProperty liveProperty : properties) { 			if (liveProperty.getProperty().equals(propertyName)) { 				return liveProperty; 			} 		} 		return null; 	}  };data class;1. blob, 2. data class;t;t;t;1. blob;;0;14719;https://github.com/spring-projects/sts4/blob/46e9e985b0c5e28ea1952d9fc640ec12fd9c8fdd/headless-services/commons/commons-boot-app-cli/src/main/java/org/springframework/ide/vscode/commons/boot/app/cli/liveproperties/LivePropertySource.java/#L17-L41;2;2524;14719
2569; {"message": "YES I found bad smells, the bad smells are: 1. Blob"};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
class Segment {     private byte segmentType;      Segment(byte segmentType) {         this.segmentType = segmentType;     }      /**      * Returns the segmentType value.      *       * @return byte segmentType value.      */     public byte getSegmentType() {         return segmentType;     } };data class;1. blob;t;t;f;1. blob;data class;0;14876;https://github.com/Microsoft/mssql-jdbc/blob/84484edf7944de56749fd2648d0af2ffa2459b7a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSpatialDatatype.java/#L1932-L1947;2;2569;14876
2570;{"message": "YES I found bad smells", "bad smells are": ["Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class ErrorDataException extends Exception {      /** serialVersionUID. */     private static final long serialVersionUID = -9052741930614009382L;          /** The rpc data package. */     private RpcDataPackage rpcDataPackage;          /** The error code. */     private int errorCode;          /**      * Gets the error code.      *      * @return the error code      */     public int getErrorCode() {         return errorCode;     }      /**      * Sets the error code.      *      * @param errorCode the new error code      */     public void setErrorCode(int errorCode) {         this.errorCode = errorCode;     }      /**      * Gets the rpc data package.      *      * @return the rpc data package      */     public RpcDataPackage getRpcDataPackage() {         return rpcDataPackage;     }      /**      * Sets the rpc data package.      *      * @param rpcDataPackage the new rpc data package      */     public void setRpcDataPackage(RpcDataPackage rpcDataPackage) {         this.rpcDataPackage = rpcDataPackage;     }      /**      * Instantiates a new error data exception.      */     public ErrorDataException() {         super();     }      /**      * Instantiates a new error data exception.      *      * @param message the message      * @param cause the cause      */     public ErrorDataException(String message, Throwable cause) {         super(message, cause);     }          /**      * Instantiates a new error data exception.      *      * @param message the message      * @param cause the cause      * @param errorCode the error code      */     public ErrorDataException(String message, Throwable cause, int errorCode) {         super(message, cause);         this.errorCode = errorCode;     }      /**      * Instantiates a new error data exception.      *      * @param message the message      */     public ErrorDataException(String message) {         super(message);     }      /**      * Instantiates a new error data exception.      *      * @param message the message      * @param errorCode the error code      */     public ErrorDataException(String message, int errorCode) {         super(message);         this.errorCode = errorCode;     }          /**      * Instantiates a new error data exception.      *      * @param cause the cause      */     public ErrorDataException(Throwable cause) {         super(cause);     }          /**      * Instantiates a new error data exception.      *      * @param cause the cause      * @param errorCode the error code      */     public ErrorDataException(Throwable cause, int errorCode) {         super(cause);         this.errorCode = errorCode;     }       };data class;blob;t;t;f;blob;data class;0;14881;https://github.com/baidu/Jprotobuf-rpc-socket/blob/4422e24c725eaf1f76646f674718bcc8750a4e1d/jprotobuf-rpc-core/src/main/java/com/baidu/jprotobuf/pbrpc/ErrorDataException.java/#L28-L145;2;2570;14881
2574; {"message": "YES I found bad smells",  "bad smells are": ["Long Method", "Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    @Override     protected GraphicsNode createImageGraphicsNode(                 BridgeContext ctx, Element imageElement, ParsedURL purl) {         AbstractFOPBridgeContext bridgeCtx = (AbstractFOPBridgeContext)ctx;          ImageManager manager = bridgeCtx.getImageManager();         ImageSessionContext sessionContext = bridgeCtx.getImageSessionContext();         try {             ImageInfo info = manager.getImageInfo(purl.toString(), sessionContext);             ImageFlavor[] supportedFlavors = getSupportedFlavours();             Image image = manager.getImage(info, supportedFlavors, sessionContext);              //TODO color profile overrides aren't handled, yet!             //ICCColorSpaceExt colorspaceOverride = extractColorSpace(e, ctx);             AbstractGraphicsNode specializedNode = null;             if (image instanceof ImageXMLDOM) {                 ImageXMLDOM xmlImage = (ImageXMLDOM)image;                 if (xmlImage.getDocument() instanceof SVGDocument) {                     //Clone DOM because the Batik's CSS Parser attaches to the DOM and is therefore                     //not thread-safe.                     SVGDocument clonedDoc = (SVGDocument)BatikUtil.cloneSVGDocument(                             xmlImage.getDocument());                     return createSVGImageNode(ctx, imageElement, clonedDoc);                 } else {                     //Convert image to Graphics2D                     image = manager.convertImage(xmlImage,                             new ImageFlavor[] {ImageFlavor.GRAPHICS2D});                 }             }             if (image instanceof ImageRawJPEG) {                 specializedNode = createLoaderImageNode(image, ctx, imageElement, purl);             } else if (image instanceof ImageRawCCITTFax) {                 specializedNode = createLoaderImageNode(image, ctx, imageElement, purl);             } else if (image instanceof ImageGraphics2D) {                 ImageGraphics2D g2dImage = (ImageGraphics2D)image;                 specializedNode = new Graphics2DNode(g2dImage);             } else {                 ctx.getUserAgent().displayError(                         new ImageException("Cannot convert an image to a usable format: " + purl));             }              if (specializedNode != null) {                 Rectangle2D imgBounds = getImageBounds(ctx, imageElement);                 Rectangle2D bounds = specializedNode.getPrimitiveBounds();                 float [] vb = new float[4];                 vb[0] = 0; // x                 vb[1] = 0; // y                 vb[2] = (float) bounds.getWidth(); // width                 vb[3] = (float) bounds.getHeight(); // height                  // handles the 'preserveAspectRatio', 'overflow' and 'clip'                 // and sets the appropriate AffineTransform to the image node                 initializeViewport(ctx, imageElement, specializedNode, vb, imgBounds);                 return specializedNode;             }         } catch (Exception e) {             ctx.getUserAgent().displayError(e);         }          //Fallback         return superCreateGraphicsNode(ctx, imageElement, purl);     };long method;long method, blob;t;t;t; blob;;0;14912;https://github.com/apache/fop/blob/caced35327f6b6d6eeac2a13543f3c458e902101/fop-core/src/main/java/org/apache/fop/svg/AbstractFOPImageElementBridge.java/#L70-L131;2;2574;14912
2579; {"message": "YES I found bad smells", "detected_bad_smells": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    public static class Build {          /**          * Project version.          */         private String version = "";          public String getVersion() {             return version;         }          public void setVersion(final String version) {             this.version = version;         }      };data class;blob, data class;t;t;t;blob;;0;14944;https://github.com/eclipse/hawkbit/blob/51be28147f6f575b6c1ab4a5ef84ffd9174f1209/hawkbit-core/src/main/java/org/eclipse/hawkbit/HawkbitServerProperties.java/#L75-L90;2;2579;14944
2584; {   "response": "YES I found bad smells",   "bad smells are": [     "Long Method",     "Blob"   ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@XmlAccessorType(XmlAccessType.FIELD) @XmlType(name = "", propOrder = {     "content" }) @XmlRootElement(name = "cache-policy-conf-other") public class CachePolicyConfOther {      @XmlMixed     @XmlAnyElement     protected List content;      /**      * Gets the value of the content property.      *       *       * This accessor method returns a reference to the live list,      * not a snapshot. Therefore any modification you make to the      * returned list will be present inside the JAXB object.      * This is why there is not a set method for the content property.      *       *       * For example, to add a new item, do as follows:      *       *    getContent().add(newItem);      *       *       *       *       * Objects of the following type(s) are allowed in the list      * {@link Element }      * {@link String }      */     public List getContent() {         if (content == null) {             content = new ArrayList();         }         return this.content;     }  };data class;long method, blob;t;t;f;long method,  blob;data class;0;14973;https://github.com/apache/tomee/blob/d21933b313aff812fe5188b57bf572a9ad649148/container/openejb-jee/src/main/java/org/apache/openejb/jee/jba/CachePolicyConfOther.java/#L32-L71;2;2584;14973
2601; {"answer": "YES I found bad smells, the bad smells are: 1. Blob"};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class TfsGitTreeEntriesJson {     private final String objectId;     private final List treeEntries;     private final int size;      @JsonCreator     public TfsGitTreeEntriesJson(         @JsonProperty("objectId") final String objectId,         @JsonProperty("treeEntries") final List treeEntries,         @JsonProperty("size") final int size) throws JsonProcessingException {         this.objectId = objectId;         this.treeEntries = treeEntries;         this.size = size;     }      public String getObjectId() {         return objectId;     }      public List getTreeEntries() {         return treeEntries;     }      public int getSize() {         return size;     } };data class;1. blob;t;t;f;1. blob;data class;0;15019;https://github.com/Microsoft/team-explorer-everywhere/blob/89ab2a4847aec8ec2afdf36c3f6287dd03bd558d/source/com.microsoft.tfs.client.common/src/com/microsoft/tfs/client/common/git/json/TfsGitTreeEntriesJson.java/#L12-L38;2;2601;15019
2632; {"response": "YES I found bad smells", "bad smells are": ["1. Blob", "2. Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class ReferenceProperty     implements Property {     EntityReference reference;      public ReferenceProperty()     {     }      public ReferenceProperty( EntityReference reference )     {         this.reference = reference;     }      @Override     public EntityReference get()     {         return reference;     }      @Override     public void set( EntityReference newValue )         throws IllegalArgumentException, IllegalStateException     {         reference = newValue;     } };data class;1. blob, 2. data class;t;t;t;1. blob;;0;15108;https://github.com/apache/attic-polygene-java/blob/031beef870302a0bd01bd5895ce849e00f2d5d5b/core/runtime/src/main/java/org/apache/polygene/runtime/value/ReferenceProperty.java/#L28-L54;2;2632;15108
2648;{"response": "YES I found bad smells", "detected_bad_smells": ["Long Method", "Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class TCPSocketChannel {     private AsynchronousSocketChannel channel;     private String address;     private int port;     private String logname;      /**      * Create a TCPSocketChannel that is blocking but times out connects and writes.      * @param address The address to connect to.      * @param port The port to connect to. 0 value means don't open.      * @param logname A name to use for logging.      */     public TCPSocketChannel(String address, int port, String logname) {         this.address = address;         this.port = port;         this.logname = logname;          try {             connectWithTimeout();         } catch (IOException e) {             Log(Level.SEVERE, "Failed to connectWithTimeout AsynchronousSocketChannel: " + e);         } catch (ExecutionException e) {             Log(Level.SEVERE, "Failed to connectWithTimeout AsynchronousSocketChannel: " + e);         } catch (InterruptedException e) {             Log(Level.SEVERE, "Failed to connectWithTimeout AsynchronousSocketChannel: " + e);         } catch (TimeoutException e) {             Log(Level.SEVERE, "AsynchronousSocketChannel connectWithTimeout timed out: " + e);         }     }      public int getPort() { return port; }      public String getAddress() { return address; }      public boolean isValid() { return channel != null; }      public boolean isOpen() { return channel.isOpen(); }      private void Log(Level level, String message)     {         TCPUtils.Log(level, "<-" + this.logname + "(" + this.address + ":" + this.port + ") " + message);     }      private void SysLog(Level level, String message)     {         TCPUtils.SysLog(level, "<-" + this.logname + "(" + this.address + ":" + this.port + ") " + message);     }      private void connectWithTimeout() throws  IOException, ExecutionException, InterruptedException, TimeoutException {         if (port == 0)             return;         InetSocketAddress inetSocketAddress = new InetSocketAddress(address, port);         Log(Level.INFO, "Attempting to open SocketChannel with InetSocketAddress: " + inetSocketAddress);         this.channel = AsynchronousSocketChannel.open();         Future connected = this.channel.connect(inetSocketAddress);         connected.get(TCPUtils.DEFAULT_SOCKET_TIMEOUT_MS, TimeUnit.MILLISECONDS);     }      public void close()     {         Log(Level.INFO, "Attempting to close channel.");         if (this.channel != null)         {             try             {                 this.channel.close();             }             catch (IOException e)             {                 SysLog(Level.SEVERE, "Failed to close channel: " + e);             }         }     }      /**      * Send string over TCP to the specified address via the specified port, including a header.      *      * @param message string to be sent over TCP      * @return true if message was successfully sent      */     public boolean sendTCPString(String message)     {         return sendTCPString(message, 0);     }      /**      * Send string over TCP to the specified address via the specified port, including a header.      *      * @param message string to be sent over TCP      * @param retries number of times to retry in event of failure      * @return true if message was successfully sent      */     public boolean sendTCPString(String message, int retries)     {         Log(Level.FINE, "About to send: " + message);         byte[] bytes = message.getBytes();         return sendTCPBytes(bytes, retries);     }      /**      * Send byte buffer over TCP, including a length header.      *      * @param buffer the bytes to send      * @return true if the message was sent successfully      */     public boolean sendTCPBytes(byte[] buffer)     {         return sendTCPBytes(buffer, 0);     }      /**      * Send byte buffer over TCP, including a length header.      *      * @param bytes the bytes to send      * @param retries number of times to retry in event of failure      * @return true if the message was sent successfully      */     public boolean sendTCPBytes(byte[] bytes, int retries) {         try {             ByteBuffer header = createHeader(bytes.length);              safeWrite(header);              ByteBuffer buffer = ByteBuffer.wrap(bytes);              safeWrite(buffer);          } catch (Exception e) {             SysLog(Level.SEVERE, "Failed to send TCP bytes" + (retries > 0 ? " -- retrying " : "") + ": " + e);              try {                 channel.close();             } catch (IOException ioe) {             }              if (retries > 0) {                 try {                     connectWithTimeout();                 } catch (Exception connectException) {                     SysLog(Level.SEVERE, "Failed to reconnect: " + connectException);                     return false;                 }                 return sendTCPBytes(bytes, retries - 1);             }              return false;         }         return true;     }      /**      * Send byte buffer over TCP, including a length header.      *       * @param srcbuffers the bytes to send      * @return true if the message was sent successfully      */     public boolean sendTCPBytes(ByteBuffer[] srcbuffers, int length)     {         boolean success = false;         try         {             ByteBuffer header = createHeader(length);             ByteBuffer[] buffers = new ByteBuffer[1 + srcbuffers.length];             buffers[0] = header;             for (int i = 0; i < srcbuffers.length; i++)                 buffers[i + 1] = srcbuffers[i];             if (TCPUtils.isLogging())             {                 long t1 = System.nanoTime();                 long bytesWritten = write(buffers);                 long t2 = System.nanoTime();                 double rate = 1000.0 * 1000.0 * 1000.0 * (double) (bytesWritten) / (1024.0 * (double) (t2 - t1));                 Log(Level.INFO, "Sent " + bytesWritten + " bytes at " + rate + " Kb/s");             }             else             {                 write(buffers);             }             success = true;         }         catch (Exception e)         {             SysLog(Level.SEVERE, "Failed to send TCP bytes: " + e);             try { channel.close(); } catch (IOException ioe) {}         }         return success;     }      private ByteBuffer createHeader(int length) {         ByteBuffer header = ByteBuffer.allocate(4).order(ByteOrder.BIG_ENDIAN).putInt(length);         header.flip();         return header;     }      private void safeWrite(ByteBuffer buffer) throws InterruptedException, TimeoutException, ExecutionException, IOException {         while (buffer.remaining() > 0) {             Future  future = this.channel.write(buffer);             int bytesWritten = future.get(TCPUtils.DEFAULT_SOCKET_TIMEOUT_MS, TimeUnit.MILLISECONDS);             if (bytesWritten == 0) {                 throw new IOException("async write failed to send any bytes.");             }         }     }      private long write(ByteBuffer[] buffers) throws InterruptedException, TimeoutException, ExecutionException, IOException {         long bytesWritten = 0;         for (ByteBuffer b : buffers) {             bytesWritten += b.remaining();             safeWrite(b);         }         return bytesWritten;     } };data class;long method, blob;t;t;f;long method,  blob;data class;0;15162;https://github.com/Microsoft/malmo/blob/91b1a7a01ec0dd883f81a51048badac0398695f7/Minecraft/src/main/java/com/microsoft/Malmo/Utils/TCPSocketChannel.java/#L15-L228;2;2648;15162
2650;     {         "output": "YES I found bad smells",         "bad smells are": [             "Blob"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    @Override     public Object getValue(final String columnLabel, final Class type) throws SQLException {         Object result;         if (Object.class == type) {             result = decrypt(columnLabel, resultSet.getObject(columnLabel));         } else if (boolean.class == type) {             result = decrypt(columnLabel, resultSet.getBoolean(columnLabel));         } else if (byte.class == type) {             result = decrypt(columnLabel, resultSet.getByte(columnLabel));         } else if (short.class == type) {             result = decrypt(columnLabel, resultSet.getShort(columnLabel));         } else if (int.class == type) {             result = decrypt(columnLabel, resultSet.getInt(columnLabel));         } else if (long.class == type) {             result = decrypt(columnLabel, resultSet.getLong(columnLabel));         } else if (float.class == type) {             result = decrypt(columnLabel, resultSet.getFloat(columnLabel));         } else if (double.class == type) {             result = decrypt(columnLabel, resultSet.getDouble(columnLabel));         } else if (String.class == type) {             result = decrypt(columnLabel, resultSet.getString(columnLabel));         } else if (BigDecimal.class == type) {             result = decrypt(columnLabel, resultSet.getBigDecimal(columnLabel));         } else if (byte[].class == type) {             result = resultSet.getBytes(columnLabel);         } else if (Date.class == type) {             result = resultSet.getDate(columnLabel);         } else if (Time.class == type) {             result = resultSet.getTime(columnLabel);         } else if (Timestamp.class == type) {             result = resultSet.getTimestamp(columnLabel);         } else if (URL.class == type) {             result = resultSet.getURL(columnLabel);         } else if (Blob.class == type) {             result = resultSet.getBlob(columnLabel);         } else if (Clob.class == type) {             result = resultSet.getClob(columnLabel);         } else if (SQLXML.class == type) {             result = resultSet.getSQLXML(columnLabel);         } else if (Reader.class == type) {             result = resultSet.getCharacterStream(columnLabel);         } else {             result = decrypt(columnLabel, resultSet.getObject(columnLabel));         }         return result;     };long method;blob;t;t;f;blob;long method;0;15167;https://github.com/apache/incubator-shardingsphere/blob/c5cf1d15b02f3a0fb3bda4f15d5f0b3779eac7ba/sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/core/execute/sql/execute/result/StreamQueryResult.java/#L117-L162;2;2650;15167
2672; {"message": "YES I found bad smells", "bad smells are": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class Graph extends GraphShapeElement { 	public enum Alignment { 		HORIZONTAL, VERTICAL 	}  	private List nodes = new ArrayList<>(); 	private Set edges = new HashSet<>(); 	private Set subgraphs = new HashSet<>(); 	private Alignment alignment = Alignment.VERTICAL;  	/** 	 * Constructs a Graph that uses the specified GraphEventManager to handle 	 * any user generated events on GraphElements. 	 *  	 * @param eventManager 	 */ 	public Graph(GraphController graphController) { 		super(graphController); 	}  	/** 	 * Adds an edge to the Graph and sets its parent to be this Graph. 	 *  	 * @param edge 	 *            the edge to add 	 */ 	public void addEdge(GraphEdge edge) { 		edge.setParent(this); 		edges.add(edge); 	}  	/** 	 * Adds a node to the Graph and sets its parent to be this Graph. 	 *  	 * @param node 	 *            the node to add 	 */ 	public void addNode(GraphNode node) { 		node.setParent(this); 		nodes.add(node); 	}  	/** 	 * Adds a subgraph to the Graph and sets its parent to be this Graph. 	 *  	 * @param subgraph 	 *            the subgraph to add 	 */ 	public void addSubgraph(Graph subgraph) { 		subgraph.setParent(this); 		subgraphs.add(subgraph); 	}  	/** 	 * Returns the alignment of the Graph. 	 *  	 * @return the alignment of the Graph 	 */ 	public Alignment getAlignment() { 		return alignment; 	}  	/** 	 * Returns the edges contained in the Graph. 	 *  	 * @return the edges contained in the Graph 	 */ 	public Set getEdges() { 		return Collections.unmodifiableSet(edges); 	}  	/** 	 * Returns the nodes contained in the Graph. 	 *  	 * @return the nodes contained in the Graph 	 */ 	public List getNodes() { 		return Collections.unmodifiableList(nodes); 	}  	/** 	 * Returns the subgraphs contained in the Graph. 	 *  	 * @return the subgraphs contained in the Graph 	 */ 	public Set getSubgraphs() { 		return Collections.unmodifiableSet(subgraphs); 	}  	/** 	 * Removes an edge from the Graph. 	 *  	 * @param edge 	 *            the edge to remove 	 * @return true if the edge is removed from the Graph 	 */ 	public boolean removeEdge(GraphEdge edge) { 		return edges.remove(edge); 	}  	/** 	 * Removes a node from the Graph. 	 *  	 * @param node 	 *            the node to remove 	 * @return true if the node is removed from the Graph 	 */ 	public boolean removeNode(GraphNode node) { 		return nodes.remove(node); 	}  	/** 	 * Removes a subgraph from the Graph. 	 *  	 * @param subgraph 	 *            the subgraph to remove 	 * @return true if the subgraph is removed from the Graph 	 */ 	public boolean removeSubgraph(Graph subgraph) { 		return subgraphs.remove(subgraph); 	}  	/** 	 * Sets the alignment of the Graph. 	 *  	 * @param alignment 	 *            the new alignment 	 */ 	public void setAlignment(Alignment alignment) { 		this.alignment = alignment; 	} };data class;blob, data class;t;t;t;blob;;0;15216;https://github.com/apache/incubator-taverna-workbench/blob/2b74964ac1ee22e56c5dad3321869d84f7052dcf/taverna-graph-model/src/main/java/org/apache/taverna/workbench/models/graph/Graph.java/#L30-L161;2;2672;15216
2679;     {         "output": "YES I found bad smells",         "bad smells are": [             "Long Method",             "Blob"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  private void processEmail(EmailData emailData) {     if (logger.isTraceEnabled()) {       logger.trace("Entered MailManager:processEmail");     }      if (mailHost == null || mailHost.length() == 0 || emailData == null         || mailToAddresses.length == 0) {       logger.error("Required mail server configuration is not specfied.");       if (logger.isDebugEnabled()) {         logger.debug("Exited MailManager:processEmail: Not sending email as conditions not met");       }       return;     }      Session session = Session.getDefaultInstance(getMailHostConfiguration());     MimeMessage mimeMessage = new MimeMessage(session);     String subject = emailData.subject;     String message = emailData.message;     String mailToList = getMailToAddressesAsString();      try {       for (int i = 0; i < mailToAddresses.length; i++) {         mimeMessage.addRecipient(Message.RecipientType.TO, new InternetAddress(mailToAddresses[i]));       }        if (subject == null) {         subject = "Alert from GemFire Admin Agent";       }       mimeMessage.setSubject(subject);        if (message == null) {         message = "";       }       mimeMessage.setText(message);        Transport.send(mimeMessage);       logger.info("Email sent to {}. Subject: {}, Content: {}",           new Object[] {mailToList, subject, message});     } catch (VirtualMachineError err) {       SystemFailure.initiateFailure(err);       // If this ever returns, rethrow the error. We're poisoned       // now, so don't let this thread continue.       throw err;     } catch (Throwable ex) {       // Whenever you catch Error or Throwable, you must also       // catch VirtualMachineError (see above). However, there is       // _still_ a possibility that you are dealing with a cascading       // error condition, so you also need to check to see if the JVM       // is still usable:       SystemFailure.checkFailure();       StringBuilder buf = new StringBuilder();       buf.append("An exception occurred while sending email.");       buf.append(           "Unable to send email. Please check your mail settings and the log file.");       buf.append("\n\n").append(           String.format("Exception message: %s", ex.getMessage()));       buf.append("\n\n").append(           "Following email was not delivered:");       buf.append("\n\t")           .append(String.format("Mail Host: %s", mailHost));       buf.append("\n\t").append(String.format("From: %s", mailFrom));       buf.append("\n\t").append(String.format("To: %s", mailToList));       buf.append("\n\t").append(String.format("Subject: %s", subject));       buf.append("\n\t").append(String.format("Content: %s", message));        logger.error(buf.toString(), ex);     }     if (logger.isTraceEnabled()) {       logger.trace("Exited MailManager:processEmail");     }   };feature envy;long method, blob;t;t;f;long method,  blob;feature envy;0;15254;https://github.com/apache/geode/blob/8fd839e8b73e40bd2dfd14f331b587431bd35a66/geode-core/src/main/java/org/apache/geode/admin/jmx/internal/MailManager.java/#L80-L150;2;2679;15254
2683;     {         "message": "YES I found bad smells",         "bad smells are": [             "Long Method",             "Blob"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  @Override   public final Description matchClass(ClassTree classTree, VisitorState state) {     if (!HAS_CONSTRUCTORS_WITH_INJECT.matches(classTree, state)) {       return Description.NO_MATCH;     }      List ctors = ASTHelpers.getConstructors(classTree);     List ctorsWithInject =         ctors.stream()             .filter(c -> hasInjectAnnotation().matches(c, state))             .collect(toImmutableList());      if (ctorsWithInject.size() != 1) {       // Injection frameworks don't support multiple @Inject ctors.       // There is already an ERROR check for it.       // http://errorprone.info/bugpattern/MoreThanOneInjectableConstructor       return Description.NO_MATCH;     }      // collect the assignments in ctor     Set variablesAssigned = new HashSet<>();     new TreeScanner() {       @Override       public Void visitAssignment(AssignmentTree tree, Void unused) {         Symbol symbol = ASTHelpers.getSymbol(tree.getVariable());         // check if it is instance field.         if (symbol != null && symbol.getKind() == ElementKind.FIELD && !symbol.isStatic()) {           variablesAssigned.add(symbol);         }         return super.visitAssignment(tree, null);       }     }.scan((JCTree) getOnlyElement(ctorsWithInject), null);      SuggestedFix.Builder fix = SuggestedFix.builder();     VariableTree variableTreeFirstMatch = null;     for (Tree member : classTree.getMembers()) {       if (!(member instanceof VariableTree)) {         continue;       }       VariableTree variableTree = (VariableTree) member;       if (!INSTANCE_FIELD_WITH_INJECT.matches(variableTree, state)) {         continue;       }       if (!variablesAssigned.contains(ASTHelpers.getSymbol(variableTree))) {         continue;       }       variableTreeFirstMatch = variableTree;       removeInjectAnnotationFromVariable(variableTree, state).ifPresent(fix::merge);     }     if (variableTreeFirstMatch == null) {       return Description.NO_MATCH;     }     if (fix.isEmpty()) {       return describeMatch(variableTreeFirstMatch);     }     return describeMatch(variableTreeFirstMatch, fix.build());   };long method;long method, blob;t;t;t; blob;;0;15269;https://github.com/google/error-prone/blob/61cb540c08ec63faa56dccce00049cff1f8b41ea/core/src/main/java/com/google/errorprone/bugpatterns/inject/InjectOnMemberAndConstructor.java/#L72-L128;2;2683;15269
2703;    {         "message": "YES I found bad smells",         "detected_bad_smells": [             "Long Method",             "Blob"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    static Class findProviderClass(String className, ClassLoader cl,                                            boolean doFallback)         throws ClassNotFoundException, ConfigurationError     {            //throw security exception if the calling thread is not allowed to access the         //class. Restrict the access to the package classes as specified in java.security policy.         SecurityManager security = System.getSecurityManager();         try{                 if (security != null){                     final int lastDot = className.lastIndexOf('.');                     String packageName = className;                     if (lastDot != -1) packageName = className.substring(0, lastDot);                     security.checkPackageAccess(packageName);                  }            }catch(SecurityException e){             throw e;         }                  Class providerClass;         if (cl == null) {             // XXX Use the bootstrap ClassLoader.  There is no way to             // load a class using the bootstrap ClassLoader that works             // in both JDK 1.1 and Java 2.  However, this should still             // work b/c the following should be true:             //             // (cl == null) iff current ClassLoader == null             //             // Thus Class.forName(String) will use the current             // ClassLoader which will be the bootstrap ClassLoader.             providerClass = Class.forName(className);         } else {             try {                 providerClass = cl.loadClass(className);             } catch (ClassNotFoundException x) {                 if (doFallback) {                     // Fall back to current classloader                     ClassLoader current = ObjectFactory.class.getClassLoader();                     if (current == null) {                         providerClass = Class.forName(className);                     } else if (cl != current) {                         cl = current;                         providerClass = cl.loadClass(className);                     } else {                         throw x;                     }                 } else {                     throw x;                 }             }         }          return providerClass;     };long method;long method, blob;t;t;t; blob;;0;15335;https://github.com/apache/servicemix-bundles/blob/5f2c7727f71c167997947ad4604f9b8200952af2/xalan-2.7.2/src/main/java/org/apache/xalan/xsltc/runtime/ObjectFactory.java/#L477-L529;2;2703;15335
2750;      {         "message": "YES I found bad smells",         "detected_bad_smells": [             {                 "1": "Blob"             },             {                 "2": "Long Method"             }         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
	@Override 	public String getLoggerLevel(String loggerName) { 		String result = null;  /*[IF Sidecar19-SE]*/ 		try { 			Object logger = getLoggerFromName(loggerName); /*[ELSE]	 			Logger logger = LogManager.getLogManager().getLogger(loggerName); /*[ENDIF]*/			 			 			if (logger != null) { 				// The named Logger exists. Now attempt to obtain its log level. /*[IF Sidecar19-SE]*/ 				Object level = logger_getLevel.invoke(logger); /*[ELSE]					 				Level level = logger.getLevel(); /*[ENDIF]*/					 				if (level != null) { /*[IF Sidecar19-SE]*/ 					result = (String)level_getName.invoke(level); /*[ELSE]	 					result = level.getName(); /*[ENDIF]*/	 				} else { 					// A null return from getLevel() means that the Logger 					// is inheriting its log level from an ancestor. Return an 					// empty string to the caller. 					result = ""; //$NON-NLS-1$ 				} 			} /*[IF Sidecar19-SE]*/ 		} catch (Exception e) { 			throw handleError(e); 		} /*[ENDIF]*/ 		 		return result; 	};long method;1: blob, 2: long method;t;t;t;1: blob;;0;818;https://github.com/eclipse/openj9/blob/4911084853eb75b20e037c434ad4521b7317ebfb/jcl/src/java.management/share/classes/com/ibm/java/lang/management/internal/LoggingMXBeanImpl.java/#L148-L186;2;2750;818
2851;{"response": "YES I found bad smells", "bad smells": ["Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
	@Override 	public String getDisplayName() { 		return AssignmentsTestLanguageLanguage.INSTANCE.getDisplayName(); 	};feature envy;blob;t;t;f;blob;feature envy;0;1807;https://github.com/eclipse/xtext-idea/blob/3aa1424ae35f1942dd7c3a457057006f9131de5e/org.eclipse.xtext.core.idea.tests/src-gen/org/eclipse/xtext/parser/assignments/idea/highlighting/AssignmentsTestLanguageBaseColorSettingsPage.java/#L13-L16;2;2851;1807
3326; {"message": "YES I found bad smells", "bad smells are": ["Blob", "Data Class"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class RestConfiguration {      public static final String CORS_ACCESS_CONTROL_ALLOW_ORIGIN = "*";     public static final String CORS_ACCESS_CONTROL_ALLOW_METHODS = "GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, CONNECT, PATCH";     public static final String CORS_ACCESS_CONTROL_MAX_AGE = "3600";     public static final String CORS_ACCESS_CONTROL_ALLOW_HEADERS = "Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers";      public enum RestBindingMode {         auto, off, json, xml, json_xml     }      public enum RestHostNameResolver {         allLocalIp, localIp, localHostName     }      private String component;     private String apiComponent;     private String producerComponent;     private String producerApiDoc;     private String scheme;     private String host;     private boolean useXForwardHeaders = true;     private String apiHost;     private int port;     private String contextPath;     private String apiContextPath;     private String apiContextRouteId;     private String apiContextIdPattern;     private boolean apiContextListing;     private boolean apiVendorExtension;     private RestHostNameResolver hostNameResolver = RestHostNameResolver.allLocalIp;     private RestBindingMode bindingMode = RestBindingMode.off;     private boolean skipBindingOnErrorCode = true;     private boolean clientRequestValidation;     private boolean enableCORS;     private String jsonDataFormat;     private String xmlDataFormat;     private Map componentProperties;     private Map endpointProperties;     private Map consumerProperties;     private Map dataFormatProperties;     private Map apiProperties;     private Map corsHeaders;      /**      * Gets the name of the Camel component to use as the REST consumer      *      * @return the component name, or null to let Camel search the {@link Registry} to find suitable implementation      */     public String getComponent() {         return component;     }      /**      * Sets the name of the Camel component to use as the REST consumer      *      * @param componentName the name of the component (such as restlet, spark-rest, etc.)      */     public void setComponent(String componentName) {         this.component = componentName;     }      /**      * Gets the name of the Camel component to use as the REST API (such as swagger)      *      * @return the component name, or null to let Camel use the default name swagger      */     public String getApiComponent() {         return apiComponent;     }      /**      * Sets the name of the Camel component to use as the REST API (such as swagger)      *      * @param apiComponent the name of the component (such as swagger)      */     public void setApiComponent(String apiComponent) {         this.apiComponent = apiComponent;     }      /**      * Gets the name of the Camel component to use as the REST producer      *      * @return the component name, or null to let Camel search the {@link Registry} to find suitable implementation      */     public String getProducerComponent() {         return producerComponent;     }      /**      * Sets the name of the Camel component to use as the REST producer      *      * @param componentName the name of the component (such as restlet, jetty, etc.)      */     public void setProducerComponent(String componentName) {         this.producerComponent = componentName;     }      /**      * Gets the location of the api document (swagger api) the REST producer will use      * to validate the REST uri and query parameters are valid accordingly to the api document.      */     public String getProducerApiDoc() {         return producerApiDoc;     }      /**      * Sets the location of the api document (swagger api) the REST producer will use      * to validate the REST uri and query parameters are valid accordingly to the api document.      * This requires adding camel-swagger-java to the classpath, and any miss configuration      * will let Camel fail on startup and report the error(s).      *       * The location of the api document is loaded from classpath by default, but you can use      * file: or http: to refer to resources to load from file or http url.      */     public void setProducerApiDoc(String producerApiDoc) {         this.producerApiDoc = producerApiDoc;     }      /**      * Gets the hostname to use by the REST consumer      *      * @return the hostname, or null to use default hostname      */     public String getHost() {         return host;     }      /**      * Sets the hostname to use by the REST consumer      *      * @param host the hostname      */     public void setHost(String host) {         this.host = host;     }      /**      * WWhether to use X-Forward headers to set host etc. for Swagger.      *       * This option is default true.      */     public boolean isUseXForwardHeaders() {         return useXForwardHeaders;     }      /**      * WWhether to use X-Forward headers to set host etc. for Swagger.      *       * This option is default true.      *       * @param useXForwardHeaders whether to use X-Forward headers      */     public void setUseXForwardHeaders(boolean useXForwardHeaders) {         this.useXForwardHeaders = useXForwardHeaders;     }      public String getApiHost() {         return apiHost;     }      /**      * To use an specific hostname for the API documentation (eg swagger)      *       * This can be used to override the generated host with this configured hostname      */     public void setApiHost(String apiHost) {         this.apiHost = apiHost;     }      /**      * Gets the scheme to use by the REST consumer      *      * @return the scheme, or null to use default scheme      */     public String getScheme() {         return scheme;     }      /**      * Sets the scheme to use by the REST consumer      *      * @param scheme the scheme      */     public void setScheme(String scheme) {         this.scheme = scheme;     }      /**      * Gets the port to use by the REST consumer      *      * @return the port, or 0 or -1 to use default port      */     public int getPort() {         return port;     }      /**      * Sets the port to use by the REST consumer      *      * @param port the port number      */     public void setPort(int port) {         this.port = port;     }      /**      * Gets the configured context-path      *      * @return the context path, or null if none configured.      */     public String getContextPath() {         return contextPath;     }      /**      * Sets a leading context-path the REST services will be using.      *       * This can be used when using components such as camel-servlet where the deployed web application      * is deployed using a context-path. Or for components such as camel-jetty or camel-netty4-http      * that includes a HTTP server.      *      * @param contextPath the context path      */     public void setContextPath(String contextPath) {         this.contextPath = contextPath;     }      public String getApiContextPath() {         return apiContextPath;     }      /**      * Sets a leading API context-path the REST API services will be using.      *       * This can be used when using components such as camel-servlet where the deployed web application      * is deployed using a context-path.      *      * @param contextPath the API context path      */     public void setApiContextPath(String contextPath) {         this.apiContextPath = contextPath;     }      public String getApiContextRouteId() {         return apiContextRouteId;     }      /**      * Sets the route id to use for the route that services the REST API.      *       * The route will by default use an auto assigned route id.      *      * @param apiContextRouteId  the route id      */     public void setApiContextRouteId(String apiContextRouteId) {         this.apiContextRouteId = apiContextRouteId;     }      public String getApiContextIdPattern() {         return apiContextIdPattern;     }      /**      * Optional CamelContext id pattern to only allow Rest APIs from rest services within CamelContext's which name matches the pattern.      *       * The pattern #name# refers to the CamelContext name, to match on the current CamelContext only.      * For any other value, the pattern uses the rules from {@link org.apache.camel.support.EndpointHelper#matchPattern(String, String)}      *      * @param apiContextIdPattern  the pattern      */     public void setApiContextIdPattern(String apiContextIdPattern) {         this.apiContextIdPattern = apiContextIdPattern;     }      public boolean isApiContextListing() {         return apiContextListing;     }      /**      * Sets whether listing of all available CamelContext's with REST services in the JVM is enabled. If enabled it allows to discover      * these contexts, if false then only the current CamelContext is in use.      */     public void setApiContextListing(boolean apiContextListing) {         this.apiContextListing = apiContextListing;     }      public boolean isApiVendorExtension() {         return apiVendorExtension;     }      /**      * Whether vendor extension is enabled in the Rest APIs. If enabled then Camel will include additional information      * as vendor extension (eg keys starting with x-) such as route ids, class names etc.      * Not all 3rd party API gateways and tools supports vendor-extensions when importing your API docs.      */     public void setApiVendorExtension(boolean apiVendorExtension) {         this.apiVendorExtension = apiVendorExtension;     }      /**      * Gets the resolver to use for resolving hostname      *      * @return the resolver      */     public RestHostNameResolver getHostNameResolver() {         return hostNameResolver;     }      /**      * Sets the resolver to use for resolving hostname      *      * @param hostNameResolver the resolver      */     public void setHostNameResolver(RestHostNameResolver hostNameResolver) {         this.hostNameResolver = hostNameResolver;     }      /**      * Sets the resolver to use for resolving hostname      *      * @param hostNameResolver the resolver      */     public void setHostNameResolver(String hostNameResolver) {         this.hostNameResolver = RestHostNameResolver.valueOf(hostNameResolver);     }      /**      * Gets the binding mode used by the REST consumer      *      * @return the binding mode      */     public RestBindingMode getBindingMode() {         return bindingMode;     }      /**      * Sets the binding mode to be used by the REST consumer      *      * @param bindingMode the binding mode      */     public void setBindingMode(RestBindingMode bindingMode) {         this.bindingMode = bindingMode;     }      /**      * Sets the binding mode to be used by the REST consumer      *      * @param bindingMode the binding mode      */     public void setBindingMode(String bindingMode) {         this.bindingMode = RestBindingMode.valueOf(bindingMode);     }      /**      * Whether to skip binding output if there is a custom HTTP error code, and instead use the response body as-is.      *       * This option is default true.      *      * @return whether to skip binding on error code      */     public boolean isSkipBindingOnErrorCode() {         return skipBindingOnErrorCode;     }      /**      * Whether to skip binding output if there is a custom HTTP error code, and instead use the response body as-is.      *       * This option is default true.      *      * @param skipBindingOnErrorCode whether to skip binding on error code      */     public void setSkipBindingOnErrorCode(boolean skipBindingOnErrorCode) {         this.skipBindingOnErrorCode = skipBindingOnErrorCode;     }      public boolean isClientRequestValidation() {         return clientRequestValidation;     }      /**      * Whether to enable validation of the client request to check whether the Content-Type and Accept headers from      * the client is supported by the Rest-DSL configuration of its consumes/produces settings.      *       * This can be turned on, to enable this check. In case of validation error, then HTTP Status codes 415 or 406 is returned.      *       * The default value is false.      */     public void setClientRequestValidation(boolean clientRequestValidation) {         this.clientRequestValidation = clientRequestValidation;     }      /**      * To specify whether to enable CORS which means Camel will automatic include CORS in the HTTP headers in the response.      *       * This option is default false      *      * @return whether CORS is enabled or not      */     public boolean isEnableCORS() {         return enableCORS;     }      /**      * To specify whether to enable CORS which means Camel will automatic include CORS in the HTTP headers in the response.      *       * This option is default false      *      * @param enableCORS true to enable CORS      */     public void setEnableCORS(boolean enableCORS) {         this.enableCORS = enableCORS;     }      /**      * Gets the name of the json data format.      *       * Important: This option is only for setting a custom name of the data format, not to refer to an existing data format instance.      *      * @return the name, or null to use default      */     public String getJsonDataFormat() {         return jsonDataFormat;     }      /**      * Sets a custom json data format to be used      *       * Important: This option is only for setting a custom name of the data format, not to refer to an existing data format instance.      *      * @param name name of the data format      */     public void setJsonDataFormat(String name) {         this.jsonDataFormat = name;     }      /**      * Gets the name of the xml data format.      *       * Important: This option is only for setting a custom name of the data format, not to refer to an existing data format instance.      *      * @return the name, or null to use default      */     public String getXmlDataFormat() {         return xmlDataFormat;     }      /**      * Sets a custom xml data format to be used.      *       * Important: This option is only for setting a custom name of the data format, not to refer to an existing data format instance.      *      * @param name name of the data format      */     public void setXmlDataFormat(String name) {         this.xmlDataFormat = name;     }      /**      * Gets additional options on component level      *      * @return additional options      */     public Map getComponentProperties() {         return componentProperties;     }      /**      * Sets additional options on component level      *      * @param componentProperties the options      */     public void setComponentProperties(Map componentProperties) {         this.componentProperties = componentProperties;     }      /**      * Gets additional options on endpoint level      *      * @return additional options      */     public Map getEndpointProperties() {         return endpointProperties;     }      /**      * Sets additional options on endpoint level      *      * @param endpointProperties the options      */     public void setEndpointProperties(Map endpointProperties) {         this.endpointProperties = endpointProperties;     }      /**      * Gets additional options on consumer level      *      * @return additional options      */     public Map getConsumerProperties() {         return consumerProperties;     }      /**      * Sets additional options on consumer level      *      * @param consumerProperties the options      */     public void setConsumerProperties(Map consumerProperties) {         this.consumerProperties = consumerProperties;     }      /**      * Gets additional options on data format level      *      * @return additional options      */     public Map getDataFormatProperties() {         return dataFormatProperties;     }      /**      * Sets additional options on data format level      *      * @param dataFormatProperties the options      */     public void setDataFormatProperties(Map dataFormatProperties) {         this.dataFormatProperties = dataFormatProperties;     }      public Map getApiProperties() {         return apiProperties;     }      /**      * Sets additional options on api level      *      * @param apiProperties the options      */     public void setApiProperties(Map apiProperties) {         this.apiProperties = apiProperties;     }      /**      * Gets the CORS headers to use if CORS has been enabled.      *      * @return the CORS headers      */     public Map getCorsHeaders() {         return corsHeaders;     }      /**      * Sets the CORS headers to use if CORS has been enabled.      *      * @param corsHeaders the CORS headers      */     public void setCorsHeaders(Map corsHeaders) {         this.corsHeaders = corsHeaders;     } };data class;blob, data class;t;t;t;blob;;0;6173;https://github.com/apache/camel/blob/8a85a70643c4d6eec2d3abddeea44ecb06c2f486/core/camel-api/src/main/java/org/apache/camel/spi/RestConfiguration.java/#L25-L585;2;3326;6173
3437; {   "message": "YES I found bad smells",   "bad smells": [     "Blob",     "Data Class"   ] }  ;The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class ChannelTypeXmlResult {      private ChannelType channelType;     private ConfigDescription configDescription;     private boolean system;      public ChannelTypeXmlResult(ChannelType channelType, ConfigDescription configDescription) {         this(channelType, configDescription, false);     }      public ChannelTypeXmlResult(ChannelType channelType, ConfigDescription configDescription, boolean system) {         this.channelType = channelType;         this.configDescription = configDescription;         this.system = system;     }      public ChannelType toChannelType() {         return this.channelType;     }      public ConfigDescription getConfigDescription() {         return this.configDescription;     }      public boolean isSystem() {         return system;     }      @Override     public String toString() {         return "ChannelTypeXmlResult [channelType=" + channelType + ", configDescription=" + configDescription + "]";     }  };data class;blob, data class;t;t;t;blob;;0;6831;https://github.com/eclipse/smarthome/blob/b8455de15d65512e8fac4e94d42de6ab2fccf1c5/bundles/core/org.eclipse.smarthome.core.thing.xml/src/main/java/org/eclipse/smarthome/core/thing/xml/internal/ChannelTypeXmlResult.java/#L28-L61;2;3437;6831
3557;     {         "response": "YES I found bad smells",         "bad smells are": [             "Long Method",             "Blob"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    @Override     public Object getValue(final String columnLabel, final Class type) throws SQLException {         Object result;         if (Object.class == type) {             result = decrypt(columnLabel, resultSet.getObject(columnLabel));         } else if (boolean.class == type) {             result = decrypt(columnLabel, resultSet.getBoolean(columnLabel));         } else if (byte.class == type) {             result = decrypt(columnLabel, resultSet.getByte(columnLabel));         } else if (short.class == type) {             result = decrypt(columnLabel, resultSet.getShort(columnLabel));         } else if (int.class == type) {             result = decrypt(columnLabel, resultSet.getInt(columnLabel));         } else if (long.class == type) {             result = decrypt(columnLabel, resultSet.getLong(columnLabel));         } else if (float.class == type) {             result = decrypt(columnLabel, resultSet.getFloat(columnLabel));         } else if (double.class == type) {             result = decrypt(columnLabel, resultSet.getDouble(columnLabel));         } else if (String.class == type) {             result = decrypt(columnLabel, resultSet.getString(columnLabel));         } else if (BigDecimal.class == type) {             result = decrypt(columnLabel, resultSet.getBigDecimal(columnLabel));         } else if (byte[].class == type) {             result = resultSet.getBytes(columnLabel);         } else if (Date.class == type) {             result = resultSet.getDate(columnLabel);         } else if (Time.class == type) {             result = resultSet.getTime(columnLabel);         } else if (Timestamp.class == type) {             result = resultSet.getTimestamp(columnLabel);         } else if (URL.class == type) {             result = resultSet.getURL(columnLabel);         } else if (Blob.class == type) {             result = resultSet.getBlob(columnLabel);         } else if (Clob.class == type) {             result = resultSet.getClob(columnLabel);         } else if (SQLXML.class == type) {             result = resultSet.getSQLXML(columnLabel);         } else if (Reader.class == type) {             result = resultSet.getCharacterStream(columnLabel);         } else {             result = decrypt(columnLabel, resultSet.getObject(columnLabel));         }         return result;     };long method;long method, blob;t;t;t; blob;;0;7777;https://github.com/apache/incubator-shardingsphere/blob/c5cf1d15b02f3a0fb3bda4f15d5f0b3779eac7ba/sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/core/execute/sql/execute/result/StreamQueryResult.java/#L117-L162;2;3557;7777
3612;{     "message": "YES I found bad smells",     "the bad smells are": ["Blob"] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class DruidPooledCallableStatement extends DruidPooledPreparedStatement implements CallableStatement {      private CallableStatement stmt;      public DruidPooledCallableStatement(DruidPooledConnection conn, PreparedStatementHolder holder) throws SQLException{         super(conn, holder);         this.stmt = (CallableStatement) holder.statement;     }      public CallableStatement getCallableStatementRaw() {         return stmt;     }      @Override     public void registerOutParameter(int parameterIndex, int sqlType) throws SQLException {         try {             stmt.registerOutParameter(parameterIndex, sqlType);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void registerOutParameter(int parameterIndex, int sqlType, int scale) throws SQLException {         try {             stmt.registerOutParameter(parameterIndex, sqlType, scale);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public boolean wasNull() throws SQLException {         try {             return stmt.wasNull();         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public String getString(int parameterIndex) throws SQLException {         try {             return stmt.getString(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public boolean getBoolean(int parameterIndex) throws SQLException {         try {             return stmt.getBoolean(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public byte getByte(int parameterIndex) throws SQLException {         try {             return stmt.getByte(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public short getShort(int parameterIndex) throws SQLException {         try {             return stmt.getShort(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public int getInt(int parameterIndex) throws SQLException {         try {             return stmt.getInt(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public long getLong(int parameterIndex) throws SQLException {         try {             return stmt.getLong(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public float getFloat(int parameterIndex) throws SQLException {         try {             return stmt.getFloat(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public double getDouble(int parameterIndex) throws SQLException {         try {             return stmt.getDouble(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     @Deprecated     public BigDecimal getBigDecimal(int parameterIndex, int scale) throws SQLException {         try {             return stmt.getBigDecimal(parameterIndex, scale);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public byte[] getBytes(int parameterIndex) throws SQLException {         try {             return stmt.getBytes(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Date getDate(int parameterIndex) throws SQLException {         try {             return stmt.getDate(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Time getTime(int parameterIndex) throws SQLException {         try {             return stmt.getTime(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Timestamp getTimestamp(int parameterIndex) throws SQLException {         try {             return stmt.getTimestamp(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Object getObject(int parameterIndex) throws SQLException {         try {             Object obj = stmt.getObject(parameterIndex);             return wrapObject(obj);         } catch (Throwable t) {             throw checkException(t);         }     }      private Object wrapObject(Object obj) {         if (obj instanceof ResultSet) {             ResultSet rs = (ResultSet) obj;                          DruidPooledResultSet poolableResultSet = new DruidPooledResultSet(this, rs);             addResultSetTrace(poolableResultSet);                          obj = poolableResultSet;         }                  return obj;     }      @Override     public BigDecimal getBigDecimal(int parameterIndex) throws SQLException {         try {             return stmt.getBigDecimal(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Object getObject(int parameterIndex, java.util.Map> map) throws SQLException {         try {             Object obj = stmt.getObject(parameterIndex, map);             return wrapObject(obj);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Ref getRef(int parameterIndex) throws SQLException {         try {             return stmt.getRef(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Blob getBlob(int parameterIndex) throws SQLException {         try {             return stmt.getBlob(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Clob getClob(int parameterIndex) throws SQLException {         try {             return stmt.getClob(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Array getArray(int parameterIndex) throws SQLException {         try {             return stmt.getArray(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Date getDate(int parameterIndex, Calendar cal) throws SQLException {         try {             return stmt.getDate(parameterIndex, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Time getTime(int parameterIndex, Calendar cal) throws SQLException {         try {             return stmt.getTime(parameterIndex, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Timestamp getTimestamp(int parameterIndex, Calendar cal) throws SQLException {         try {             return stmt.getTimestamp(parameterIndex, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void registerOutParameter(int parameterIndex, int sqlType, String typeName) throws SQLException {         try {             stmt.registerOutParameter(parameterIndex, sqlType, typeName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void registerOutParameter(String parameterName, int sqlType) throws SQLException {         try {             stmt.registerOutParameter(parameterName, sqlType);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException {         try {             stmt.registerOutParameter(parameterName, sqlType, scale);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException {         try {             stmt.registerOutParameter(parameterName, sqlType, typeName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.net.URL getURL(int parameterIndex) throws SQLException {         try {             return stmt.getURL(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setURL(String parameterName, java.net.URL val) throws SQLException {         try {             stmt.setURL(parameterName, val);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNull(String parameterName, int sqlType) throws SQLException {         try {             stmt.setNull(parameterName, sqlType);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBoolean(String parameterName, boolean x) throws SQLException {         try {             stmt.setBoolean(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setByte(String parameterName, byte x) throws SQLException {         try {             stmt.setByte(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setShort(String parameterName, short x) throws SQLException {         try {             stmt.setShort(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setInt(String parameterName, int x) throws SQLException {         try {             stmt.setInt(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setLong(String parameterName, long x) throws SQLException {         try {             stmt.setLong(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setFloat(String parameterName, float x) throws SQLException {         try {             stmt.setFloat(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setDouble(String parameterName, double x) throws SQLException {         try {             stmt.setDouble(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBigDecimal(String parameterName, BigDecimal x) throws SQLException {         try {             stmt.setBigDecimal(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setString(String parameterName, String x) throws SQLException {         try {             stmt.setString(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBytes(String parameterName, byte x[]) throws SQLException {         try {             stmt.setBytes(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setDate(String parameterName, java.sql.Date x) throws SQLException {         try {             stmt.setDate(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setTime(String parameterName, java.sql.Time x) throws SQLException {         try {             stmt.setTime(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setTimestamp(String parameterName, java.sql.Timestamp x) throws SQLException {         try {             stmt.setTimestamp(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setAsciiStream(String parameterName, java.io.InputStream x, int length) throws SQLException {         try {             stmt.setAsciiStream(parameterName, x, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBinaryStream(String parameterName, java.io.InputStream x, int length) throws SQLException {         try {             stmt.setBinaryStream(parameterName, x, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setObject(String parameterName, Object x, int targetSqlType, int scale) throws SQLException {         try {             stmt.setObject(parameterName, x, targetSqlType, scale);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setObject(String parameterName, Object x, int targetSqlType) throws SQLException {         try {             stmt.setObject(parameterName, x, targetSqlType);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setObject(String parameterName, Object x) throws SQLException {         try {             stmt.setObject(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setCharacterStream(String parameterName, java.io.Reader reader, int length) throws SQLException {         try {             stmt.setCharacterStream(parameterName, reader, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setDate(String parameterName, java.sql.Date x, Calendar cal) throws SQLException {         try {             stmt.setDate(parameterName, x, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setTime(String parameterName, java.sql.Time x, Calendar cal) throws SQLException {         try {             stmt.setTime(parameterName, x, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setTimestamp(String parameterName, java.sql.Timestamp x, Calendar cal) throws SQLException {         try {             stmt.setTimestamp(parameterName, x, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNull(String parameterName, int sqlType, String typeName) throws SQLException {         try {             stmt.setNull(parameterName, sqlType, typeName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public String getString(String parameterName) throws SQLException {         try {             return stmt.getString(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public boolean getBoolean(String parameterName) throws SQLException {         try {             return stmt.getBoolean(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public byte getByte(String parameterName) throws SQLException {         try {             return stmt.getByte(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public short getShort(String parameterName) throws SQLException {         try {             return stmt.getShort(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public int getInt(String parameterName) throws SQLException {         try {             return stmt.getInt(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public long getLong(String parameterName) throws SQLException {         try {             return stmt.getLong(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public float getFloat(String parameterName) throws SQLException {         try {             return stmt.getFloat(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public double getDouble(String parameterName) throws SQLException {         try {             return stmt.getDouble(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public byte[] getBytes(String parameterName) throws SQLException {         try {             return stmt.getBytes(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Date getDate(String parameterName) throws SQLException {         try {             return stmt.getDate(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Time getTime(String parameterName) throws SQLException {         try {             return stmt.getTime(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Timestamp getTimestamp(String parameterName) throws SQLException {         try {             return stmt.getTimestamp(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Object getObject(String parameterName) throws SQLException {         try {             Object obj = stmt.getObject(parameterName);             return wrapObject(obj);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public BigDecimal getBigDecimal(String parameterName) throws SQLException {         try {             return stmt.getBigDecimal(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Object getObject(String parameterName, java.util.Map> map) throws SQLException {         try {             Object obj = stmt.getObject(parameterName, map);             return wrapObject(obj);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Ref getRef(String parameterName) throws SQLException {         try {             return stmt.getRef(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Blob getBlob(String parameterName) throws SQLException {         try {             return stmt.getBlob(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Clob getClob(String parameterName) throws SQLException {         try {             return stmt.getClob(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public Array getArray(String parameterName) throws SQLException {         try {             return stmt.getArray(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Date getDate(String parameterName, Calendar cal) throws SQLException {         try {             return stmt.getDate(parameterName, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Time getTime(String parameterName, Calendar cal) throws SQLException {         try {             return stmt.getTime(parameterName, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.sql.Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException {         try {             return stmt.getTimestamp(parameterName, cal);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.net.URL getURL(String parameterName) throws SQLException {         try {             return stmt.getURL(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public RowId getRowId(int parameterIndex) throws SQLException {         try {             return stmt.getRowId(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public RowId getRowId(String parameterName) throws SQLException {         try {             return stmt.getRowId(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setRowId(String parameterName, RowId x) throws SQLException {         try {             stmt.setRowId(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNString(String parameterName, String value) throws SQLException {         try {             stmt.setNString(parameterName, value);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNCharacterStream(String parameterName, Reader value, long length) throws SQLException {         try {             stmt.setNCharacterStream(parameterName, value, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNClob(String parameterName, NClob value) throws SQLException {         try {             stmt.setNClob(parameterName, value);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setClob(String parameterName, Reader reader, long length) throws SQLException {         try {             stmt.setClob(parameterName, reader, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBlob(String parameterName, InputStream inputStream, long length) throws SQLException {         try {             stmt.setBlob(parameterName, inputStream, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNClob(String parameterName, Reader reader, long length) throws SQLException {         try {             stmt.setNClob(parameterName, reader, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public NClob getNClob(int parameterIndex) throws SQLException {         try {             return stmt.getNClob(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public NClob getNClob(String parameterName) throws SQLException {         try {             return stmt.getNClob(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setSQLXML(String parameterName, SQLXML xmlObject) throws SQLException {         try {             stmt.setSQLXML(parameterName, xmlObject);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public SQLXML getSQLXML(int parameterIndex) throws SQLException {         try {             return stmt.getSQLXML(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public SQLXML getSQLXML(String parameterName) throws SQLException {         try {             return stmt.getSQLXML(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public String getNString(int parameterIndex) throws SQLException {         try {             return stmt.getNString(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public String getNString(String parameterName) throws SQLException {         try {             return stmt.getNString(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.io.Reader getNCharacterStream(int parameterIndex) throws SQLException {         try {             return stmt.getNCharacterStream(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.io.Reader getNCharacterStream(String parameterName) throws SQLException {         try {             return stmt.getNCharacterStream(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.io.Reader getCharacterStream(int parameterIndex) throws SQLException {         try {             return stmt.getCharacterStream(parameterIndex);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public java.io.Reader getCharacterStream(String parameterName) throws SQLException {         try {             return stmt.getCharacterStream(parameterName);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBlob(String parameterName, Blob x) throws SQLException {         try {             stmt.setBlob(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setClob(String parameterName, Clob x) throws SQLException {         try {             stmt.setClob(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setAsciiStream(String parameterName, java.io.InputStream x, long length) throws SQLException {         try {             stmt.setAsciiStream(parameterName, x, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBinaryStream(String parameterName, java.io.InputStream x, long length) throws SQLException {         try {             stmt.setBinaryStream(parameterName, x, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setCharacterStream(String parameterName, java.io.Reader reader, long length) throws SQLException {         try {             stmt.setCharacterStream(parameterName, reader, length);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setAsciiStream(String parameterName, java.io.InputStream x) throws SQLException {         try {             stmt.setAsciiStream(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBinaryStream(String parameterName, java.io.InputStream x) throws SQLException {         try {             stmt.setBinaryStream(parameterName, x);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setCharacterStream(String parameterName, java.io.Reader reader) throws SQLException {         try {             stmt.setCharacterStream(parameterName, reader);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNCharacterStream(String parameterName, Reader value) throws SQLException {         try {             stmt.setNCharacterStream(parameterName, value);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setClob(String parameterName, Reader reader) throws SQLException {         try {             stmt.setClob(parameterName, reader);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setBlob(String parameterName, InputStream inputStream) throws SQLException {         try {             stmt.setBlob(parameterName, inputStream);         } catch (Throwable t) {             throw checkException(t);         }     }      @Override     public void setNClob(String parameterName, Reader reader) throws SQLException {         try {             stmt.setNClob(parameterName, reader);         } catch (Throwable t) {             throw checkException(t);         }     }      public  T getObject(int parameterIndex, Class type) throws SQLException {         throw new SQLFeatureNotSupportedException();     }      public  T getObject(String parameterName, Class type) throws SQLException {         throw new SQLFeatureNotSupportedException();     }      @SuppressWarnings("unchecked")     public  T unwrap(Class iface) throws SQLException {         if (iface == CallableStatement.class || iface == PreparedStatement.class) {             if (stmt instanceof CallableStatementProxy) {                 return stmt.unwrap(iface);             }             return (T) stmt;         }                  return super.unwrap(iface);     } };data class;blob;t;t;f;blob;data class;0;8077;https://github.com/alibaba/druid/blob/768469fe4d1340efe1036453366a58c9ab7e30d1/src/main/java/com/alibaba/druid/pool/DruidPooledCallableStatement.java/#L40-L1089;2;3612;8077
3714;   {     "output": "YES I found bad smells",     "bad smells are": [       "Blob",       "Data Class",       "Long Method"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
	public class ExistingEnumElements extends AbstractEnumRuleElementFinder { 		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.enumrules.EnumRulesTestLanguage.ExistingEnum"); 		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1); 		private final EnumLiteralDeclaration cSameNameEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0); 		private final Keyword cSameNameSameNameKeyword_0_0 = (Keyword)cSameNameEnumLiteralDeclaration_0.eContents().get(0); 		private final EnumLiteralDeclaration cOverriddenLiteralEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1); 		private final Keyword cOverriddenLiteralOverriddenKeyword_1_0 = (Keyword)cOverriddenLiteralEnumLiteralDeclaration_1.eContents().get(0); 		private final EnumLiteralDeclaration cDifferentNameEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2); 		private final Keyword cDifferentNameDifferentLiteralKeyword_2_0 = (Keyword)cDifferentNameEnumLiteralDeclaration_2.eContents().get(0); 		 		//enum ExistingEnum: 		//	SameName | OverriddenLiteral="overridden" | DifferentName="DifferentLiteral"; 		public EnumRule getRule() { return rule; } 		 		//SameName | OverriddenLiteral="overridden" | DifferentName="DifferentLiteral" 		public Alternatives getAlternatives() { return cAlternatives; } 		 		//SameName 		public EnumLiteralDeclaration getSameNameEnumLiteralDeclaration_0() { return cSameNameEnumLiteralDeclaration_0; } 		 		//"SameName" 		public Keyword getSameNameSameNameKeyword_0_0() { return cSameNameSameNameKeyword_0_0; } 		 		//OverriddenLiteral="overridden" 		public EnumLiteralDeclaration getOverriddenLiteralEnumLiteralDeclaration_1() { return cOverriddenLiteralEnumLiteralDeclaration_1; } 		 		//"overridden" 		public Keyword getOverriddenLiteralOverriddenKeyword_1_0() { return cOverriddenLiteralOverriddenKeyword_1_0; } 		 		//DifferentName="DifferentLiteral" 		public EnumLiteralDeclaration getDifferentNameEnumLiteralDeclaration_2() { return cDifferentNameEnumLiteralDeclaration_2; } 		 		//"DifferentLiteral" 		public Keyword getDifferentNameDifferentLiteralKeyword_2_0() { return cDifferentNameDifferentLiteralKeyword_2_0; } 	};data class;blob, data class, long method;t;t;t;blob,  long method;;0;8980;https://github.com/eclipse/xtext-extras/blob/5634c291880cd46fe2f8e9a47e48ef88b85e8bda/org.eclipse.xtext.extras.tests/src-gen/org/eclipse/xtext/enumrules/services/EnumRulesTestLanguageGrammarAccess.java/#L88-L122;2;3714;8980
3763;{"response": "YES, I found bad smells", "bad smells are": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public final class CurrentCreationalContext {     private final ThreadLocal> creationalContext = new ThreadLocal>();      public CreationalContext get() {         return creationalContext.get();     }      public void set(CreationalContext value) {         creationalContext.set(value);     }      public void remove() {         creationalContext.remove();     } };data class;blob, long method;t;t;f;blob,  long method;data class;0;9405;https://github.com/apache/openejb/blob/f10c077ade927d73bdbd9ed4cc28b79f58a1cd66/openejb/container/openejb-core/src/main/java/org/apache/openejb/cdi/CurrentCreationalContext.java/#L24-L38;2;3763;9405
3947;{     "output": "YES I found bad smells",     "bad smells are": [         "Blob"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class Shape {      private String type;      private Map members = Collections.emptyMap();      private String documentation;      private List required;      private List enumValues;      private String payload;      private boolean flattened;      private boolean exception;      private boolean streaming;      private boolean wrapper;      private Member listMember;      private Member mapKeyType;      private Member mapValueType;      @JsonProperty(value = "error")     private ErrorTrait errorTrait;      private long min;      private long max;      private String pattern;      private boolean fault;      private boolean deprecated;      @JsonProperty(value = "eventstream")     private boolean isEventStream;      @JsonProperty(value = "event")     private boolean isEvent;      private String timestampFormat;      private boolean sensitive;      public boolean isFault() {         return fault;     }      public void setFault(boolean fault) {         this.fault = fault;     }      public String getPattern() {         return pattern;     }      public void setPattern(String pattern) {         this.pattern = pattern;     }      public String getType() {         return type;     }      public void setType(String type) {         this.type = type;     }      public Map getMembers() {         return members;     }      public void setMembers(Map members) {         this.members = members;     }      public String getDocumentation() {         return documentation;     }      public void setDocumentation(String documentation) {         this.documentation = documentation;     }      public List getRequired() {         return required;     }      public void setRequired(List required) {         this.required = required;     }      public List getEnumValues() {         return enumValues;     }      @JsonProperty(value = "enum")     public void setEnumValues(List enumValues) {         this.enumValues = enumValues;     }      public String getPayload() {         return payload;     }      public void setPayload(String payload) {         this.payload = payload;     }      public boolean isFlattened() {         return flattened;     }      public void setFlattened(boolean flattened) {         this.flattened = flattened;     }      public boolean isException() {         return exception;     }      public void setException(boolean exception) {         this.exception = exception;     }      public Member getMapKeyType() {         return mapKeyType;     }      @JsonProperty(value = "key")     public void setMapKeyType(Member mapKeyType) {         this.mapKeyType = mapKeyType;     }      public Member getMapValueType() {         return mapValueType;     }      @JsonProperty(value = "value")     public void setMapValueType(Member mapValueType) {         this.mapValueType = mapValueType;     }      public Member getListMember() {         return listMember;     }      @JsonProperty(value = "member")     public void setListMember(Member listMember) {         this.listMember = listMember;     }      public long getMin() {         return min;     }      public void setMin(long min) {         this.min = min;     }      public long getMax() {         return max;     }      public void setMax(long max) {         this.max = max;     }      public boolean isStreaming() {         return streaming;     }      public void setStreaming(boolean streaming) {         this.streaming = streaming;     }      public boolean isWrapper() {         return wrapper;     }      public void setWrapper(boolean wrapper) {         this.wrapper = wrapper;     }      public ErrorTrait getErrorTrait() {         return errorTrait;     }      public void setErrorTrait(ErrorTrait errorTrait) {         this.errorTrait = errorTrait;     }      public boolean isDeprecated() {         return deprecated;     }      public void setDeprecated(boolean deprecated) {         this.deprecated = deprecated;     }      public boolean isEventStream() {         return isEventStream;     }      public void setIsEventStream(boolean eventStream) {         isEventStream = eventStream;     }      public boolean isEvent() {         return isEvent;     }      public void setIsEvent(boolean event) {         isEvent = event;     }      public String getTimestampFormat() {         return timestampFormat;     }      public void setTimestampFormat(String timestampFormat) {         this.timestampFormat = timestampFormat;     }      public boolean isSensitive() {         return sensitive;     }      public void setSensitive(boolean sensitive) {         this.sensitive = sensitive;     } };data class;blob;t;t;f;blob;data class;0;10329;https://github.com/aws/aws-sdk-java-v2/blob/1d5d11e8087c93ab1a3a2d35193052e526fd123c/codegen/src/main/java/software/amazon/awssdk/codegen/model/service/Shape.java/#L23-L261;2;3947;10329
3968;{"response": "YES I found bad smells", "bad smells are": ["Long Method", "Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
	public BindStatus(RequestContext requestContext, String path, boolean htmlEscape) throws IllegalStateException { 		this.requestContext = requestContext; 		this.path = path; 		this.htmlEscape = htmlEscape;  		// determine name of the object and property 		String beanName; 		int dotPos = path.indexOf('.'); 		if (dotPos == -1) { 			// property not set, only the object itself 			beanName = path; 			this.expression = null; 		} 		else { 			beanName = path.substring(0, dotPos); 			this.expression = path.substring(dotPos + 1); 		}  		this.errors = requestContext.getErrors(beanName, false);  		if (this.errors != null) { 			// Usual case: A BindingResult is available as request attribute. 			// Can determine error codes and messages for the given expression. 			// Can use a custom PropertyEditor, as registered by a form controller. 			if (this.expression != null) { 				if ("*".equals(this.expression)) { 					this.objectErrors = this.errors.getAllErrors(); 				} 				else if (this.expression.endsWith("*")) { 					this.objectErrors = this.errors.getFieldErrors(this.expression); 				} 				else { 					this.objectErrors = this.errors.getFieldErrors(this.expression); 					this.value = this.errors.getFieldValue(this.expression); 					this.valueType = this.errors.getFieldType(this.expression); 					if (this.errors instanceof BindingResult) { 						this.bindingResult = (BindingResult) this.errors; 						this.actualValue = this.bindingResult.getRawFieldValue(this.expression); 						this.editor = this.bindingResult.findEditor(this.expression, null); 					} 					else { 						this.actualValue = this.value; 					} 				} 			} 			else { 				this.objectErrors = this.errors.getGlobalErrors(); 			} 			this.errorCodes = initErrorCodes(this.objectErrors); 		}  		else { 			// No BindingResult available as request attribute: 			// Probably forwarded directly to a form view. 			// Let's do the best we can: extract a plain target if appropriate. 			Object target = requestContext.getModelObject(beanName); 			if (target == null) { 				throw new IllegalStateException("Neither BindingResult nor plain target object for bean name '" + 						beanName + "' available as request attribute"); 			} 			if (this.expression != null && !"*".equals(this.expression) && !this.expression.endsWith("*")) { 				BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(target); 				this.value = bw.getPropertyValue(this.expression); 				this.valueType = bw.getPropertyType(this.expression); 				this.actualValue = this.value; 			} 			this.errorCodes = new String[0]; 			this.errorMessages = new String[0]; 		}  		if (htmlEscape && this.value instanceof String) { 			this.value = HtmlUtils.htmlEscape((String) this.value); 		} 	};long method;long method, blob;t;t;t; blob;;0;10409;https://github.com/spring-projects/spring-framework/blob/3a0f309e2c9fdbbf7fb2d348be861528177f8555/spring-webmvc/src/main/java/org/springframework/web/servlet/support/BindStatus.java/#L96-L169;2;3968;10409
3975;{"response": "YES I found bad smells", "detected_bad_smells": ["1. Blob"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@Singleton public class CheProductInfoDataProvider extends ProductInfoDataProviderImpl {    private final LocalizationConstant locale;   private final Resources resources;    @Inject   public CheProductInfoDataProvider(LocalizationConstant locale, Resources resources) {     this.locale = locale;     this.resources = resources;   }    @Override   public String getName() {     return locale.getProductName();   }    @Override   public String getSupportLink() {     return locale.getSupportLink();   }    @Override   public String getDocumentTitle() {     return locale.cheTabTitle();   }    @Override   public String getDocumentTitle(String workspaceName) {     return locale.cheTabTitle(workspaceName);   }    @Override   public SVGResource getLogo() {     return resources.logo();   }    @Override   public SVGResource getWaterMarkLogo() {     return resources.waterMarkLogo();   }    @Override   public String getSupportTitle() {     return locale.supportTitle();   } };data class;1. blob;t;t;f;1. blob;data class;0;10430;https://github.com/eclipse/che/blob/c5498c2ac562cd8a2fc79a6bb0446d291f05a201/plugins/plugin-product-info/src/main/java/org/eclipse/che/plugin/product/info/client/CheProductInfoDataProvider.java/#L26-L72;2;3975;10430
3986;   {    "answer": "YES I found bad smells",   "bad smells are": [     "Long Method",     "Blob"   ]  };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  @Override   public BatchResponsePart executeChangeSet(final BatchHandler handler, final List requests)       throws ODataException {     List responses = new ArrayList();     try {       oDataJPAContext.getODataJPATransaction().begin();        for (ODataRequest request : requests) {         oDataJPAContext.setODataContext(getContext());         ODataResponse response = handler.handleRequest(request);         if (response.getStatus().getStatusCode() >= HttpStatusCodes.BAD_REQUEST.getStatusCode()) {           // Rollback           oDataJPAContext.getODataJPATransaction().rollback();           List errorResponses = new ArrayList(1);           errorResponses.add(response);           return BatchResponsePart.responses(errorResponses).changeSet(false).build();         }         responses.add(response);       }       oDataJPAContext.getODataJPATransaction().commit();        return BatchResponsePart.responses(responses).changeSet(true).build();     } catch (Exception e) {       throw new ODataException("Error on processing request content:" + e.getMessage(), e);     } finally {       close(true);     }   };feature envy;long method, blob;t;t;f;long method,  blob;feature envy;0;10501;https://github.com/apache/olingo-odata2/blob/c5e9fdf569b5e2e50f5670c91013db8f9ae1d950/odata2-jpa-processor/jpa-api/src/main/java/org/apache/olingo/odata2/jpa/processor/api/ODataJPADefaultProcessor.java/#L270-L297;2;3986;10501
3987;   {     "response": "YES I found bad smells",     "bad smells are": ["Long Method", "Blob"]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  @Override   public BatchResponsePart executeChangeSet(final BatchHandler handler, final List requests)       throws ODataException {     List responses = new ArrayList();     try {       oDataJPAContext.getODataJPATransaction().begin();        for (ODataRequest request : requests) {         oDataJPAContext.setODataContext(getContext());         ODataResponse response = handler.handleRequest(request);         if (response.getStatus().getStatusCode() >= HttpStatusCodes.BAD_REQUEST.getStatusCode()) {           // Rollback           oDataJPAContext.getODataJPATransaction().rollback();           List errorResponses = new ArrayList(1);           errorResponses.add(response);           return BatchResponsePart.responses(errorResponses).changeSet(false).build();         }         responses.add(response);       }       oDataJPAContext.getODataJPATransaction().commit();        return BatchResponsePart.responses(responses).changeSet(true).build();     } catch (Exception e) {       throw new ODataException("Error on processing request content:" + e.getMessage(), e);     } finally {       close(true);     }   };long method;long method, blob;t;t;t; blob;;0;10502;https://github.com/apache/olingo-odata2/blob/c5e9fdf569b5e2e50f5670c91013db8f9ae1d950/odata2-jpa-processor/jpa-api/src/main/java/org/apache/olingo/odata2/jpa/processor/api/ODataJPADefaultProcessor.java/#L270-L297;2;3987;10502
4001;    {       "output": "YES, I found bad smells",       "detected_bad_smells": [          {             "1": "Blob"          },          {             "2": "Long Method"          }       ]    };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    private static boolean resolveGenericRef(GenericRef ref, Class clazz, Type type)     {         if (type instanceof Class)         {             if (type == ref.ifaceClass)             {                 // is this a straight ref or a TypeVariable?                 // debug("Found ref (as class): %s",toShortName(type));                 ref.setGenericFromType(type,0);                 return true;             }             else             {                 // Keep digging                 return resolveGenericRef(ref,type);             }         }          if (type instanceof ParameterizedType)         {             ParameterizedType ptype = (ParameterizedType)type;             Type rawType = ptype.getRawType();             if (rawType == ref.ifaceClass)             {                 // debug("Found ref on [%s] as ParameterizedType [%s]",toShortName(clazz),toShortName(ptype));                 // Always get the raw type parameter, let unwrap() solve for what it is                 ref.setGenericFromType(ptype.getActualTypeArguments()[0],0);                 return true;             }             else             {                 // Keep digging                 return resolveGenericRef(ref,rawType);             }         }         return false;     };feature envy;1: blob, 2: long method;t;t;f;1: blob,  2: long method;feature envy;0;10574;https://github.com/eclipse/jetty.project/blob/65528f76c5ef6ddca11385f9721c8f0bc5f2eed7/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/util/ReflectUtils.java/#L189-L225;2;4001;10574
4031;   {     "response": "YES I found bad smells",     "the bad smells are": [       "Blob",       "Data Class"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@Entity public class Customer388 {  	@Id @GeneratedValue(strategy = GenerationType.AUTO) private long id; 	private String firstName; 	private String lastName;  	protected Customer388() {}  	public Customer388(String firstName, String lastName) { 		this.firstName = firstName; 		this.lastName = lastName; 	}  	@Override 	public String toString() { 		return String.format("Customer388[id=%d, firstName='%s', lastName='%s']", id, firstName, lastName); 	}  };data class;blob, data class;t;t;t;blob;;0;10668;https://github.com/spring-projects/spring-data-examples/blob/ccae97890f85a3eaf8f4e05a1a07696e2b1e78a4/jpa/deferred/src/main/java/example/model/Customer388.java/#L8-L27;2;4031;10668
4109;{"message": "YES I found bad smells", "bad smells are": ["Blob", "Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
			 			int count = readUnsignedShort(); 			requires = new Require[count]; 			for (int i = 0; i < count; i++) { 				requires[i] = new Require(readUnsignedShort(), readUnsignedShort(), readUnsignedShort()); 			} 			 			count = readUnsignedShort(); 			exports = new Export[count]; 			for (int i = 0; i < count; i++) { 				int index = readUnsignedShort(); 				int flags = readUnsignedShort(); 				int toCount = readUnsignedShort(); 				int[] to = new int[toCount]; 				for (int j = 0; j < toCount; j++) { 					to[j] = readUnsignedShort(); 				} 				exports[i] = new Export(index, flags, to); 			} 			 			count = readUnsignedShort();;data class;blob, long method;t;t;f;blob,  long method;data class;0;10822;https://github.com/eclipse/org.aspectj/blob/370f291c359cd159c5f3f0abd6e9e53e81234a07/bcel-builder/src/main/java/org/aspectj/apache/bcel/classfile/Module.java/#L335-L355;2;4109;10822
4138; {   "message": "YES I found bad smells",   "detected_bad_smells": [     "Blob",     "Long Method"   ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
	public class GroupMultiplicitiesElements extends AbstractParserRuleElementFinder { 		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.validation.ConcreteSyntaxValidationTestLanguage.GroupMultiplicities"); 		private final Group cGroup = (Group)rule.eContents().get(1); 		private final Keyword cNumberSignDigitFourKeyword_0 = (Keyword)cGroup.eContents().get(0); 		private final Assignment cVal1Assignment_1 = (Assignment)cGroup.eContents().get(1); 		private final RuleCall cVal1IDTerminalRuleCall_1_0 = (RuleCall)cVal1Assignment_1.eContents().get(0); 		private final Keyword cKw1Keyword_2 = (Keyword)cGroup.eContents().get(2); 		private final Group cGroup_3 = (Group)cGroup.eContents().get(3); 		private final Assignment cVal2Assignment_3_0 = (Assignment)cGroup_3.eContents().get(0); 		private final RuleCall cVal2IDTerminalRuleCall_3_0_0 = (RuleCall)cVal2Assignment_3_0.eContents().get(0); 		private final Assignment cVal3Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1); 		private final RuleCall cVal3IDTerminalRuleCall_3_1_0 = (RuleCall)cVal3Assignment_3_1.eContents().get(0); 		private final Keyword cKw2Keyword_4 = (Keyword)cGroup.eContents().get(4); 		private final Group cGroup_5 = (Group)cGroup.eContents().get(5); 		private final Assignment cVal4Assignment_5_0 = (Assignment)cGroup_5.eContents().get(0); 		private final RuleCall cVal4IDTerminalRuleCall_5_0_0 = (RuleCall)cVal4Assignment_5_0.eContents().get(0); 		private final Assignment cVal5Assignment_5_1 = (Assignment)cGroup_5.eContents().get(1); 		private final RuleCall cVal5IDTerminalRuleCall_5_1_0 = (RuleCall)cVal5Assignment_5_1.eContents().get(0); 		private final Keyword cKw3Keyword_6 = (Keyword)cGroup.eContents().get(6); 		private final Group cGroup_7 = (Group)cGroup.eContents().get(7); 		private final Assignment cVal6Assignment_7_0 = (Assignment)cGroup_7.eContents().get(0); 		private final RuleCall cVal6IDTerminalRuleCall_7_0_0 = (RuleCall)cVal6Assignment_7_0.eContents().get(0); 		private final Assignment cVal7Assignment_7_1 = (Assignment)cGroup_7.eContents().get(1); 		private final RuleCall cVal7IDTerminalRuleCall_7_1_0 = (RuleCall)cVal7Assignment_7_1.eContents().get(0); 		 		//GroupMultiplicities: 		//	"#4" val1=ID "kw1" (val2=ID val3=ID)? "kw2" (val4+=ID val5+=ID)+ "kw3" (val6+=ID val7+=ID)*; 		@Override public ParserRule getRule() { return rule; } 		 		//"#4" val1=ID "kw1" (val2=ID val3=ID)? "kw2" (val4+=ID val5+=ID)+ "kw3" (val6+=ID val7+=ID)* 		public Group getGroup() { return cGroup; } 		 		//"#4" 		public Keyword getNumberSignDigitFourKeyword_0() { return cNumberSignDigitFourKeyword_0; } 		 		//val1=ID 		public Assignment getVal1Assignment_1() { return cVal1Assignment_1; } 		 		//ID 		public RuleCall getVal1IDTerminalRuleCall_1_0() { return cVal1IDTerminalRuleCall_1_0; } 		 		//"kw1" 		public Keyword getKw1Keyword_2() { return cKw1Keyword_2; } 		 		//(val2=ID val3=ID)? 		public Group getGroup_3() { return cGroup_3; } 		 		//val2=ID 		public Assignment getVal2Assignment_3_0() { return cVal2Assignment_3_0; } 		 		//ID 		public RuleCall getVal2IDTerminalRuleCall_3_0_0() { return cVal2IDTerminalRuleCall_3_0_0; } 		 		//val3=ID 		public Assignment getVal3Assignment_3_1() { return cVal3Assignment_3_1; } 		 		//ID 		public RuleCall getVal3IDTerminalRuleCall_3_1_0() { return cVal3IDTerminalRuleCall_3_1_0; } 		 		//"kw2" 		public Keyword getKw2Keyword_4() { return cKw2Keyword_4; } 		 		//(val4+=ID val5+=ID)+ 		public Group getGroup_5() { return cGroup_5; } 		 		//val4+=ID 		public Assignment getVal4Assignment_5_0() { return cVal4Assignment_5_0; } 		 		//ID 		public RuleCall getVal4IDTerminalRuleCall_5_0_0() { return cVal4IDTerminalRuleCall_5_0_0; } 		 		//val5+=ID 		public Assignment getVal5Assignment_5_1() { return cVal5Assignment_5_1; } 		 		//ID 		public RuleCall getVal5IDTerminalRuleCall_5_1_0() { return cVal5IDTerminalRuleCall_5_1_0; } 		 		//"kw3" 		public Keyword getKw3Keyword_6() { return cKw3Keyword_6; } 		 		//(val6+=ID val7+=ID)* 		public Group getGroup_7() { return cGroup_7; } 		 		//val6+=ID 		public Assignment getVal6Assignment_7_0() { return cVal6Assignment_7_0; } 		 		//ID 		public RuleCall getVal6IDTerminalRuleCall_7_0_0() { return cVal6IDTerminalRuleCall_7_0_0; } 		 		//val7+=ID 		public Assignment getVal7Assignment_7_1() { return cVal7Assignment_7_1; } 		 		//ID 		public RuleCall getVal7IDTerminalRuleCall_7_1_0() { return cVal7IDTerminalRuleCall_7_1_0; } 	};data class;blob, long method;t;t;f;blob,  long method;data class;0;10899;https://github.com/eclipse/xtext-core/blob/e04964e4c2a3e0338c0079bd8333688835e77c31/org.eclipse.xtext.tests/src-gen/org/eclipse/xtext/validation/services/ConcreteSyntaxValidationTestLanguageGrammarAccess.java/#L414-L508;2;4138;10899
4314; {     "output": "YES I found bad smells",     "detected bad smells": [         "1. Blob",         "2. Data Class"     ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
public class LoopedModelImpl extends MinimalEObjectImpl.Container implements LoopedModel {   /**    * The cached value of the '{@link #getVisibility() Visibility}' attribute list.    *     *     * @see #getVisibility()    * @generated    * @ordered    */   protected EList visibility;    /**    * The cached value of the '{@link #getStatic() Static}' attribute list.    *     *     * @see #getStatic()    * @generated    * @ordered    */   protected EList static_;    /**    * The cached value of the '{@link #getSynchronized() Synchronized}' attribute list.    *     *     * @see #getSynchronized()    * @generated    * @ordered    */   protected EList synchronized_;    /**    * The cached value of the '{@link #getAbstract() Abstract}' attribute list.    *     *     * @see #getAbstract()    * @generated    * @ordered    */   protected EList abstract_;    /**    * The cached value of the '{@link #getFinal() Final}' attribute list.    *     *     * @see #getFinal()    * @generated    * @ordered    */   protected EList final_;    /**    * The default value of the '{@link #getName() Name}' attribute.    *     *     * @see #getName()    * @generated    * @ordered    */   protected static final String NAME_EDEFAULT = null;    /**    * The cached value of the '{@link #getName() Name}' attribute.    *     *     * @see #getName()    * @generated    * @ordered    */   protected String name = NAME_EDEFAULT;    /**    *     *     * @generated    */   protected LoopedModelImpl()   {     super();   }    /**    *     *     * @generated    */   @Override   protected EClass eStaticClass()   {     return UnorderedGroupsTestPackage.Literals.LOOPED_MODEL;   }    /**    *     *     * @generated    */   public EList getVisibility()   {     if (visibility == null)     {       visibility = new EDataTypeEList(String.class, this, UnorderedGroupsTestPackage.LOOPED_MODEL__VISIBILITY);     }     return visibility;   }    /**    *     *     * @generated    */   public EList getStatic()   {     if (static_ == null)     {       static_ = new EDataTypeEList(String.class, this, UnorderedGroupsTestPackage.LOOPED_MODEL__STATIC);     }     return static_;   }    /**    *     *     * @generated    */   public EList getSynchronized()   {     if (synchronized_ == null)     {       synchronized_ = new EDataTypeEList(String.class, this, UnorderedGroupsTestPackage.LOOPED_MODEL__SYNCHRONIZED);     }     return synchronized_;   }    /**    *     *     * @generated    */   public EList getAbstract()   {     if (abstract_ == null)     {       abstract_ = new EDataTypeEList(String.class, this, UnorderedGroupsTestPackage.LOOPED_MODEL__ABSTRACT);     }     return abstract_;   }    /**    *     *     * @generated    */   public EList getFinal()   {     if (final_ == null)     {       final_ = new EDataTypeEList(String.class, this, UnorderedGroupsTestPackage.LOOPED_MODEL__FINAL);     }     return final_;   }    /**    *     *     * @generated    */   public String getName()   {     return name;   }    /**    *     *     * @generated    */   public void setName(String newName)   {     String oldName = name;     name = newName;     if (eNotificationRequired())       eNotify(new ENotificationImpl(this, Notification.SET, UnorderedGroupsTestPackage.LOOPED_MODEL__NAME, oldName, name));   }    /**    *     *     * @generated    */   @Override   public Object eGet(int featureID, boolean resolve, boolean coreType)   {     switch (featureID)     {       case UnorderedGroupsTestPackage.LOOPED_MODEL__VISIBILITY:         return getVisibility();       case UnorderedGroupsTestPackage.LOOPED_MODEL__STATIC:         return getStatic();       case UnorderedGroupsTestPackage.LOOPED_MODEL__SYNCHRONIZED:         return getSynchronized();       case UnorderedGroupsTestPackage.LOOPED_MODEL__ABSTRACT:         return getAbstract();       case UnorderedGroupsTestPackage.LOOPED_MODEL__FINAL:         return getFinal();       case UnorderedGroupsTestPackage.LOOPED_MODEL__NAME:         return getName();     }     return super.eGet(featureID, resolve, coreType);   }    /**    *     *     * @generated    */   @SuppressWarnings("unchecked")   @Override   public void eSet(int featureID, Object newValue)   {     switch (featureID)     {       case UnorderedGroupsTestPackage.LOOPED_MODEL__VISIBILITY:         getVisibility().clear();         getVisibility().addAll((Collection)newValue);         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__STATIC:         getStatic().clear();         getStatic().addAll((Collection)newValue);         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__SYNCHRONIZED:         getSynchronized().clear();         getSynchronized().addAll((Collection)newValue);         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__ABSTRACT:         getAbstract().clear();         getAbstract().addAll((Collection)newValue);         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__FINAL:         getFinal().clear();         getFinal().addAll((Collection)newValue);         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__NAME:         setName((String)newValue);         return;     }     super.eSet(featureID, newValue);   }    /**    *     *     * @generated    */   @Override   public void eUnset(int featureID)   {     switch (featureID)     {       case UnorderedGroupsTestPackage.LOOPED_MODEL__VISIBILITY:         getVisibility().clear();         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__STATIC:         getStatic().clear();         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__SYNCHRONIZED:         getSynchronized().clear();         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__ABSTRACT:         getAbstract().clear();         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__FINAL:         getFinal().clear();         return;       case UnorderedGroupsTestPackage.LOOPED_MODEL__NAME:         setName(NAME_EDEFAULT);         return;     }     super.eUnset(featureID);   }    /**    *     *     * @generated    */   @Override   public boolean eIsSet(int featureID)   {     switch (featureID)     {       case UnorderedGroupsTestPackage.LOOPED_MODEL__VISIBILITY:         return visibility != null && !visibility.isEmpty();       case UnorderedGroupsTestPackage.LOOPED_MODEL__STATIC:         return static_ != null && !static_.isEmpty();       case UnorderedGroupsTestPackage.LOOPED_MODEL__SYNCHRONIZED:         return synchronized_ != null && !synchronized_.isEmpty();       case UnorderedGroupsTestPackage.LOOPED_MODEL__ABSTRACT:         return abstract_ != null && !abstract_.isEmpty();       case UnorderedGroupsTestPackage.LOOPED_MODEL__FINAL:         return final_ != null && !final_.isEmpty();       case UnorderedGroupsTestPackage.LOOPED_MODEL__NAME:         return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);     }     return super.eIsSet(featureID);   }    /**    *     *     * @generated    */   @Override   public String toString()   {     if (eIsProxy()) return super.toString();      StringBuffer result = new StringBuffer(super.toString());     result.append(" (visibility: ");     result.append(visibility);     result.append(", static: ");     result.append(static_);     result.append(", synchronized: ");     result.append(synchronized_);     result.append(", abstract: ");     result.append(abstract_);     result.append(", final: ");     result.append(final_);     result.append(", name: ");     result.append(name);     result.append(')');     return result.toString();   }  } //LoopedModelImpl;data class;1. blob, 2. data class;t;t;t;1. blob;;0;11368;https://github.com/eclipse/xtext-eclipse/blob/0c7546b6aaf3644a77fc68eef9f3da368cbbeabd/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/unorderedGroupsTest/impl/LoopedModelImpl.java/#L40-L375;2;4314;11368
4604;     {         "message": "YES I found bad smells",         "bad smells are": [             "Blob",             "Data Class"         ]     };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@XmlRootElement(name = "pagedResult") @XmlType public class PagedResult implements Serializable {      private static final long serialVersionUID = 3472875885259250934L;      private URI prev;      private URI next;      private final List result = new ArrayList<>();      private int page;      private int size;      private int totalCount;      public URI getPrev() {         return prev;     }      public void setPrev(final URI prev) {         this.prev = prev;     }      public URI getNext() {         return next;     }      public void setNext(final URI next) {         this.next = next;     }      @XmlElementWrapper(name = "result")     @XmlElement(name = "item")     @JsonProperty("result")     @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = "@class")     public List getResult() {         return result;     }      public int getPage() {         return page;     }      public void setPage(final int page) {         this.page = page;     }      public int getSize() {         return size;     }      public void setSize(final int size) {         this.size = size;     }      public int getTotalCount() {         return totalCount;     }      public void setTotalCount(final int totalCount) {         this.totalCount = totalCount;     }      @Override     public int hashCode() {         return new HashCodeBuilder().                 append(prev).                 append(next).                 append(result).                 append(page).                 append(size).                 append(totalCount).                 build();     }      @Override     public boolean equals(final Object obj) {         if (this == obj) {             return true;         }         if (obj == null) {             return false;         }         if (getClass() != obj.getClass()) {             return false;         }         @SuppressWarnings("unchecked")         final PagedResult other = (PagedResult) obj;         return new EqualsBuilder().                 append(prev, other.prev).                 append(next, other.next).                 append(result, other.result).                 append(page, other.page).                 append(size, other.size).                 append(totalCount, other.totalCount).                 build();     } };data class;blob, data class;t;t;t;blob;;0;12251;https://github.com/apache/syncope/blob/114c412afbfba24ffb4fbc804e5308a823a16a78/common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/PagedResult.java/#L35-L135;2;4604;12251
5084;{"message":"YES I found bad smells","detected_bad_smells":["Blob","Data Class","Long Method"]};The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
@XmlAccessorType(XmlAccessType.FIELD) @XmlType(name = "ProviderCreditReversalDetails", propOrder = {     "amazonProviderCreditReversalId",     "sellerId",     "providerSellerId",     "creditReversalReferenceId",     "creditReversalAmount",     "creationTimestamp",     "creditReversalStatus",     "creditReversalNote" }) public class ProviderCreditReversalDetails {      @XmlElement(name = "AmazonProviderCreditReversalId", required = true)     protected String amazonProviderCreditReversalId;     @XmlElement(name = "SellerId", required = true)     protected String sellerId;     @XmlElement(name = "ProviderSellerId", required = true)     protected String providerSellerId;     @XmlElement(name = "CreditReversalReferenceId", required = true)     protected String creditReversalReferenceId;     @XmlElement(name = "CreditReversalAmount", required = true)     protected Price creditReversalAmount;     @XmlElement(name = "CreationTimestamp", required = true)     @XmlSchemaType(name = "dateTime")     protected XMLGregorianCalendar creationTimestamp;     @XmlElement(name = "CreditReversalStatus", required = true)     protected Status creditReversalStatus;     @XmlElement(name = "CreditReversalNote")     protected String creditReversalNote;      public ProviderCreditReversalDetails() {         super();     }      /**      * Returns the amazonProviderCreditReversalId from notification      *       * @return Returns the amazonProviderCreditReversalId from notification      */     public String getAmazonProviderCreditReversalId() {         return amazonProviderCreditReversalId;     }      /**      * Returns the sellerId from notification      *       * @return Returns the sellerId from notification      */     public String getSellerId() {         return sellerId;     }      /**      * Returns the providerSellerId from notification      *       * @return Returns the providerSellerId from notification      */     public String getProviderSellerId() {         return providerSellerId;     }      /**      * Returns the creditReversalReferenceId from notification      *       * @return Returns the creditReversalReferenceId from notification      */     public String getCreditReversalReferenceId() {         return creditReversalReferenceId;     }       /**      * Returns the creditReversalAmount from notification       *       * @return Returns the creditReversalAmount from notification       */     public Price getCreditReversalAmount() {         return creditReversalAmount;     }      /**      * Returns the creationTimestamp from notification      *       * @return Returns the creationTimestamp from notification      */     public XMLGregorianCalendar getCreationTimestamp() {         return creationTimestamp;     }      /**      * Returns the creditReversalStatus from notification      *       * @return Returns the creditReversalStatus from notification      */     public Status getCreditReversalStatus() {         return creditReversalStatus;     }      /**      * Returns the creditReversalNote from notification      *       * @return Returns the creditReversalNote from notification      */     public String getCreditReversalNote() {         return creditReversalNote;     }      /**      * String representation of providerCreditReversalNotification      */     @Override     public String toString() {         return "ProviderCreditReversalDetails{" + "amazonProviderCreditReversalId=" + amazonProviderCreditReversalId                  + ", sellerId=" + sellerId + ", providerId=" + providerSellerId + ", creditReversalReferenceId="                  + creditReversalReferenceId + ", creditReversalAmount=" + creditReversalAmount + ", creationTimestamp="                  + creationTimestamp + ", creditReversalStatus=" + creditReversalStatus + ", creditReversalNote="                  + creditReversalNote + '}';     }  };data class;blob, data class, long method;t;t;t;blob,  long method;;0;14204;https://github.com/amzn/amazon-pay-sdk-java/blob/5a3547d00c796aab8f0c8ac12e0310f7a5c4678a/src/com/amazon/pay/response/ipn/model/ProviderCreditReversalDetails.java/#L25-L145;2;5084;14204
5395;{   "answer": "YES I found bad smells",   "detected_smells": [     "Blob",     "Long Method"   ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
None;data class;blob, long method;t;t;f;blob,  long method;data class;0;15164;https://github.com/apache/airavata/blob/391843a00eefa7b6213e845f2f044b4e042894d5/modules/registry/registry-server/registry-api-stubs/src/main/java/org/apache/airavata/registry/api/RegistryService.java/#L72161-L72513;2;5395;15164
5401;{   "answer": "YES I found bad smells",   "detected_bad_smells": [     "Blob",     "Long Method"   ] };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
None;long method;blob, long method;t;t;t;blob;;0;15176;https://github.com/apache/accumulo/blob/f896c98c2356a52dfa2235d2cc02ae556ab17909/proxy/src/main/java/org/apache/accumulo/proxy/thrift/AccumuloProxy.java/#L126206-L126230;2;5401;15176
5407;   {     "message": "YES I found bad smells",     "bad smells are": [       "Blob",       "Long Method"     ]   };The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    public void read(org.apache.thrift.protocol.TProtocol iprot, WMTrigger struct) throws org.apache.thrift.TException {       org.apache.thrift.protocol.TField schemeField;       iprot.readStructBegin();       while (true)       {         schemeField = iprot.readFieldBegin();         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {            break;         }         switch (schemeField.id) {           case 1: // RESOURCE_PLAN_NAME             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {               struct.resourcePlanName = iprot.readString();               struct.setResourcePlanNameIsSet(true);             } else {                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);             }             break;           case 2: // TRIGGER_NAME             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {               struct.triggerName = iprot.readString();               struct.setTriggerNameIsSet(true);             } else {                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);             }             break;           case 3: // TRIGGER_EXPRESSION             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {               struct.triggerExpression = iprot.readString();               struct.setTriggerExpressionIsSet(true);             } else {                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);             }             break;           case 4: // ACTION_EXPRESSION             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {               struct.actionExpression = iprot.readString();               struct.setActionExpressionIsSet(true);             } else {                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);             }             break;           case 5: // IS_IN_UNMANAGED             if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {               struct.isInUnmanaged = iprot.readBool();               struct.setIsInUnmanagedIsSet(true);             } else {                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);             }             break;           case 6: // NS             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {               struct.ns = iprot.readString();               struct.setNsIsSet(true);             } else {                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);             }             break;           default:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);         }         iprot.readFieldEnd();       }       iprot.readStructEnd();       struct.validate();     };long method;blob, long method;t;t;t;blob;;0;15185;https://github.com/apache/hive/blob/2fa22bf360898dc8fd1408bfcc96e1c6aeaf9a53/standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/WMTrigger.java/#L733-L798;2;5407;15185
5516;   YES I found bad smells  the bad smells are: 1. Blob 2. Long method;The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    @SuppressWarnings("try")     private void doRun(Map entryPoints, Method mainEntryPoint,                     JavaMainSupport javaMainSupport, String imageName, AbstractBootImage.NativeImageKind k,                     SubstitutionProcessor harnessSubstitutions,                     ForkJoinPool compilationExecutor, ForkJoinPool analysisExecutor) {         List hostedEntryPoints = new ArrayList<>();          OptionValues options = HostedOptionValues.singleton();         SnippetReflectionProvider originalSnippetReflection = GraalAccess.getOriginalSnippetReflection();         try (DebugContext debug = DebugContext.create(options, new GraalDebugHandlersFactory(originalSnippetReflection))) {             setupNativeImage(imageName, options, entryPoints, javaMainSupport, harnessSubstitutions, analysisExecutor, originalSnippetReflection, debug);              boolean returnAfterAnalysis = runPointsToAnalysis(imageName, options, debug);             if (returnAfterAnalysis) {                 return;             }              NativeImageHeap heap;             HostedMethod mainEntryPointHostedStub;             HostedMetaAccess hMetaAccess;             SharedRuntimeConfigurationBuilder runtime;             try (StopTimer t = new Timer(imageName, "universe").start()) {                 hUniverse = new HostedUniverse(bigbang);                 hMetaAccess = new HostedMetaAccess(hUniverse, bigbang.getMetaAccess());                  new UniverseBuilder(aUniverse, bigbang.getMetaAccess(), hUniverse, hMetaAccess, HostedConfiguration.instance().createStaticAnalysisResultsBuilder(bigbang, hUniverse),                                 bigbang.getUnsupportedFeatures()).build(debug);                  runtime = new HostedRuntimeConfigurationBuilder(options, bigbang.getHostVM(), hUniverse, hMetaAccess, bigbang.getProviders()).build();                 registerGraphBuilderPlugins(featureHandler, runtime.getRuntimeConfig(), (HostedProviders) runtime.getRuntimeConfig().getProviders(), bigbang.getMetaAccess(), aUniverse,                                 hMetaAccess, hUniverse,                                 nativeLibraries, loader, false, true, bigbang.getAnnotationSubstitutionProcessor(), new SubstrateClassInitializationPlugin((SVMHost) aUniverse.hostVM()),                                 bigbang.getHostVM().getClassInitializationSupport());                  if (NativeImageOptions.PrintUniverse.getValue()) {                     printTypes();                 }                  /* Find the entry point methods in the hosted world. */                 for (AnalysisMethod m : aUniverse.getMethods()) {                     if (m.isEntryPoint()) {                         HostedMethod found = hUniverse.lookup(m);                         assert found != null;                         hostedEntryPoints.add(found);                     }                 }                 /* Find main entry point */                 if (mainEntryPoint != null) {                     AnalysisMethod analysisStub = CEntryPointCallStubSupport.singleton().getStubForMethod(mainEntryPoint);                     mainEntryPointHostedStub = (HostedMethod) hMetaAccess.getUniverse().lookup(analysisStub);                     assert hostedEntryPoints.contains(mainEntryPointHostedStub);                 } else {                     mainEntryPointHostedStub = null;                 }                 if (hostedEntryPoints.size() == 0) {                     throw UserError.abort("Warning: no entry points found, i.e., no method annotated with @" + CEntryPoint.class.getSimpleName());                 }                  heap = new NativeImageHeap(aUniverse, hUniverse, hMetaAccess);                  BeforeCompilationAccessImpl config = new BeforeCompilationAccessImpl(featureHandler, loader, aUniverse, hUniverse, hMetaAccess, heap, debug);                 featureHandler.forEachFeature(feature -> feature.beforeCompilation(config));                  bigbang.getUnsupportedFeatures().report(bigbang);             } catch (UnsupportedFeatureException ufe) {                 throw UserError.abort(ufe.getMessage());             }              recordMethodsWithStackValues();             recordRestrictHeapAccessCallees(aUniverse.getMethods());              /*              * After this point, all TypeFlow (and therefore also TypeState) objects are unreachable              * and can be garbage collected. This is important to keep the overall memory footprint              * low. However, this also means we no longer have complete call chain information. Only              * the summarized information stored in the StaticAnalysisResult objects is available              * after this point.              */             bigbang.cleanupAfterAnalysis();              NativeImageCodeCache codeCache;             CompileQueue compileQueue;             try (StopTimer t = new Timer(imageName, "compile").start()) {                 compileQueue = HostedConfiguration.instance().createCompileQueue(debug, featureHandler, hUniverse, runtime, DeoptTester.enabled(), bigbang.getProviders().getSnippetReflection(),                                 compilationExecutor);                 compileQueue.finish(debug);                  /* release memory taken by graphs for the image writing */                 hUniverse.getMethods().forEach(HostedMethod::clear);                  codeCache = NativeImageCodeCacheFactory.get().newCodeCache(compileQueue, heap);                 codeCache.layoutConstants();                 codeCache.layoutMethods(debug, imageName);                  AfterCompilationAccessImpl config = new AfterCompilationAccessImpl(featureHandler, loader, aUniverse, hUniverse, hMetaAccess, heap, debug);                 featureHandler.forEachFeature(feature -> feature.afterCompilation(config));             }              try (Indent indent = debug.logAndIndent("create native image")) {                 try (DebugContext.Scope buildScope = debug.scope("CreateBootImage")) {                     try (StopTimer t = new Timer(imageName, "image").start()) {                          // Start building the model of the native image heap.                         heap.addInitialObjects();                         // Then build the model of the code cache, which can                         // add objects to the native image heap.                         codeCache.addConstantsToHeap();                         // Finish building the model of the native image heap.                         heap.addTrailingObjects();                          AfterHeapLayoutAccessImpl config = new AfterHeapLayoutAccessImpl(featureHandler, loader, hMetaAccess, debug);                         featureHandler.forEachFeature(feature -> feature.afterHeapLayout(config));                          this.image = AbstractBootImage.create(k, hUniverse, hMetaAccess, nativeLibraries, heap, codeCache, hostedEntryPoints, mainEntryPointHostedStub, loader.getClassLoader());                         image.build(debug);                         if (NativeImageOptions.PrintUniverse.getValue()) {                             /*                              * This debug output must be printed _after_ and not _during_ image                              * building, because it adds some PrintStream objects to static fields,                              * which disrupts the heap.                              */                             codeCache.printCompilationResults();                         }                     }                 }             }              BeforeImageWriteAccessImpl beforeConfig = new BeforeImageWriteAccessImpl(featureHandler, loader, imageName, image,                             runtime.getRuntimeConfig(), aUniverse, hUniverse, optionProvider, hMetaAccess, debug);             featureHandler.forEachFeature(feature -> feature.beforeImageWrite(beforeConfig));              try (StopTimer t = new Timer(imageName, "write").start()) {                 /*                  * This will write the debug info too -- i.e. we may be writing more than one file,                  * if the debug info is in a separate file. We need to push writing the file to the                  * image implementation, because whether the debug info and image share a file or                  * not is an implementation detail of the image.                  */                 Path tmpDir = tempDirectory();                 Path imagePath = image.write(debug, generatedFiles(HostedOptionValues.singleton()), tmpDir, imageName, beforeConfig).getOutputFile();                  AfterImageWriteAccessImpl afterConfig = new AfterImageWriteAccessImpl(featureHandler, loader, hUniverse, imagePath, tmpDir, image.getBootImageKind(), debug);                 featureHandler.forEachFeature(feature -> feature.afterImageWrite(afterConfig));             }         }     };feature envy; Blob2 Long method;t;f;f;. Blob2. Long method;feature envy;0;4261;https://github.com/oracle/graal/blob/4deb681aaaa79c248115037fc8e399c9876619fd/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/NativeImageGenerator.java/#L487-L632;2;5516;4261
5526; YES I found bad smells the bad smells are: 1. Blob 2. Long method;The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  private void asJson(OutputStream out, Map data)       throws HiveException       {     try {       new ObjectMapper().writeValue(out, data);     } catch (IOException e) {       throw new HiveException("Unable to convert to json", e);     }       };feature envy; Blob2 Long method;t;f;f;. Blob2. Long method;feature envy;0;5595;https://github.com/apache/hive/blob/2fa22bf360898dc8fd1408bfcc96e1c6aeaf9a53/ql/src/java/org/apache/hadoop/hive/ql/metadata/formatting/JsonMetaDataFormatter.java/#L76-L84;2;5526;5595
5571; YES I found bad smells  the bad smells are: Blob, Data Class, Feature Envy, Long Method;The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
  @Override   public void configureInputJobProperties(TableDesc tableDesc,                       Map jobProperties) {      try {       Map tableProperties = tableDesc.getJobProperties();        String jobInfoProperty = tableProperties.get(HCatConstants.HCAT_KEY_JOB_INFO);       if (jobInfoProperty != null) {          LinkedList inputJobInfos = (LinkedList) HCatUtil.deserialize(                 jobInfoProperty);         if (inputJobInfos == null || inputJobInfos.isEmpty()) {           throw new IOException("No InputJobInfo was set in job config");         }         InputJobInfo inputJobInfo = inputJobInfos.getLast();          HCatTableInfo tableInfo = inputJobInfo.getTableInfo();         HCatSchema dataColumns = tableInfo.getDataColumns();         List dataFields = dataColumns.getFields();         StringBuilder columnNamesSb = new StringBuilder();         StringBuilder typeNamesSb = new StringBuilder();         for (HCatFieldSchema dataField : dataFields) {         if (columnNamesSb.length() > 0) {             columnNamesSb.append(",");             typeNamesSb.append(":");           }           columnNamesSb.append(dataField.getName());           typeNamesSb.append(dataField.getTypeString());         }         jobProperties.put(IOConstants.SCHEMA_EVOLUTION_COLUMNS, columnNamesSb.toString());         jobProperties.put(IOConstants.SCHEMA_EVOLUTION_COLUMNS_TYPES, typeNamesSb.toString());          boolean isTransactionalTable = AcidUtils.isTablePropertyTransactional(tableProperties);         AcidUtils.AcidOperationalProperties acidOperationalProperties =                 AcidUtils.getAcidOperationalProperties(tableProperties);         AcidUtils.setAcidOperationalProperties(             jobProperties, isTransactionalTable, acidOperationalProperties);       }     } catch (IOException e) {       throw new IllegalStateException("Failed to set output path", e);     }    };feature envy; Blob, Data Class, Feature Envy, Long Method;t;f;t; Blob,  Data Class,  Long Method;;0;8188;https://github.com/apache/hive/blob/2fa22bf360898dc8fd1408bfcc96e1c6aeaf9a53/hcatalog/core/src/main/java/org/apache/hive/hcatalog/mapreduce/FosterStorageHandler.java/#L107-L150;2;5571;8188
5690; YES I found bad smells  the bad smells are: 1. Blob 2. Long method;The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    @Override     public java.util.concurrent.Future updateStack(             final UpdateStackRequest request,             final com.oracle.bmc.responses.AsyncHandler                     handler) {         LOG.trace("Called async updateStack");         final UpdateStackRequest interceptedRequest =                 UpdateStackConverter.interceptRequest(request);         final com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =                 UpdateStackConverter.fromRequest(client, interceptedRequest);         final com.google.common.base.Function                 transformer = UpdateStackConverter.fromResponse();          com.oracle.bmc.responses.AsyncHandler                 handlerToUse = handler;         if (handler != null                 && this.authenticationDetailsProvider                         instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {             handlerToUse =                     new com.oracle.bmc.util.internal.RefreshAuthTokenWrappingAsyncHandler<                             UpdateStackRequest, UpdateStackResponse>(                             (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)                                     this.authenticationDetailsProvider,                             handler) {                         @Override                         public void retryCall() {                             final com.oracle.bmc.util.internal.Consumer                                     onSuccess =                                             new com.oracle.bmc.http.internal.SuccessConsumer<>(                                                     this, transformer, interceptedRequest);                             final com.oracle.bmc.util.internal.Consumer onError =                                     new com.oracle.bmc.http.internal.ErrorConsumer<>(                                             this, interceptedRequest);                             client.put(                                     ib,                                     interceptedRequest.getUpdateStackDetails(),                                     interceptedRequest,                                     onSuccess,                                     onError);                         }                     };         }          final com.oracle.bmc.util.internal.Consumer onSuccess =                 (handler == null)                         ? null                         : new com.oracle.bmc.http.internal.SuccessConsumer<>(                                 handlerToUse, transformer, interceptedRequest);         final com.oracle.bmc.util.internal.Consumer onError =                 (handler == null)                         ? null                         : new com.oracle.bmc.http.internal.ErrorConsumer<>(                                 handlerToUse, interceptedRequest);          java.util.concurrent.Future responseFuture =                 client.put(                         ib,                         interceptedRequest.getUpdateStackDetails(),                         interceptedRequest,                         onSuccess,                         onError);          if (this.authenticationDetailsProvider                 instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {             return new com.oracle.bmc.util.internal.RefreshAuthTokenTransformingFuture<                     javax.ws.rs.core.Response, UpdateStackResponse>(                     responseFuture,                     transformer,                     (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)                             this.authenticationDetailsProvider,                     new com.google.common.base.Supplier<                             java.util.concurrent.Future>() {                         @Override                         public java.util.concurrent.Future get() {                             return client.put(                                     ib,                                     interceptedRequest.getUpdateStackDetails(),                                     interceptedRequest,                                     onSuccess,                                     onError);                         }                     });         } else {             return new com.oracle.bmc.util.internal.TransformingFuture<>(                     responseFuture, transformer);         }     };long method; Blob2 Long method;t;f;t;;;0;12064;https://github.com/oracle/oci-java-sdk/blob/76e9cecd7b309d9f12e5efe96c74167c66a98872/bmc-resourcemanager/src/main/java/com/oracle/bmc/resourcemanager/ResourceManagerAsyncClient.java/#L1366-L1452;2;5690;12064
5691;  YES I found bad smells The bad smells are: 1. Blob, 2. Long method;The list below presents common code smells (aka bad
smells) I need to check if the Java code provided at the
end of the input contains at least one of them.
* Blob
* Data Class
* Feature Envy
* Long Method
Could you please identify which smells occur in the
following code? However, do not describe the smells, just
list them.
Please start your answer with “YES I found bad smells”
when you find any bad smell. Otherwise, start your answer
with “NO, I did not find any bad smell”.
When you start to list the detected bad smells, always
put in your answer “the bad smells are:” amongst the text
your answer and always separate it in this format: 1. Long
method, 2.Feature envy:
    @SuppressWarnings("try")     private void doRun(Map entryPoints, Method mainEntryPoint,                     JavaMainSupport javaMainSupport, String imageName, AbstractBootImage.NativeImageKind k,                     SubstitutionProcessor harnessSubstitutions,                     ForkJoinPool compilationExecutor, ForkJoinPool analysisExecutor) {         List hostedEntryPoints = new ArrayList<>();          OptionValues options = HostedOptionValues.singleton();         SnippetReflectionProvider originalSnippetReflection = GraalAccess.getOriginalSnippetReflection();         try (DebugContext debug = DebugContext.create(options, new GraalDebugHandlersFactory(originalSnippetReflection))) {             setupNativeImage(imageName, options, entryPoints, javaMainSupport, harnessSubstitutions, analysisExecutor, originalSnippetReflection, debug);              boolean returnAfterAnalysis = runPointsToAnalysis(imageName, options, debug);             if (returnAfterAnalysis) {                 return;             }              NativeImageHeap heap;             HostedMethod mainEntryPointHostedStub;             HostedMetaAccess hMetaAccess;             SharedRuntimeConfigurationBuilder runtime;             try (StopTimer t = new Timer(imageName, "universe").start()) {                 hUniverse = new HostedUniverse(bigbang);                 hMetaAccess = new HostedMetaAccess(hUniverse, bigbang.getMetaAccess());                  new UniverseBuilder(aUniverse, bigbang.getMetaAccess(), hUniverse, hMetaAccess, HostedConfiguration.instance().createStaticAnalysisResultsBuilder(bigbang, hUniverse),                                 bigbang.getUnsupportedFeatures()).build(debug);                  runtime = new HostedRuntimeConfigurationBuilder(options, bigbang.getHostVM(), hUniverse, hMetaAccess, bigbang.getProviders()).build();                 registerGraphBuilderPlugins(featureHandler, runtime.getRuntimeConfig(), (HostedProviders) runtime.getRuntimeConfig().getProviders(), bigbang.getMetaAccess(), aUniverse,                                 hMetaAccess, hUniverse,                                 nativeLibraries, loader, false, true, bigbang.getAnnotationSubstitutionProcessor(), new SubstrateClassInitializationPlugin((SVMHost) aUniverse.hostVM()),                                 bigbang.getHostVM().getClassInitializationSupport());                  if (NativeImageOptions.PrintUniverse.getValue()) {                     printTypes();                 }                  /* Find the entry point methods in the hosted world. */                 for (AnalysisMethod m : aUniverse.getMethods()) {                     if (m.isEntryPoint()) {                         HostedMethod found = hUniverse.lookup(m);                         assert found != null;                         hostedEntryPoints.add(found);                     }                 }                 /* Find main entry point */                 if (mainEntryPoint != null) {                     AnalysisMethod analysisStub = CEntryPointCallStubSupport.singleton().getStubForMethod(mainEntryPoint);                     mainEntryPointHostedStub = (HostedMethod) hMetaAccess.getUniverse().lookup(analysisStub);                     assert hostedEntryPoints.contains(mainEntryPointHostedStub);                 } else {                     mainEntryPointHostedStub = null;                 }                 if (hostedEntryPoints.size() == 0) {                     throw UserError.abort("Warning: no entry points found, i.e., no method annotated with @" + CEntryPoint.class.getSimpleName());                 }                  heap = new NativeImageHeap(aUniverse, hUniverse, hMetaAccess);                  BeforeCompilationAccessImpl config = new BeforeCompilationAccessImpl(featureHandler, loader, aUniverse, hUniverse, hMetaAccess, heap, debug);                 featureHandler.forEachFeature(feature -> feature.beforeCompilation(config));                  bigbang.getUnsupportedFeatures().report(bigbang);             } catch (UnsupportedFeatureException ufe) {                 throw UserError.abort(ufe.getMessage());             }              recordMethodsWithStackValues();             recordRestrictHeapAccessCallees(aUniverse.getMethods());              /*              * After this point, all TypeFlow (and therefore also TypeState) objects are unreachable              * and can be garbage collected. This is important to keep the overall memory footprint              * low. However, this also means we no longer have complete call chain information. Only              * the summarized information stored in the StaticAnalysisResult objects is available              * after this point.              */             bigbang.cleanupAfterAnalysis();              NativeImageCodeCache codeCache;             CompileQueue compileQueue;             try (StopTimer t = new Timer(imageName, "compile").start()) {                 compileQueue = HostedConfiguration.instance().createCompileQueue(debug, featureHandler, hUniverse, runtime, DeoptTester.enabled(), bigbang.getProviders().getSnippetReflection(),                                 compilationExecutor);                 compileQueue.finish(debug);                  /* release memory taken by graphs for the image writing */                 hUniverse.getMethods().forEach(HostedMethod::clear);                  codeCache = NativeImageCodeCacheFactory.get().newCodeCache(compileQueue, heap);                 codeCache.layoutConstants();                 codeCache.layoutMethods(debug, imageName);                  AfterCompilationAccessImpl config = new AfterCompilationAccessImpl(featureHandler, loader, aUniverse, hUniverse, hMetaAccess, heap, debug);                 featureHandler.forEachFeature(feature -> feature.afterCompilation(config));             }              try (Indent indent = debug.logAndIndent("create native image")) {                 try (DebugContext.Scope buildScope = debug.scope("CreateBootImage")) {                     try (StopTimer t = new Timer(imageName, "image").start()) {                          // Start building the model of the native image heap.                         heap.addInitialObjects();                         // Then build the model of the code cache, which can                         // add objects to the native image heap.                         codeCache.addConstantsToHeap();                         // Finish building the model of the native image heap.                         heap.addTrailingObjects();                          AfterHeapLayoutAccessImpl config = new AfterHeapLayoutAccessImpl(featureHandler, loader, hMetaAccess, debug);                         featureHandler.forEachFeature(feature -> feature.afterHeapLayout(config));                          this.image = AbstractBootImage.create(k, hUniverse, hMetaAccess, nativeLibraries, heap, codeCache, hostedEntryPoints, mainEntryPointHostedStub, loader.getClassLoader());                         image.build(debug);                         if (NativeImageOptions.PrintUniverse.getValue()) {                             /*                              * This debug output must be printed _after_ and not _during_ image                              * building, because it adds some PrintStream objects to static fields,                              * which disrupts the heap.                              */                             codeCache.printCompilationResults();                         }                     }                 }             }              BeforeImageWriteAccessImpl beforeConfig = new BeforeImageWriteAccessImpl(featureHandler, loader, imageName, image,                             runtime.getRuntimeConfig(), aUniverse, hUniverse, optionProvider, hMetaAccess, debug);             featureHandler.forEachFeature(feature -> feature.beforeImageWrite(beforeConfig));              try (StopTimer t = new Timer(imageName, "write").start()) {                 /*                  * This will write the debug info too -- i.e. we may be writing more than one file,                  * if the debug info is in a separate file. We need to push writing the file to the                  * image implementation, because whether the debug info and image share a file or                  * not is an implementation detail of the image.                  */                 Path tmpDir = tempDirectory();                 Path imagePath = image.write(debug, generatedFiles(HostedOptionValues.singleton()), tmpDir, imageName, beforeConfig).getOutputFile();                  AfterImageWriteAccessImpl afterConfig = new AfterImageWriteAccessImpl(featureHandler, loader, hUniverse, imagePath, tmpDir, image.getBootImageKind(), debug);                 featureHandler.forEachFeature(feature -> feature.afterImageWrite(afterConfig));             }         }     };long method; Blob, 2 Long method;t;f;t;. Blob;;0;12087;https://github.com/oracle/graal/blob/4deb681aaaa79c248115037fc8e399c9876619fd/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/NativeImageGenerator.java/#L487-L632;2;5691;12087
